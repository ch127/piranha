#!/usr/bin/env bash

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: piranha                                                                          #
  VERSION="v1.0.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Fri, Mar 8 12:43:12 CST 2019.                        #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2019 Justin C. Bagley. All rights reserved.                              #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description: Main script for PIrANHA package, controls all other scripts. With no      #
# input, prints usage and exits.                                                         #
#                                                                                        #
##########################################################################################

## Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

## Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

## Source Shared Functions and Variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

## Set bin/ Location
# -----------------------------------
BIN_LOCATION="${SCRIPT_PATH}/bin/" # Update this path to find the piranha bin folder.

## trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
function trapCleanup() {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

## safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
function safeExit() {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

## Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

## Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

## Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

## Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




function piranha () {

######################################## START ###########################################
##########################################################################################

echo "
piranha v1.0.1, March 2019  (main script for PIrANHA v0.2-alpha.1c)  "
echo "Copyright (c) 2019 Justin C. Bagley. All rights reserved.  "
echo "----------------------------------------------------------------------------------------------------------"

if [[ -z "$FUNCTION_TO_RUN" ]] && [[ -z "$FUNCTION_ARGUMENTS" ]]; then
  usage ;
  safeExit ;
fi

if [[ ! -z "$FUNCTION_TO_RUN" ]]; then

############ I. READ INPUT, SET UP WORKSPACE, AND CHECK / ECHO MACHINE TYPE.
	echo "INFO      | $(date) |          Args: $args+ "
	echo "INFO      | $(date) |          Function: $FUNCTION_TO_RUN "
	echo "INFO      | $(date) |          Function arguments: $FUNCTION_ARGUMENTS "
	echoCDWorkingDir
	echo "INFO      | $(date) |          Checking machine type... "
	checkMachineType
	echo "INFO      | $(date) |          Found machine type ${machine}. "

	if [[ "${machine}" = "Linux" ]]; then
		echo "INFO      | $(date) |          Checking file limits on Linux..."
		FILE_LIMIT=$(ulimit -n)
		export FILE_LIMIT
		if [[ "$FILE_LIMIT" != "unlimited" ]]; then
			NEW_LIMIT="$( calc $FILE_LIMIT*10 )";
			ulimit -n $NEW_LIMIT ;
		fi
	fi

############ II. CALL USER-SPECIFIED FUNCTION / SCRIPT IN BIN LOCATION, WITH OR WITHOUT ARGUMENTS.

	MY_EXECUTION_PATH="$(echo ${BIN_LOCATION}${FUNCTION_TO_RUN})"
	echo "INFO      | $(date) |          Execution path: $MY_EXECUTION_PATH"

	## First two conditionals below: cases where function run is not MAGNET.
	if [[ -z "$FUNCTION_ARGUMENTS" ]] && [[ "$FUNCTION_TO_RUN" != "MAGNET" ]]; then
		echo "INFO      | $(date) |          Executing function without additional arguments..."
		"$MY_EXECUTION_PATH" ;
	fi

	if [[ ! -z "$FUNCTION_ARGUMENTS" ]] && [[ "$FUNCTION_TO_RUN" != "MAGNET" ]]; then
		echo "INFO      | $(date) |          Executing function with -a flag arguments..."
		"$MY_EXECUTION_PATH" "$FUNCTION_ARGUMENTS" ;
	fi

	## Next two conditionals below: cases where function run _is_ MAGNET. Need these cases
	## because MAGNET comes with PIrANHA in its own subfolder with its own file structure,
	## so we need to add the subfolder name (which will vary as MAGNET is updated in the 
	## future) to the execution path, $MY_EXECUTION_PATH.
	if [[ -z "$FUNCTION_ARGUMENTS" ]] && [[ "$FUNCTION_TO_RUN" = "MAGNET" ]]; then
		MY_EXECUTION_PATH="$(echo ${BIN_LOCATION}MAGNET-1.0.0/${FUNCTION_TO_RUN})"
		echo "INFO      | $(date) |          Executing function without additional arguments..."
		"$MY_EXECUTION_PATH" ;
	fi

	if [[ ! -z "$FUNCTION_ARGUMENTS" ]] && [[ "$FUNCTION_TO_RUN" = "MAGNET" ]]; then
		MY_EXECUTION_PATH="$(echo ${BIN_LOCATION}MAGNET-1.0.0/${FUNCTION_TO_RUN})"
		echo "INFO      | $(date) |          Executing function with -a flag arguments..."
		"$MY_EXECUTION_PATH" "$FUNCTION_ARGUMENTS" ;
	fi

fi

##########################################################################################
######################################### END ############################################

}


############## Begin Options and Usage ###################

## Print usage
usage() {
  echo -n "${SCRIPT_NAME} [OPTION]... [FILE]...

 This is the main script for PIrANHA v0.2-alpha.1c.

 ${bold}Options:${reset}
  -f, --func        Function, <function>
  -a, --args        Function arguments passed to <function>
  -u, --username    Username for script
  -p, --password    User password
  --force           Skip all user interaction.  Implied 'Yes' to all actions.
  -q, --quiet       Quiet (no output)
  -l, --log         Print log to file
  -s, --strict      Exit script with null variables.  i.e 'set -o nounset'
  -v, --verbose     Output more information. (Items echoed to 'verbose')
  -d, --debug       Runs script in BASH debug mode (set -x)
  -h, --help        Display this help and exit
      --version     Output version information and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT is the 'master' script that runs the PIrANHA software package by specifying the 
 <function> to be run (-f flag) and any arguments to pass to that function (-a flag). If no
 functions are given, then the program prints the help text and exits.
	Functions are located in PIrANHA repository's bin/ folder. For detailed information on
 the capabilities of PIrANHA, please refer to documentation posted on the PIrANHA
 Wiki (https://github.com/justincbagley/piranha/wiki) or the PIrANHA website
 (https://justinbagley.org/piranha/) for further information.

 ${bold}Usage examples:${reset}
    piranha -f calcAlignmentPIS --args='-h'      Get help text for calcAlignmentPIS
    piranha -f calcAlignmentPIS --args='-t 150'  Run calcAlignmentPIS with threshold at N=150 alignments
    piranha -f calcAlignmentPIS -a '-t 150'      Same as above, but passing arguments with -a flag

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 Created by Justin Bagley on Fri, Mar 8 12:43:12 CST 2019.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"
}

############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
# USER_SPEC_PATH=.
# FUNCTION_TO_RUN=NULL
# FUNCTION_ARGUMENTS=NULL
# USER_OUTPUT_DIR=.

# Iterate over options breaking -ab into -a -b when needed and --foo=bar into
# --foo bar
optstring=h
unset options
while (($#)); do
  case $1 in
    # If option is of type -ab
    -[!-]?[b-zB-Z]*)
      # Loop over each character starting with the second
      for ((i=1; i < ${#1}; i++)); do
        c=${1:i:1}

        # Add current char to options
        options+=("-$c")

        # If option takes a required argument, and it's not the last char make
        # the rest of the string its argument
        if [[ $optstring = *"$c:"* && ${1:i+1} ]]; then
          options+=("${1:i+1}")
          break
        fi
      done
      ;;

#      # Special handling of arguments (-a) option, so it's the same with one hyphen
#      # (-a 'args') as with two hyphens (--args 'args' or --args='args'). Both can now
#      # use --endopts.
#      case $1 in
#        -[!-]a) options+=("${1%%=*}" "${1#*=}") ;;
#        --) options+=(--endopts) ;;
#      done
#      ;;
    -[!-]a) options+=("${1%%=*}" "${1#*=}") ;;

    # If option is of type --foo=bar
    --?*=*) options+=("${1%%=*}" "${1#*=}") ;;
    # add --endopts for --
    --) options+=(--endopts) ;;
    # Otherwise, nothing special
    *) options+=("$1") ;;
  esac
  shift
done
set -- "${options[@]}"
unset options

# Print help if no arguments were passed.
# Uncomment to force arguments when invoking the script
# [[ $# -eq 0 ]] && set -- "--help"

# Read the options and set stuff
while [[ ${1} = -?* ]]; do
  case ${1} in
    -f|--func) shift; FUNCTION_TO_RUN="$1" ;;
    -a|--args) shift; FUNCTION_ARGUMENTS="$1" ;;
    -o|--output) shift; USER_OUTPUT_DIR="$1" ;;
    --delete) deleteOriginal=true ;;
    --saveDir) shift; saveDir="$1" ;;
    -h|--help) usage >&2; safeExit ;;
    --force) force=true ;;
    -V|--version) echo "$(basename $0) $VERSION"; safeExit ;;
    -v|--verbose) verbose=true ;;
    -l|--log) printLog=true ;;
    -q|--quiet) quiet=true ;;
    -d|--debug) debug=true;;
    --endopts) shift; break ;;
    *) die "invalid option: '$1'." ;;
  esac
  shift
done

# Store the remaining part as arguments.
args+=("$@")


############## End Options and Usage ###################


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
piranha

# Exit cleanly
safeExit
