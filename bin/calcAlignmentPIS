#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: calcAlignmentPIS.sh                                                              #
  VERSION="v1.5.2"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Wed, Mar 6 09:57:26 CST 2019.                        #
# Last update: April 12, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# GENERATES AND RUNS CUSTOM RSCRIPT (PHYLOCH WRAPPER) TO CALCULATE NUMBER OF PARSIMONY-  #
# INFORMATIVE SITES (PIS) FOR ALL FASTA ALIGNMENT FILES IN WORKING DIR                   #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited. Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




calcAlignmentPIS () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | calcAlignmentPIS, v1.5.2 April 2020                            "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting calcAlignmentPIS pipeline... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Create custom Rscript. "
############ II. CREATE CUSTOM RSCRIPT FOR ESTIMATING PARSIMONY INFORMATIVE SITES.
echo "INFO      | $(date) |          Building custom calcAlignmentPIS R script for calculating parsimony-informative sites (PIS) from FASTA files... "
if [[ "$KEEP_R_FILES_SWITCH" = "0" ]]; then
	echo "WARNING!  | $(date) |          NOTE: <keepFiles> switch turned off, so R script and R output files will be removed at the end of this run."
fi
if [[ -s ./calcAlignmentPIS.Rout ]]; then rm ./calcAlignmentPIS.Rout ; fi
if [[ -s ./calcAlignmentPIS.R ]]; then rm ./calcAlignmentPIS.R ; fi
if [[ -s ./calcAlignmentPIS.r ]]; then rm ./calcAlignmentPIS.r ; fi

## NOTE: This Rscript is essentially an automation wrapper based on existing functions for
## reading FASTA alignments and calculating PIS in the R package phyloch, which is only
## available from author Christoph Hiebl's website at URL: http://www.christophheibl.de/Rpackages.html.
## The package phyloch MUST be installed before running this script.

##### ORIGINAL NOTES IN THE R SCRIPT:
## R code for looping through set of FASTA files in dir and calculating parsimony-informative
## sites for each alignment, then saving and outputting to file. Written for Anoura UCE
## data analysis, March 6, 2019
##
## Be sure to do the following OUTSIDE of R before running R on your machine (assuming
## you have set up the prepR function in your ~/.bashrc (Linux) or ~/.bash_profile (Mac)
## files on machine).
## $ prepR
#####

############ 
############ MULTIPLE FASTAS (DEFAULT, OR SET WITH -m FLAG)
############ 
if [[ "$INPUT_FASTA_FILE" = "NULL" ]] && [[ "$MULTIPLE_FASTA_SWITCH" = "1" ]]; then

(	
	for i in ./*.{fasta,fas,FASTA,FAS} ; do
		if [[ "$i" != "./*.fasta" ]] && [[ "$i" != "./*.fas" ]] && [[ "$i" != "./*.FASTA" ]] && [[ "$i" != "./*.FAS" ]]; then
		echo "$i" >> ./FASTA_order.list.tmp ;
		fi
	done
)
MY_FASTA_EXTENSION="$(head -n1 ./FASTA_order.list.tmp | sed 's/\.\///g; s/.*\./\./g')";

echo "
#!/usr/bin/env Rscript

################################### calcAlignmentPIS.R #####################################
############ I. SETUP
##--Load needed packages, R code, or other prelim stuff. Install packages if not present.
packages <- c('phyloch')
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
	install.packages(setdiff(packages, rownames(installed.packages())))
}
library(phyloch)
#setwd('$MY_PATH')	# With my current R setup, no need to set wd because this is done automatically at start up.
getwd()

############ II. CALCULATE PARSIMONY-INFORMATIVE SITES (PIS) FOR ALL FASTA FILES.
files <- list.files(path=getwd(), pattern='*$MY_FASTA_EXTENSION', full.names=TRUE, recursive=FALSE)
iterations <- length(files)
variables <- 1
output <- matrix(ncol=variables, nrow=iterations)

## Use loop through FASTA files in files (above) to calculate PIS for each file and save
## to output matrix:
for(i in 1:iterations){
	# Read FASTA file
	fas <- read.fas(files[i])
	# Apply function to estimate parsimony-informative sites (PIS)
	pis_out <- pis(fas, abs = TRUE, use.ambiguities = FALSE)
	# Add PIS result to data matrix
	output[i,] <- pis_out
}

write.table(output, 'pis_output_table.txt', sep='\t', quote=FALSE, row.names=FALSE, col.names=TRUE)

output

write.table(files, 'input_file_order.txt', sep='\t')

######################################### END ############################################
" > calcAlignmentPIS.R

fi
###

############ 
############ SINGLE INPUT FASTA SPECIFIED AS $INPUT_FASTA_FILE WITH -i FLAG
############ 
###
if [[ "$INPUT_FASTA_FILE" != "NULL" ]]; then
# Clean input FASTA file env variable, removing any spaces that might be present (which 
# would cause the R script to fail):
INPUT_FASTA_FILE="$(echo "$INPUT_FASTA_FILE" | sed 's/\ //g' | sed 's/\.fasta\-k0/\.fasta/g' | sed 's/\.fas\-k0/\.fas/g')";
echo "
#!/usr/bin/env Rscript

################################### calcAlignmentPIS.R #####################################
############ I. SETUP
##--Load needed packages, R code, or other prelim stuff. Install packages if not present.
packages <- c('phyloch')
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
	install.packages(setdiff(packages, rownames(installed.packages())))
}
library(phyloch)
#setwd('$MY_PATH')	# With my current R setup, no need to set wd because this is done automatically at start up.
getwd()

############ II. CALCULATE PARSIMONY-INFORMATIVE SITES (PIS) FOR ALL FASTA FILES.
files <- list.files(path=getwd(), pattern='$INPUT_FASTA_FILE', full.names=TRUE, recursive=FALSE)
iterations <- length(files)
variables <- 1
output <- matrix(ncol=variables, nrow=iterations)

## Use loop through FASTA files in files (above) to calculate PIS for each file and save
## to output matrix:
for(i in 1:iterations){
	# Read FASTA file
	fas <- read.fas(files[i])
	# Apply function to estimate parsimony-informative sites (PIS)
	pis_out <- pis(fas, abs = TRUE, use.ambiguities = FALSE)
	# Add PIS result to data matrix
	output[i,] <- pis_out
}

write.table(output, 'pis_output_table.txt', sep='\t', quote=FALSE, row.names=FALSE, col.names=TRUE)

output

write.table(files, 'input_file_order.txt', sep='\t')

######################################### END ############################################
" > calcAlignmentPIS.R

fi
###


echo "INFO      | $(date) | Step #3: Run the Rscript (which also saves output and results to file). "
############ III. RUN RSCRIPT.
	prepR () {
		export TMPDIR=~/tmp ; ## set temp file directory to be within $HOME
		R_LOCATION="$(which R | sed 's/\ //g')";
		alias R="$R_LOCATION";
}
	prepR

	R CMD BATCH calcAlignmentPIS.R ;


echo "INFO      | $(date) | Step #4: Conduct post-processing of R output. "
############ IV. CONDUCT POST-PROCESSING OF R OUTPUT USING A VARIETY OF OPERATIONS.
echo "INFO      | $(date) |          Editing PIS output table... "
	sed 's/\"//g' input_file_order.txt | sed '1d' | perl -p -e 's/^.*\t.*\///g' > input_file_order_filenames.txt ;

	if [[ "${machine}" = "Mac" ]]; then
		sed -i.bak '1d' pis_output_table.txt ;
		rm ./*.bak;
	fi
	if [[ "${machine}" = "Linux" ]]; then
		sed -i '1d' pis_output_table.txt ;
	fi

	echo pis file | perl -pe $'s/\ /\t/g' > header.tmp ;

	paste pis_output_table.txt input_file_order_filenames.txt > pis_results_table_headless.txt ;
	cat header.tmp pis_results_table_headless.txt > pis_results_table.txt ;

	sort -n -r pis_results_table_headless.txt > pis_results_table_headless_revsort.txt ;
	cat header.tmp pis_results_table_headless_revsort.txt > pis_results_table_revsort.txt ;


if [[ "$MY_PIS_THRESHOLD_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) |          Editing PIS output table... "

		keepPISThresholdAlignments () {
			MY_N_ALIGN_CUTOFF="$(echo $MY_PIS_THRESHOLD_SWITCH | sed 's/\ //g')";

			cp ./pis_results_table_revsort.txt ./pis.tmp ;

			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak '1d' ./pis.tmp ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i '1d' ./pis.tmp ;
			fi

			perl -p -i -e $'s/^.*\t//g' ./pis.tmp ;

			head -n"$MY_N_ALIGN_CUTOFF" ./pis.tmp > ./pis_results_table_revsort_top"$MY_N_ALIGN_CUTOFF"_filenames.txt ;

			mkdir pis_threshold_alignments/;

			(
				while read line; do
					cp "$line" ./pis_threshold_alignments/ ;
				done < ./pis_results_table_revsort_top"$MY_N_ALIGN_CUTOFF"_filenames.txt ;
			)
		}

		## DON'T FORGET TO RUN THE FUNCTION!!!
		keepPISThresholdAlignments

fi


echo "INFO      | $(date) | Step #5: Clean up workspace. "
echo "INFO      | $(date) |          Cleaning up workspace by removing temporary files generated during run... "
############ V. CLEAN UP WORKSPACE BY REMOVING TEMPORARY FILES.
	if [[ ! -s ./piranha_calcAlignmentPIS.sh ]]; then 
		if [[ -s ./header.tmp ]]; then rm ./header.tmp ; fi
		if [[ -s ./pis.tmp ]]; then rm ./pis.tmp ; fi
		rm ./pis_results_table_headless_revsort.txt ./pis_results_table_headless.txt ./pis_output_table.txt ./input_file_order_filenames.txt ./input_file_order.txt ;
	else
		echo "INFO      | $(date) |          "
	fi

	if [[ "$KEEP_R_FILES_SWITCH" = "0" ]]; then
		if [[ -s ./calcAlignmentPIS.Rout ]]; then rm ./calcAlignmentPIS.Rout ; fi
		if [[ -s ./calcAlignmentPIS.R ]]; then rm ./calcAlignmentPIS.R ; fi
		if [[ -s ./.RData ]]; then rm ./.RData ; fi
	fi

	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	
#echo "INFO      | $(date) | Successfully created PHYLIP ('.phy') input file from the existing NEXUS file... "
#echo "INFO      | $(date) | Done. Bye. "
echo "----------------------------------------------------------------------------------------------------------"
if [[ "$MY_PIS_THRESHOLD_SWITCH" = "0" ]] && [[ "$KEEP_R_FILES_SWITCH" = "1" ]]; then
	echo "output file(s): ./pis_results_table.txt"
	echo "                ./pis_results_table_revsort.txt"
	echo "                ./calcAlignmentPIS.R"
fi
if [[ "$MY_PIS_THRESHOLD_SWITCH" != "0" ]] && [[ "$KEEP_R_FILES_SWITCH" = "1" ]]; then
	echo "output file(s)/folder(s): ./pis_results_table.txt"
	echo "                          ./pis_results_table_revsort.txt"
	echo "                          ./pis_results_table_revsort_top${MY_N_ALIGN_CUTOFF}_filenames.txt"
	echo "                          ./pis_threshold_alignments/"
	echo "                          ./calcAlignmentPIS.Rout"
	echo "                          ./calcAlignmentPIS.R"
fi
if [[ "$MY_PIS_THRESHOLD_SWITCH" = "0" ]] && [[ "$KEEP_R_FILES_SWITCH" = "0" ]]; then
	echo "output file(s): ./pis_results_table.txt"
	echo "                ./pis_results_table_revsort.txt"
fi
if [[ "$MY_PIS_THRESHOLD_SWITCH" != "0" ]] && [[ "$KEEP_R_FILES_SWITCH" = "0" ]]; then
	echo "output file(s)/folder(s): ./pis_results_table.txt"
	echo "                          ./pis_results_table_revsort.txt"
	echo "                          ./pis_results_table_revsort_top${MY_N_ALIGN_CUTOFF}_filenames.txt"
	echo "                          ./pis_threshold_alignments/"
fi
echo ""


##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
# USER_SPEC_PATH=.
INPUT_FASTA_FILE=NULL
MULTIPLE_FASTA_SWITCH=1
MY_PIS_THRESHOLD_SWITCH=0
KEEP_R_FILES_SWITCH=1

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i   inputFASTA (def: NULL) input FASTA filename
  -m   multiFASTA (def: 1, turned on; 0, off) whether or not to run on multiple FASTA files 
       in current working directory
  -t   threshold (def: 0, off; other: N) '-t N' calls additional post-processing routine
       that subsets alignments to a threshold number, N, with the most parsimony-informative
       sites (PIS). Takes integer values of N > 0.
  -k   keepFiles (def: 1, on; 0, off) whether or not to keep custom R script and R output
       files generated during the run
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates calculating the number of parsimony-informative sites (PIS) for one 
 or multiple FASTA-formatted multiple sequence alignments (MSAs) in the current working 
 directory. To do this, calcAlignmentPIS.sh generates and runs a custom Rscript calling on 
 functions in the R package phyloch (Heibl 2013). Thus parts of this function act as a 
 wrapper for phyloch, and R (v3.3+) and the phyloch package are important dependencies.
	By default, the program runs on all FASTA files (all with same extension, either '.fas'
 or '.fasta') in the working directory. Optionally, the user may specify whether or not to 
 run on multiple FASTAs with the -m flag, or the user may supply a single FASTA file for 
 analysis using the -i flag. The user may also specify for a threshold number of alignments, 
 N, with the highest PIS values to be saved using the -t flag. For example, '-t 150' sets 
 N=150 and the program will keep the 150 FASTA alignments with the most PIS. The N alignments 
 will be copied to a subfolder named 'pis_threshold_alignments/'. The -k flag allows the 
 user to specify whether or not to keep custom R script ('.r') and R output ('.Rout') files
 generated during the run, and this option is turned on by default, so set to -k 0 for a 
 clean working dir with only the results table(s).

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f calcAlignmentPIS -i <inputFASTA>    Run calcAlignmentPIS on <inputFASTA> file
    piranha -f calcAlignmentPIS -m 1               Run calcAlignmentPIS on all FASTAS in current
                                                   dir, with no threshold
    piranha -f calcAlignmentPIS -t 150             Run calcAlignmentPIS on all FASTAS in current
                                                   dir, with threshold at N=150 alignments
    piranha -f calcAlignmentPIS -k 0               Default multi-FASTA run, but removing custom
                                                   R input and output files generated during run

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Heibl C. 2008 onwards. PHYLOCH: R language tree plotting tools and interfaces to diverse
	phylogenetic software packages. Available at: <http://www.christophheibl.de/Rpackages.html.>

 Created by Justin Bagley on Wed, Mar 6 09:57:26 CST 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:m:t:k:' opt ; do
  case $opt in
## Script options:
    i) INPUT_FASTA_FILE=$OPTARG ;;
    m) MULTIPLE_FASTA_SWITCH=$OPTARG ;;
    t) MY_PIS_THRESHOLD_SWITCH=$OPTARG ;;
    k) KEEP_R_FILES_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
calcAlignmentPIS

# Exit cleanly
safeExit
