#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: completeSeqs.sh                                                                  #
  VERSION="v2.0.4"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Sun, February 24, 2019.                              #
# Last update: April 21, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT CONVERTS SERIES OF PHYLIP DNA SEQUENCE ALIGNMENTS WITH VARYING       #
# NUMBERS OF TAXA INTO COMPLETE PHYLIP ALIGNMENTS (WITH COMPLETE TAXON SAMPLING),        #
# STARTING FROM A TAXON NAMES AND SPACES FILE                                            #
#                                                                                        #
##########################################################################################

## TODO: Change need for taxon names and spaces file to only a need for a taxon names file.
## Should be easy to write code to convert an input taxon names file to an appropriately
## formatted taxon names and spaces file during the course of this script/function. Can also
## use new getTaxonNames function.

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




completeSeqs () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | completeSeqs, v2.0.4 April 2020                                "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
#if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
echo "INFO      | $(date) | Starting completeSeqs analysis... "
echo "INFO      | $(date) | Running with the following options: "
echo "INFO      | $(date) | - Taxon names and spaces file, <taxonNamesSpaces>: ${USER_SPEC_NAMSPACES_FILE} "
echo "INFO      | $(date) | - Missing character option, <missingCharacter>: ${MY_MISSING_CHAR} "	# def: N
echo "INFO      | $(date) | - <outputFile> option: ${MY_OUTPUT_FILE_SWITCH} "	# def: completeSeqs_output.txt
echo "INFO      | $(date) | - Verbose output switch, <verbose>: ${MY_VERBOSE_OUT_SWITCH} "

echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and determine output file settings. "
#fi

################################# 1. SETUP

############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
checkMachineType

	###### START DEBUG MODE IF SET:
	if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


################################# 2. OUTPUT FILE

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Set output file. "
fi
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	echo "INFO      | $(date) | Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
	echo "INFO      | $(date) | Check the output file for additional run details ... "
	echo "----------------------------------------------------------------------------------------------------------"
	echo ""
	exec >> ./"$MY_OUTPUT_FILE_SWITCH" ;
	exec 2>&1 ;
	echo "INFO      | $(date) | Step #2: Set output file. "
	echo "INFO      | $(date) | Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
	fi
elif [[ "$MY_OUTPUT_FILE_SWITCH" = "NULL" ]]; then
	echo "INFO      | $(date) | Default output file settings. Logging output to file at ./completeSeqs_output.txt ... "
	echo "INFO      | $(date) | Check the output file for additional run details ... "
	echo "----------------------------------------------------------------------------------------------------------"
	echo ""
	exec >> ./completeSeqs_output.txt ;
	exec 2>&1 ;
	echo "INFO      | $(date) | Step #2: Set output file. "
	echo "INFO      | $(date) | Default output file settings. Logging output to file at ./completeSeqs_output.txt ... "
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Default output file settings. Logging output to file at ./completeSeqs_output.txt ... "
	fi
fi


################################# 3. RUN MAIN completeSeqs ANALYSIS

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #3: Run main completeSeqs analysis. "
fi

count=1
(
	for i in ./*.phy; do

		cp "$USER_SPEC_NAMSPACES_FILE" "$i".tmp ;
		j="$i".tmp ;
		MY_PHYLIP_NCHAR="$(head -n1 $i | perl -pe 's/^[0-9]*[\ ]*//g; s/[\ ]//g')" ;
		echo "INFO      | $(date) | ###----------   $i,  $MY_PHYLIP_NCHAR bp   ----------###" ;

			while read line; do
				MY_TAXON_NAME="$(echo "$line" | sed 's/\ //g')" ;
				echo "$MY_TAXON_NAME"

				if [[ ! -z "$(grep -n "$MY_TAXON_NAME" "$i" )" ]]; then 
					# Extract/copy corresponding sequence from $i and paste it to end of
					# line with same name ($MY_TAXON_NAME) in tmp file $j:
#					MY_SEQUENCE="$(grep -h "$MY_TAXON_NAME" "$i" | perl -pe 's/^[A-Za-z0-9\-\_\ ]*\ //g' | sed 's/\ //g')" ;
					MY_SEQUENCE="$(grep -h "$MY_TAXON_NAME" "$i" | perl -pe 's/^.*\ //g' | sed 's/\ //g')" ;
					if [[ "${machine}" = "Mac" ]]; then
						sed -i.bak 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
						rm ./*.bak ;
					fi

					if [[ "${machine}" = "Linux" ]]; then
						sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
					fi
				fi
						
				if [[ -z "$(grep -n "$MY_TAXON_NAME" "$i" )" ]]; then 

					if [[ "$MY_MISSING_CHAR" = "N" ]]; then
						# Only add correct # N's (dummy sequence) to end of line with same
						# name in tmp file $j, after taxon name plus spaces:
						MY_SEQUENCE="$(printf 'N%.0s' {$(seq 1 $MY_PHYLIP_NCHAR)})";
						if [[ "${machine}" = "Mac" ]]; then
							sed -i.bak 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
							rm ./*.bak ;
						fi
	
						if [[ "${machine}" = "Linux" ]]; then
							sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
						fi
					elif [[ "$MY_MISSING_CHAR" = "n" ]]; then
						# Only add correct # n's (dummy sequence) to end of line with same
						# name in tmp file $j, after taxon name plus spaces:
						MY_SEQUENCE="$(printf 'n%.0s' {$(seq 1 $MY_PHYLIP_NCHAR)})";
						if [[ "${machine}" = "Mac" ]]; then
							sed -i.bak 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
							rm ./*.bak ;
						fi
	
						if [[ "${machine}" = "Linux" ]]; then
							sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
						fi
					elif [[ "$MY_MISSING_CHAR" = "?" ]]; then
						# Only add correct # ?'s (dummy sequence) to end of line with same
						# name in tmp file $j, after taxon name plus spaces:
						MY_SEQUENCE="$(printf '?%.0s' {$(seq 1 $MY_PHYLIP_NCHAR)})";
						if [[ "${machine}" = "Mac" ]]; then
							sed -i.bak 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
							rm ./*.bak ;
						fi
	
						if [[ "${machine}" = "Linux" ]]; then
							sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
						fi
					fi
				fi

			done < "$USER_SPEC_NAMSPACES_FILE"

	echo "$((count++))" > count.tmp ;
	
	# Overwrite original PHYLIP file $i with new edited tmp file $j
	# cp -f "$j" "$i" ;
	# SKIP THIS FOR NOW! Just use $j during cat below...
	
	# Add header with corrected ntax and nchar information:
	MY_PHY_NTAX="$(awk 'END {print NR,"lines"}' $j | sed 's/\ .*//g')" ;

	echo "$MY_PHY_NTAX  $MY_PHYLIP_NCHAR" > ./header.tmp ;

	# Overwrite original PHYLIP file with new PHYLIP file:
	cat ./header.tmp "$j" > "$i" ;
		
	done
)


################################# 4. CLEAN UP WORKSPACE 

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #4: Clean up workspace by removing temporary files generated during run. "
	echo "INFO      | $(date) | Removing temporary files... "
fi
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
		rm ./*.tmp ; 
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.

echo "INFO      | $(date) | Done." 
echo "----------------------------------------------------------------------------------------------------------"

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$count" = "1" ]]; then
	echo "output file(s): Constructed one complete PHYLIP file in current directory "
fi
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$count" = "2" ]] || [[ "$count" -gt "2" ]]; then
	echo "output file(s): Multiple complete PHYLIP files in current directory "
fi
echo ""


if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
###### END DEBUG MODE

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -t, --taxa      taxonNamesSpaces (def: NULL) mandatory taxon 'names and spaces' file
  -c, --char      missingCharacter (def: N; others: n, ?) character used to make strings of missing 
                  data representing sequences for missing individuals
  -o, --output    outputFile (def: NULL) send screen output to file in working dir with user-specified 
                  name, for example 'output.txt'
  -v, --verbose   verbose (def: 0, off; 1, on) specify verbose filename conversion and step output to
                  screen (stdout)
  -h, --help      echo this help text and exit
  -V, --version   echo version of this script and exit
  -d, --debug     debug (def: 0, off; 1, on) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT runs in a working directory containing a series of PHYLIP (Felsenstein 2002)
 DNA sequence alignments for different genes (e.g. 100s or 1000s of RAD or UCE loci) with 
 varying levels of taxon sampling (completeness), such that out of the total number of tip 
 taxa, some were sequenced for gene A, and possibly the same or a varying number of tip 
 taxa were sequenced for gene B, and so on. Given such a workspace, this program takes as 
 input a 'names and spaces file', <taxonNamesSpaces>, containing only the names of 
 tip taxa, one per line, as well as spaces extending the total number of characters to 
 be the same on each line (e.g. 10 or 12 characters including spaces), passed using the 
 -t flag. The program then converts the PHYLIP alignments into 'complete' alignments, each 
 containing the full number of tip taxa, by filling in missing taxa with dummy sequences 
 comprised entirely of missing data, coded as strings of <missingCharacter>. By default, 
 sequences for missing taxa will be filled in with strings like 'NNN..N'; however, using the
 options '-c n' or '-c ?' will cause the program to fill in dummy sequences with lowercase 
 n's or question marks, respectively.
	When calling the program, <taxonNamesSpaces> is a mandatory option, PHYLIP alignment 
 files in working dir are overwritten with 'complete' alignments, and by default all script 
 output is written to a file named 'completeSeqs_output.txt'. The user may optionally specify
 verbose output (-v 1) or an output file name (-o flag). Taxon names in the PHYLIP files 
 should contain only alphanumeric characters and no spaces, or else there could be issues. 
 Also, PHYLIP alignment files must have the extension '.phy'.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave, and CentOS 5/6/7 Linux, but should work on many
 other versions. Besides standard UNIX/Linux command line tools, the only other dependency 
 is Perl (v5+), which is usually already installed on mac and Linux distributions.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f completeSeqs -t <taxonNamesSpaces>

	Suggested usage, starting from scratch:
	
		Create <taxonNamesSpaces> file with getTaxonNames function:
		piranha -f getTaxonNames -n <numTips>	# Creates file: '<numTips>_taxon_names_spaces.txt'

		Complete PHYLIP alignments in working dir:
		piranha -f completeSeqs -t <numTips>_taxon_names_spaces.txt

	Suggested usage, starting from existing <taxonNamesSpaces> file, 'taxon_name_spaces12.txt':
   
		piranha -f completeSeqs -t taxon_name_spaces12.txt -v 1

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Sun, February 24, 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit ;
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION"
	exit ;
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	perl -p -i -e $'s/\-taxa/\-\-taxa/g' ./args.txt
	perl -p -i -e $'s/\-char/\-\-char/g' ./args.txt
	perl -p -i -e $'s/\-output/\-\-output/g' ./args.txt
	perl -p -i -e $'s/\-verbose/\-\-verbose/g' ./args.txt
	perl -p -i -e $'s/\-debug/\-\-debug/g' ./args.txt


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-t' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-taxa' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		USER_SPEC_NAMSPACES_FILE=NULL ;
	elif [[  "$(grep -h '\-t' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-taxa' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-t' ./args.txt | perl -pe 's/\-t//g' | perl -pe 's/\ //g')";
		USER_SPEC_NAMSPACES_FILE="$MY_ARG" ;
	elif [[  "$(grep -h '\-t' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-taxa' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-taxa' ./args.txt | perl -pe 's/\-\-taxa//g' | perl -pe 's/\ //g')";
		USER_SPEC_NAMSPACES_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-c' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-char' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_MISSING_CHAR=N ;
	elif [[  "$(grep -h '\-c' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-char' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-c' ./args.txt | perl -pe 's/\-c//g' | perl -pe 's/\ //g')";
		MY_MISSING_CHAR="$MY_ARG" ;
	elif [[  "$(grep -h '\-c' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-char' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-char' ./args.txt | perl -pe 's/\-\-char//g' | perl -pe 's/\ //g')";
		MY_MISSING_CHAR="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-output' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_OUTPUT_FILE_SWITCH=NULL ;
	elif [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-output' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-o' ./args.txt | perl -pe 's/\-o//g' | perl -pe 's/\ //g')";
		MY_OUTPUT_FILE_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-output' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-output' ./args.txt | perl -pe 's/\-\-output//g' | perl -pe 's/\ //g')";
		MY_OUTPUT_FILE_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	elif [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-verbose' ./args.txt | perl -pe 's/\-\-verbose//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
		if [[ -z "$MY_VERBOSE_OUT_SWITCH" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" != "1" ]]; then MY_VERBOSE_OUT_SWITCH=1 ; fi
	fi
#
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	elif [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-debug' ./args.txt | perl -pe 's/\-\-debug//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
		if [[ -z "$MY_DEBUG_MODE_SWITCH" ]] && [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]] && [[ "$MY_DEBUG_MODE_SWITCH" != "1" ]]; then MY_DEBUG_MODE_SWITCH=1 ; fi
	fi
#


# ############ PARSE THE OPTIONS
# while getopts 't:c:o:v:' opt ; do
#   case $opt in
# ## completeSeqs options:
#     t) USER_SPEC_NAMSPACES_FILE=$OPTARG ;;
#     c) MY_MISSING_CHAR=$OPTARG ;;
#     o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
#     v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
completeSeqs

# Exit cleanly
safeExit
