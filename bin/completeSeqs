#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: completeSeqs.sh                                                                  #
  VERSION="v1.0.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Sun, February 24, 2019.                              #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2019 Justin C. Bagley. All rights reserved.                              #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT CONVERTS SERIES OF PHYLIP DNA SEQUENCE ALIGNMENTS WITH VARYING       #
# NUMBERS OF TAXA INTO COMPLETE PHYLIP ALIGNMENTS (WITH COMPLETE TAXON SAMPLING),        #
# STARTING FROM A TAXON NAMES AND SPACES FILE                                            #
#                                                                                        #
##########################################################################################

## TODO: Change need for taxon names and spaces file to only a need for a taxon names file.
## You should be able to write code to convert an input taxon names file to an appropriately
## formatted taxon names and spaces file during the course of this script/function.

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




completeSeqs () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | completeSeqs, v1.0.0 March 2019  (in PIrANHA v0.2-alpha.1c)    "
echo "INFO      | $(date) | Copyright (c) 2019 Justin C. Bagley. All rights reserved.      "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Starting completeSeqs analysis... "
	echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and determine output file settings. "
fi
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Set output file. "
fi
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH" ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) |          Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
	fi
elif [[ "$MY_OUTPUT_FILE_SWITCH" = "NULL" ]]; then
	exec >> ./completeSeqs_output.txt ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) |          Default output file settings. Logging output to file at ./completeSeqs_output.txt ... "
	fi
fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Run main completeSeqs analysis. "
fi

count=1
(
	for i in ./*.phy; do
		cp "$USER_SPEC_NAMSPACES_FILE" "$i".tmp ;
		j="$i".tmp ;
		MY_PHYLIP_NCHAR="$(head -n1 $i | perl -pe 's/^[0-9]*\ +//g; s/\ //g')" ;
		echo "###----------   $i,  $MY_PHYLIP_NCHAR bp   ----------###" ;

			while read k; do
				MY_TAXON_NAME="$(echo $k | sed 's/\ //g')" ;
				MY_N_IND_INSTS="$(grep -n "$MY_TAXON_NAME" "$i" | wc -l | perl -pe 's/\t//g; s/\ //g')" ;
				MY_1ST_INST_LINE="$(grep -n "$MY_TAXON_NAME" "$i" | head -n1 | sed 's/\:.*//g; s/\ //g' | perl -pe 's/\t//g')" ;
				#echo "line: $MY_1ST_INST_LINE"

				# $i is expendable & editable (with no mistakes), $j is the key--where the
				# sequences will simply be added to ends of lines with matching taxon 
				# name labels. So, first take the name and check whether it exists in the
				# orig phy file $i. If name exists, copy the sequence and paste it to the end
				# of the line with the same name in the tmp file $j. If it doesn't exist,
				# then only add correct # N's (dummy sequence) to end of line with same
				# name in tmp file $j. When this process is done, $j will be a correct,
				# complete matrix that only needs a PHYLIP header to be added at 1st line
				# in order to create a new complete PHYLIP alignment for locus $i.
				
				if [[ "$MY_N_IND_INSTS" = "1" ]]; then
					# Extract/copy corresponding sequence from $i and paste it to end of
					# line with same name ($MY_TAXON_NAME) in tmp file $j:
					MY_SEQUENCE="$(grep -h "$MY_TAXON_NAME" $i | perl -pe 's/^[A-Za-z0-9\-\_\ ]*\ //g' | sed 's/\ //g')" ;
					if [[ "${machine}" = "Mac" ]]; then
						sed -i '' 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
					fi

					if [[ "${machine}" = "Linux" ]]; then
						sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$MY_SEQUENCE"'/g' "$j" ;
					fi

					
				elif [[ "$MY_N_IND_INSTS" = "0" ]]; then
					# Only add correct # N's (dummy sequence) to end of line with same
					# name in tmp file $j:
					if [[ "${machine}" = "Mac" ]]; then
						sed -i '' 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$(printf 'N%.0s' {$(seq 1 $MY_PHYLIP_NCHAR)})"'/g' "$j" ;
					fi

					if [[ "${machine}" = "Linux" ]]; then
						sed -i 's/\(^'"$MY_TAXON_NAME"'[\ ]*\)/\1'"$(printf 'N%.0s' {$(seq 1 $MY_PHYLIP_NCHAR)})"'/g' "$j" ;
					fi

				fi				
				
			done < "$USER_SPEC_NAMSPACES_FILE"

	echo "$((count++))" > count.tmp ;
	
	# Overwrite original phy file $i with new edited tmp file $j
	# cp -f "$j" "$i" ;
	# SKIP THIS FOR NOW! Just use $j during cat below...
	
	# Add header with corrected ntax and nchar information:
	MY_PHY_NTAX="$(awk 'END {print NR,"lines"}' $j | sed 's/\ .*//g')" ;

	echo "$MY_PHY_NTAX  $MY_PHYLIP_NCHAR" > ./header.tmp ;

	# Overwrite original phy file with new phy file:
	cat ./header.tmp "$j" > "$i" ;
		
	done
)


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #3: Clean up workspace by removing temporary files generated during run. "
	echo "INFO      | $(date) |          Deleting temporary files... "
fi
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	rm ./*.tmp ;

echo "----------------------------------------------------------------------------------------------------------"

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$count" = "1" ]] || [[ "$count" = "2" ]]; then
	echo "output file(s): Constructed one complete PHYLIP file in current directory "
fi
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$count" -gt "2" ]]; then
	echo "output file(s): Multiple complete PHYLIP files in current directory "
fi
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
USER_SPEC_NAMSPACES_FILE=NULL
MY_OUTPUT_FILE_SWITCH=NULL
MY_VERBOSE_OUT_SWITCH=0

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -t   taxonNamesSpaces (def: NULL) mandatory name of taxon 'names and spaces' file
  -o   outputFile (def: NULL) send screen output to file in working dir with user-specified 
       name, for example 'output.txt'
  -v   verbose (def: 0, off; 1, on) specify verbose filename conversion and step output to
       screen (stdout)
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT runs in a working directory containing a series of PHYLIP (Felsenstein 2002)
 DNA sequence alignments for different genes (e.g. 100s or 1000s of RAD or UCE loci) with 
 varying levels of taxon sampling (completeness), such that out of the total number of tip 
 taxa, some were sequenced for gene A, and possibly the same or a varying number of tip 
 taxa were sequenced for gene B, and so on. Given such a workspace, this script takes as 
 input a 'names and spaces file', <taxonNamesSpaces>, containing only the names of 
 tip taxa, one per line, as well as spaces extending the total number of characters to 
 be the same on each line (e.g. 10 or 12 characters including spaces), passed using the 
 -t flag. The script then converts the PHYLIP alignments into 'complete' alignments, each 
 containing the full number of tip taxa, by filling in missing taxa with dummy sequences 
 comprised entirely of missing data (coded as NNNs).
	When calling the program, <taxonNamesSpaces> is a mandatory option, PHYLIP alignment 
 files in working dir are overwritten with 'complete' alignments, and by default all script 
 output is written to a file named 'completeSeqs_output.txt'. The user may optionally specify
 verbose output (-v 1) or an output file name (-o flag). Taxon names in the PHYLIP files 
 should contain only alphanumeric characters and no spaces, or else there could be issues. 
 Also, PHYLIP alignment files must have the extension '.phy'.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or
 Linux (tested on CentOS 6/7). Besides standard UNIX/Linux command line tools, the only other 
 dependency is Perl (v5+), which is usually already installed on mac and Linux distributions.

 ${bold}Usage examples:${reset}
 To run in current directory with a names and spaces file named 'taxon_name_spaces12.txt' 
 containing each tip taxon name followed by x spaces taking the total character count per 
 line out to 12 characters, you would call the program using PIrANHA, as follows:

    piranha -f completeSeqs --args='-t taxon_name_spaces12.txt'

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Sun, February 24, 2019.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit ;
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION"
	exit ;
fi

############ PARSE THE OPTIONS
while getopts 't:o:v:' opt ; do
  case $opt in
## completeSeqs options:
    t) USER_SPEC_NAMSPACES_FILE=$OPTARG ;;
    o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
    v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
completeSeqs

# Exit cleanly
safeExit
