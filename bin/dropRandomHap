#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: dropRandomHap.sh                                                                 #
  VERSION="v1.5.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Sun, February 24, 2019.                              #
# Last update: April 13, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT TO RANDOMLY DROP ONE PHASED HAPLOTYPE (ALLELE) PER PHASED INDIVIDUAL IN   #
# EACH OF N PHYLIP GENE ALIGNMENTS IN CURRENT WORKING DIRECTORY, STARTING FROM A TAXON   #
# NAMES FILE                                                                             #
#                                                                                        #
##########################################################################################

## TODO: Compare with PHYLIPsubsampler script; if highly overlapping and non-complementary, 
## then decide on one and keep it, remove the other, and develop the one you kept further.
## Another idea is to check and see if parts of these scripts could be combined or taken
## to improve the final, single script/function that you keep between the two.

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




dropRandomHap () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | dropRandomHap, v1.5.1 April 2020                               "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting dropRandomHap analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


echo "INFO      | $(date) | Step #2: Set output file. "
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH" ;
	exec 2>&1 ;
	echo "INFO      | $(date) |          Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
elif [[ "$MY_OUTPUT_FILE_SWITCH" = "NULL" ]]; then
	exec >> ./dropRandomHap_output.txt ;
	exec 2>&1 ;
	echo "INFO      | $(date) |          Default output file settings. Logging output to file at ./dropRandomHap_output.txt ... "
fi


echo "INFO      | $(date) | Step #3: Prep taxon names file to contain only basenames that are randomized in order. "
###### PREP TAXON NAMES FILE SO THAT IT CONTAINS ONLY BASENAMES, AND THE BASENAMES ARE 
###### COMPLETELY RANDOMIZED.
## Check and if necessary reduce taxon names file to only unique basenames using in-place 
## search and replacement while accounting for machine type (either macOS or Linux), followed 
## by a unique sort command and file replacement:

	## Taxon names check/fix:
	MY_TAXNAMES_EXT_CHECK="$(grep -h '\_0$\|\_1$' $USER_SPEC_TAXNAMES_FILE | wc -l | perl -pe 's/\t//g; s/\ //g')";
	if [[ "$MY_TAXNAMES_EXT_CHECK" -gt "0" ]]; then

		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak 's/\_0$//g; s/\_1$//g' "$USER_SPEC_TAXNAMES_FILE" ;
			rm ./*.bak;
		fi

		if [[ "${machine}" = "Linux" ]]; then
			sed -i 's/\_0$//g; s/\_1$//g' "$USER_SPEC_TAXNAMES_FILE" ;
		fi
	fi

	# Get unique basenames only and replace file:
	sort -u "$USER_SPEC_TAXNAMES_FILE" > "$USER_SPEC_TAXNAMES_FILE".tmp ;
	mv "$USER_SPEC_TAXNAMES_FILE".tmp "$USER_SPEC_TAXNAMES_FILE" ;
	if [[ ! -z ./*.tmp ]]; then rm ./*.tmp ; fi

	
## Now that you have only unique tip taxon basenames, randomize them by making a shuffle 
## perl function that shuffles order in a completely random way (idea from URL: 
## https://stackoverflow.com/questions/2153882/how-can-i-shuffle-the-lines-of-a-text-file-on-the-unix-command-line-or-in-a-shel/2153897)
## and then using that function to randomize the <taxonNamesFile> lines, as follows:
#	shuffle () {
#		perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' < "$1"
#}
#
#	MY_TAXNAMES_FILE_BASENAME="$(echo $USER_SPEC_TAXNAMES_FILE | sed 's/\.\///g; s/\.[A-Za-z]\{3,\}$//g')"
#
#	shuffle "$USER_SPEC_TAXNAMES_FILE" > ./"$MY_TAXNAMES_FILE_BASENAME"_random.txt

## Below is a new function for shuffling taxon names file, assuming it is a text file with 
## extension '.txt'. During some tests, the previous Perl-based shuffle code performed well
## with numeric taxon names but did not function properly with alphanumeric taxon names,
## which are common in phylogenomics. The function, text_shuffle, is as follows:

text_shuffle () {
	MY_TAXNAMES_FILE_BASENAME="$(basename $1 .txt)"
	MY_NUM_LINES="$( wc -l $1 | perl -pe $'s/\t//g; s/\ //g' | sed 's/\(^[0-9]*\).*/\1/g' )"
(	for i in $(seq 1 "$MY_NUM_LINES"); do echo "$i" >> seq.tmp; done  )
	perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' < seq.tmp > seq.rand.tmp
	if [[ -s ./seq.tmp ]]; then rm ./seq.tmp ; fi
(	
	while read line; do
		sed -n ''"$line"'p' "$1" >> ./"$MY_TAXNAMES_FILE_BASENAME"_shuffle.txt ;
	done < seq.rand.tmp
)
	if [[ -s ./seq.rand.tmp ]]; then rm ./seq.rand.tmp ; fi
	#rm "$1"
}

## DON'T FORGET TO RUN THE FUNCTION!!!
text_shuffle "$USER_SPEC_TAXNAMES_FILE"


echo "INFO      | $(date) | Step #4: Run main dropRandomHap function to randomly drop one phased haplotype (allele) per individual, per gene. "
###### RANDOMLY DROP ONE PHASED HAPLOTYPE (ALLELE) PER INDIVIDUAL, PER GENE.
## Now that taxon labels are randomized basenames (minus the _0 and _1 phased haplotype
## designations) in a list file, we can use a while loop to go through this list, extract each 
## individual basename, & count the number of instances of that basename in a the PHYLIP file
## for a given gene at that point of the loop. Then, if the number of instances is one we
## simply delete the phase designation (_0, or could be _0 or _1??) and keep that individual, 
## but if the number of instances is 2 (which should be much more common) then we use a sed 
## command to remove the first instance of the individual which will be randomly 0 or 1 
## (haplotype 0 or 1) because the <taxonNamesFile> name order is now completely random due 
## to our shuffle step above! Last, just find the second instance of the current basename (at 
## a given point in while loop) and remove the phased haplotype designation, which could be 
## randomly _0 or _1). We do this by creating and executing the dropRandomHap function, as 
## follows:

(
	for i in ./*.phy; do
		echo "###--------------   $i   --------------###"
		while read j; do
			MY_TAXON_BASENAME="$(echo $j | sed 's/\_[01]\{1\}$//' | sed 's/\ //g')";
			MY_N_IND_INSTS="$(grep -n "$MY_TAXON_BASENAME" "$i" | wc -l | perl -pe 's/\t//g; s/\ //g')";
			echo "$MY_TAXON_BASENAME  $MY_N_IND_INSTS"

			if [[ "$MY_N_IND_INSTS" = "0" ]]; then
				## If 0 instances, do nothing:
				echo "."

			elif [[ "$MY_N_IND_INSTS" = "1" ]]; then
				## If 1 instance of an individual, then it is not phased, so we keep the 
				## individual (whole line) in $i, but make sure to replace phased hapoltype 
				## designation (could be _0 or _1??) with spaces:
#				perl -pi -e 's/$MY_TAXON_BASENAME\_[01]{1}/$MY_TAXON_BASENAME\ \ /' "$i" ;
				perl -pi -e 's/$MY_TAXON_BASENAME\_[01]{1}\ /$MY_TAXON_BASENAME\ \ \ /' "$i" ;

			elif [[ "$MY_N_IND_INSTS" = "2" ]]; then
				## Remove first instance of phased individual basename by removing complete
				## line from $i using sed d, and then replace phased haplotype designation 
				## (_0 or _1) with spaces. 
				MY_1ST_INST_LINE="$(grep -n "$MY_TAXON_BASENAME" "$i" | head -n1 | sed 's/\:.*//g; s/\ //g' | perl -pe 's/\t//g')";
				echo "$MY_1ST_INST_LINE"

				if [[ "${machine}" = "Mac" ]]; then
					# Delete nth = $MY_1ST_INST_LINE line of file with sed (=easy!):
					sed -i.bak ''"$MY_1ST_INST_LINE"'d' "$i" ;

					sed -i.bak 's/'"$MY_TAXON_BASENAME"'\_0\ /'"$MY_TAXON_BASENAME"'\ \ \ /g' "$i" ;
					sed -i.bak 's/'"$MY_TAXON_BASENAME"'\_1\ /'"$MY_TAXON_BASENAME"'\ \ \ /g' "$i" ;
					rm ./*.bak;
				fi

				if [[ "${machine}" = "Linux" ]]; then
					# Delete nth = $MY_1ST_INST_LINE line of file with sed (=easy!):
					sed -i ''"$MY_1ST_INST_LINE"'d' "$i" ;

					sed -i 's/'"$MY_TAXON_BASENAME"'\_0\ /'"$MY_TAXON_BASENAME"'\ \ \ /g' "$i" ;
					sed -i 's/'"$MY_TAXON_BASENAME"'\_1\ /'"$MY_TAXON_BASENAME"'\ \ \ /g' "$i" ;
				fi
			fi
		done < ./"$MY_TAXNAMES_FILE_BASENAME"_shuffle.txt ;

		## Since we've deleted indiv's, we now have a different number of lines in the file, so 
		## we can borrow from my existing code above to count lines and fix first entry in PHYLIP 
		## header to reflect correct number of lines:
		MY_PHY_NLINES="$(awk 'END {print NR,"lines"}' $i | sed 's/\ .*//g')"; 
		MY_CORR_PHY_NLINES="$(calc $MY_PHY_NLINES - 1)";

		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak '1s/^\([0-9]*\)/'"$MY_CORR_PHY_NLINES"'/g' "$i" ;
			rm ./*.bak;
		fi

		if [[ "${machine}" = "Linux" ]]; then
			sed -i '1s/^\([0-9]*\)/'"$MY_CORR_PHY_NLINES"'/g' "$i" ;
		fi

	done
)

echo "----------------------------------------------------------------------------------------------------------"
echo ""


## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
USER_SPEC_TAXNAMES_FILE=NULL
MY_OUTPUT_FILE_SWITCH=NULL
MY_DEBUG_MODE_SWITCH=0

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -t   taxonNamesFile (def: NULL) mandatory taxon names file
  -o   outputFile (def: NULL) send all output (stdout and stderr) to file in workingDir with 
       this name, for example 'output.txt'.
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit
  -d   debug (def: 0, off; 1, on also: --debug) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT takes as input the name of a <taxonNamesFile> with one tip taxon name per 
 line, with or without phased haplotype designations of '_0' for first phased haplotype and 
 '_1' for second phased haplotype (with maximum of two phased haplotypes), and subsequently
 runs in the current working directory. The _0 and _1 phased designations are common to 
 software and pipelines that yield phased multiple sequence alignments. However, this script 
 was created with pipelines for processing genome-scale target enrichment (e.g. ultraconserved 
 elements; UCE) or hybrid enrichment data in mind, and has been specifically written and 
 tested to handle phased output from PHYLUCE (Faircloth 2015) and SECAPR (Andermann et al. 
 2018). Phased PHYLIP alignments from other UCE or NGS pipelines may work if they are made to 
 conform to the expected taxon names format described above. PHYLIP filenames and taxon names 
 should not include spaces, or else there could be issues. Also, PHYLIP alignment files must 
 have the extension '.phy'.
	The <taxonNamesFile> must be a text file ('.txt' extension) with tip name labels for 
 all taxa present in PHYLIP alignments (e.g. one per gene/locus) in current <workingDir>. 
 Taxon names also must not have terminated in _0 or _1 prior to phasing (e.g. yielding phased 
 taxon names ending in '_0_0' or '_0_1' in the alignments). Using the <taxonNamesFile> 
 supplied to the program as mandatory input, the script will (1) check, modify, and randomize 
 the tip taxon names and (2) randomly drop one phased haplotype (allele) per individual, 
 per gene (i.e. from each PHYLIP alignment), while making sure to readjust the taxon number 
 entries in the PHYLIP file headers (first entries). By default, all script output (stdout
 and stderr) is written to a file named 'dropRandomHap_output.txt'. The -o flag allows the 
 user to optionally specify their own output file name.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage as obtained by running the script with the -h flag, and has been 
 tested on macOS High Sierra (v10.13+) but should work on many other versions of macOS 
 and Linux platforms. 

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f dropRandomHap -h
    piranha -f dropRandomHap -t <taxonNamesFile>
    piranha -f dropRandomHap -t <taxonNamesFile> -o output.txt

	Suggested usage, starting from scratch:
	
		Create <taxonNamesFile> with getTaxonNames function:
		piranha -f getTaxonNames -n <numTips>	# Creates file: '<numTips>_taxon_names.txt'

		Run the program in working dir:
		piranha -f dropRandomHap -t <numTips>_taxon_names.txt

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Andermann, T., Cano, Á., Zizka, A., Bacon, C., & Antonelli, A. 2018. SECAPR—a bioinformatics 
	pipeline for the rapid and user-friendly processing of targeted enriched Illumina sequences, 
	from raw reads to alignments. PeerJ, 6, e5175.
 Faircloth, B.C. 2015. PHYLUCE is a software package for the analysis of conserved genomic 
	loci. Bioinformatics, 32(5), 786-788.

 Created by Justin Bagley on Sun, February 24, 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 't:o:d:' opt ; do
  case $opt in
## dropRandomHap options:
    t) USER_SPEC_TAXNAMES_FILE=$OPTARG ;;
    o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
    d) MY_DEBUG_MODE_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
dropRandomHap

# Exit cleanly
safeExit
