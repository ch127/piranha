#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: dropRandomHap.sh                                                                 #
  VERSION="v1.6.3"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Sun, February 24, 2019.                              #
# Last update: December 16, 2020                                                         #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT TO RANDOMLY DROP ONE PHASED HAPLOTYPE (ALLELE) PER INDIVIDUAL IN ONE OR   #
# MULTIPLE PHYLIP DNA SEQUENCE ALIGNMENTS IN CURRENT WORKING DIRECTORY                   #
#                                                                                        #
##########################################################################################

## TODO: Compare with PHYLIPsubsampler script; if highly overlapping and non-complementary, 
## then decide on one and keep it, remove the other, and develop the one you kept further.
## Another idea is to check and see if parts of these scripts could be combined or taken
## to improve the final, single script/function that you keep between the two.

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  if [[ -s ./args.txt ]]; then rm ./args.txt ; fi
#  if [[ -s ./dropRandomHap_output.txt ]]; then rm ./dropRandomHap_output.txt ; fi 
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()




dropRandomHap () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | dropRandomHap, v1.6.3 December 2020                            "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting dropRandomHap analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "

################################# 1. SETUP

#### SET WORKING DIRECTORY AND CHECK MACHINE TYPE
#USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
checkMachineType

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


################################# 2. LOG FILE

echo "INFO      | $(date) | Step #2: Set log file. "
if [[ "$MY_LOGFILE_SWITCH" != "NULL" ]]; then
	MY_LOGFILE_SWITCH="$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) |----------------------------------------------------------------" >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | dropRandomHap, v1.6.1 April 2020                               " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) |----------------------------------------------------------------" >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Starting dropRandomHap analysis... " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Step #2: Set output file. " >> "$MY_LOGFILE_SWITCH"
else
	MY_LOGFILE_SWITCH=./dropRandomHap_output.txt
	echo "INFO      | $(date) |----------------------------------------------------------------" >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | dropRandomHap, v1.6.1 April 2020                               " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) |----------------------------------------------------------------" >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Starting dropRandomHap analysis... " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. " >> "$MY_LOGFILE_SWITCH"
	echo "INFO      | $(date) | Step #2: Set output file. " >> "$MY_LOGFILE_SWITCH"
fi


################################# 3. MAIN dropRandomHap FUNCTION

echo "INFO      | $(date) | Step #3: Run main dropRandomHap function to randomly drop one phased haplotype (allele) per individual, per gene. " | tee -a "$MY_LOGFILE_SWITCH"

if [[ "$MY_KEEP_PHYLIP_SWITCH" = "1" ]] || [[ "$MY_KEEP_PHYLIP_SWITCH" != "0" ]]; then 
	if [[ -s ./orig_phylip/ ]]; then mv orig_phylip/ orig_phylip-1/ ; mkdir orig_phylip/ ; fi
	if [[ ! -s ./orig_phylip/ ]]; then mkdir orig_phylip/ ; fi
fi

############################### IF -i: SINGLE PHYLIP RUN #################################
##########################################################################################

if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "0" ]]; then
	echo "INFO      | $(date) | Running on single input file: ${INPUT_PHYLIP_FILE} " | tee -a "$MY_LOGFILE_SWITCH"
	(
		for i in "$INPUT_PHYLIP_FILE"; do

			echo "INFO      | $(date) | ----------------- Processing $i " | tee -a "$MY_LOGFILE_SWITCH"

			MY_PHYLIP_BASENAME="$(basename "$i" '.phy')";
			MY_NTAX="$(head -n1 "$i" | perl -pe  's/\ +.*//g')";
			MY_NCHAR="$(head -n1 "$i" | sed 's/^[0-9]*\ //g')";
			echo "INFO      | $(date) | Basename: ${MY_PHYLIP_BASENAME} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | No. taxa: ${MY_NTAX} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | No. char: ${MY_NCHAR} " | tee -a "$MY_LOGFILE_SWITCH"
			
			###### GOALS: FOR EACH PHYLIP FILE...
			## Get taxon names, making sure that list contains only basenames by using in-place search
			## and replace followed by a unique sort command. Goal is 1) to obtain taxon names file with
			## basenames by removing allele designations, if present. Then will 2) randomize PHYLIP file
			## "$i" and save file with randomized sequence (row) order to tmp file, and finish by 3) looping
			## through taxon names in file from #1 and grepping out first matching sequence/line in randomized
			## PHY tmp file from #2. Appending redirects in #3 will create final file of one random allele 
			## (haplotype) per taxon/species (basename). After making new reduced PHYLIP file, next 4) update
			## the PHYLIP header to reflect new number of taxa in the file.
			
			if [[ ! -s "$MY_PHYLIP_BASENAME"_taxon_names.tmp ]] && [[ ! -s "$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ]]; then
				## 1. Taxon names. - Make taxon names file of unique basenames with allele designations removed (if present):
				echo "INFO      | $(date) | Making taxon names file ... " | tee -a "$MY_LOGFILE_SWITCH"
				cp "$i" "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
				perl -p -i -e 's/\ +.*//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Isolate taxon names
		
				if [[ "${machine}" = "Mac" ]]; then
					sed -i.bak '1d' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Remove PHYLIP header on Mac
					rm ./*.bak;
				fi
				if [[ "${machine}" = "Linux" ]]; then
					sed -i '1d' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Remove PHYLIP header on Linux
				fi
		
				## Taxon names check for allele designations:
				MY_TAXNAMES_EXT_CHECK="$(grep -h '\_0$\|\_1$' "$MY_PHYLIP_BASENAME"_taxon_names.tmp | wc -l | perl -pe 's/\t//g; s/\ //g')";
		
				## Conditionally remove allele designations:
				echo "INFO      | $(date) | Checking for allele designations (_0 and _1) in taxon names file... " | tee -a "$MY_LOGFILE_SWITCH"
				if [[ "$MY_TAXNAMES_EXT_CHECK" -gt "0" ]]; then
					echo "INFO      | $(date) | Removing allele designations from taxon names file... " | tee -a "$MY_LOGFILE_SWITCH"
					if [[ "${machine}" = "Mac" ]]; then
						sed -i.bak 's/\_0$//g; s/\_1$//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
						rm ./*.bak ;
					fi
					if [[ "${machine}" = "Linux" ]]; then
						sed -i 's/\_0$//g; s/\_1$//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
					fi
				fi
				
				# Get unique basenames only make final alt file:
				sort -u "$MY_PHYLIP_BASENAME"_taxon_names.tmp > "$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
				rm "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
			fi	
	

			if [[ ! -s "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp ]]; then
				## 2. Shuffle PHYLIP - Shuffle PHYLIP file to have random sequence order (randomize row order) 
				## using Perl (idea from URL: https://stackoverflow.com/questions/2153882/how-can-i-shuffle-the-lines-of-a-text-file-on-the-unix-command-line-or-in-a-shel)
				## ...and conditionally save shuffled PHYLIP in separate temporary file, leaving original untouched, 
				## when user invokes -k 1 option.
				echo "INFO      | $(date) | Shuffling PHYLIP file, randomizing row order... " | tee -a "$MY_LOGFILE_SWITCH"

				perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' < "$i" > "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp  ;
			fi
			
			## 3. Loop through taxon names from #1, grep out 1st matches from #2, replacing original
			## file unless user calls -k 1 to keep originals:
			echo "INFO      | $(date) | Looping through taxon names... " | tee -a "$MY_LOGFILE_SWITCH"
			if [[ "$MY_KEEP_PHYLIP_SWITCH" = "0" ]]; then
				rm "$i" ;
				if [[ ! -s "$MY_PHYLIP_BASENAME".phy ]]; then
					(
						while read line; do
							MY_RAND_NO="$(echo $(($RANDOM%2+1)))";
							if [[ "$MY_RAND_NO" = "1" ]]; then
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | head -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							else
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | tail -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							fi
						done < ./"$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
					)
				fi
			elif [[ "$MY_KEEP_PHYLIP_SWITCH" = "1" ]] || [[ "$MY_KEEP_PHYLIP_SWITCH" != "0" ]]; then
				mv "$i" ./orig_phylip/ ;
				if [[ ! -s "$MY_PHYLIP_BASENAME".phy ]]; then
					(
						while read line; do
							MY_RAND_NO="$(echo $(($RANDOM%2+1)))";
							if [[ "$MY_RAND_NO" = "1" ]]; then
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | head -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							else
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | tail -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							fi
						done < ./"$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
					)
				fi
			fi
			
			## 4. PHYLIP header - Since we've deleted individuals, we now have a different number of 
			## lines in the file, so we need to add a new PHYLIP header updated to reflect correct
			## number of lines (and same/original number of characters):
			echo "INFO      | $(date) | Fixing reduced PHYLIP header... " | tee -a "$MY_LOGFILE_SWITCH"
			MY_CORR_NTAX="$(awk 'END {print NR,"lines"}' $i | sed 's/\ .*//g')"; 
			echo "$MY_CORR_NTAX  $MY_NCHAR" > header.tmp ;
			mv "$MY_PHYLIP_BASENAME".phy "$MY_PHYLIP_BASENAME".phy.tmp ; 

			echo "INFO      | $(date) | Making final reduced PHYLIP... " | tee -a "$MY_LOGFILE_SWITCH"
			cat header.tmp "$MY_PHYLIP_BASENAME".phy.tmp > "$MY_PHYLIP_BASENAME".phy ;
			rm header.tmp ;
			echo "INFO      | $(date) | Complete. " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | Reduced PHYLIP No. taxa: ${MY_CORR_NTAX} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | Reduced PHYLIP No. char: ${MY_NCHAR} " | tee -a "$MY_LOGFILE_SWITCH"

			## Remove allele designations from final PHYLIP files with search and replace:
			echo "INFO      | $(date) | Cleaning reduced PHYLIP taxon names by removing allele designations... " | tee -a "$MY_LOGFILE_SWITCH"
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak 's/\_0\ /\ \ \ /g; s/\_1\ /\ \ \ /g' "$MY_PHYLIP_BASENAME".phy ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/\_0\ /\ \ \ /g; s/\_1\ /\ \ \ /g' "$MY_PHYLIP_BASENAME".phy ;
			fi

		done
	)
fi
###
echo "INFO      | $(date) | Complete. " | tee -a "$MY_LOGFILE_SWITCH"


############################### IF -m 1: MULTI FASTA RUN #################################
##########################################################################################

###
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
	echo "INFO      | $(date) | Running on multiple PHYLIP files in current directory... " | tee -a "$MY_LOGFILE_SWITCH"
	MY_NUM_PHYLIP_FILES="$(ls ./*.phy | wc -l | sed 's/\ //g')";
	echo "INFO      | $(date) | No. PHYLIP files:         ${MY_NUM_PHYLIP_FILES}" | tee -a "$MY_LOGFILE_SWITCH"

	count=1
	(
		for i in ./*.phy; do

			echo "INFO      | $(date) | ----------------- Processing file ${count}. $i " | tee -a "$MY_LOGFILE_SWITCH"

			MY_PHYLIP_BASENAME="$(basename "$i" '.phy')";
			MY_NTAX="$(head -n1 "$i" | perl -pe  's/\ +.*//g')";
			MY_NCHAR="$(head -n1 "$i" | sed 's/^[0-9]*\ //g')";
			echo "INFO      | $(date) | Basename: ${MY_PHYLIP_BASENAME} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | No. taxa: ${MY_NTAX} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | No. char: ${MY_NCHAR} " | tee -a "$MY_LOGFILE_SWITCH"
			
			###### GOALS: FOR EACH PHYLIP FILE...
			## Get taxon names, making sure that list contains only basenames by using in-place search
			## and replace followed by a unique sort command. Goal is 1) to obtain taxon names file with
			## basenames by removing allele designations, if present. Then will 2) randomize PHYLIP file
			## "$i" and save file with randomized sequence (row) order to tmp file, and finish by 3) looping
			## through taxon names in file from #1 and grepping out first matching sequence/line in randomized
			## PHY tmp file from #2. Appending redirects in #3 will create final file of one random allele 
			## (haplotype) per taxon/species (basename). After making new reduced PHYLIP file, next 4) update
			## the PHYLIP header to reflect new number of taxa in the file.
			
			if [[ ! -s "$MY_PHYLIP_BASENAME"_taxon_names.tmp ]] && [[ ! -s "$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ]]; then
				## 1. Taxon names. - Make taxon names file of unique basenames with allele designations removed (if present):
				echo "INFO      | $(date) | Making taxon names file ... "
				cp "$i" "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
				perl -p -i -e 's/\ +.*//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Isolate taxon names
					
				if [[ "${machine}" = "Mac" ]]; then
					sed -i.bak '1d' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Remove PHYLIP header on Mac
					rm ./*.bak ;
				fi
				if [[ "${machine}" = "Linux" ]]; then
					sed -i '1d' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;	# Remove PHYLIP header on Linux
				fi
		
				## Taxon names check for allele designations:
				MY_TAXNAMES_EXT_CHECK="$(grep -h '\_0$\|\_1$' "$MY_PHYLIP_BASENAME"_taxon_names.tmp | wc -l | perl -pe 's/\t//g; s/\ //g')";
		
				## Conditionally remove allele designations:
				echo "INFO      | $(date) | Checking for allele designations (_0 and _1) in taxon names file... " | tee -a "$MY_LOGFILE_SWITCH"
				if [[ "$MY_TAXNAMES_EXT_CHECK" -gt "0" ]]; then
					echo "INFO      | $(date) | Removing allele designations from taxon names file... " | tee -a "$MY_LOGFILE_SWITCH"
					if [[ "${machine}" = "Mac" ]]; then
						sed -i.bak 's/\_0$//g; s/\_1$//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
						rm ./*.bak ;
					fi
					if [[ "${machine}" = "Linux" ]]; then
						sed -i 's/\_0$//g; s/\_1$//g' "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
					fi
				fi
				
				# Get unique basenames only make final alt file:
				sort -u "$MY_PHYLIP_BASENAME"_taxon_names.tmp > "$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
				rm "$MY_PHYLIP_BASENAME"_taxon_names.tmp ;
			fi
	
	
			if [[ ! -s "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp ]]; then
				## 2. Shuffle PHYLIP - Shuffle PHYLIP file to have random sequence order (randomize row order) 
				## using Perl (idea from URL: https://stackoverflow.com/questions/2153882/how-can-i-shuffle-the-lines-of-a-text-file-on-the-unix-command-line-or-in-a-shel)
				## ...and conditionally save shuffled PHYLIP in separate temporary file, leaving original untouched, 
				## when user invokes -k 1 option.
				echo "INFO      | $(date) | Shuffling PHYLIP file, randomizing row order... " | tee -a "$MY_LOGFILE_SWITCH"	

				perl -MList::Util=shuffle -e 'print shuffle(<STDIN>);' < "$i" > "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp  ;
			fi
				
			## 3. Loop through taxon names from #1, grep out 1st matches from #2, replacing original
			## file unless user calls -k 1 to keep originals:
			echo "INFO      | $(date) | Looping through taxon names... " | tee -a "$MY_LOGFILE_SWITCH"
			if [[ "$MY_KEEP_PHYLIP_SWITCH" = "0" ]]; then
				rm "$i" ;
				if [[ ! -s "$MY_PHYLIP_BASENAME".phy ]]; then
					(
						while read line; do
							MY_RAND_NO="$(echo $(($RANDOM%2+1)))";
							if [[ "$MY_RAND_NO" = "1" ]]; then
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | head -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							else
								grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | tail -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
							fi
						done < ./"$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
					)
				fi
			elif [[ "$MY_KEEP_PHYLIP_SWITCH" = "1" ]] || [[ "$MY_KEEP_PHYLIP_SWITCH" != "0" ]]; then
				mv "$i" ./orig_phylip/ ;
				if [[ ! -s "$MY_PHYLIP_BASENAME".phy ]]; then
						(
							while read line; do
								MY_RAND_NO="$(echo $(($RANDOM%2+1)))";
								if [[ "$MY_RAND_NO" = "1" ]]; then
									grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | head -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
								else
									grep -h "$line" "$MY_PHYLIP_BASENAME"_shuffle.phy.tmp | tail -n1 >> "$MY_PHYLIP_BASENAME".phy  ;
								fi
							done < ./"$MY_PHYLIP_BASENAME"_taxon_names_usort.tmp ;
						)
				fi
			fi

			## 4. PHYLIP header - Since we've deleted individuals, we now have a different number of 
			## lines in the file, so we need to add a new PHYLIP header updated to reflect correct
			## number of lines (and same/original number of characters):
			echo "INFO      | $(date) | Fixing reduced PHYLIP header... " | tee -a "$MY_LOGFILE_SWITCH"
			MY_CORR_NTAX="$(awk 'END {print NR,"lines"}' $i | sed 's/\ .*//g')"; 
			echo "$MY_CORR_NTAX  $MY_NCHAR" > header.tmp ;
			mv "$MY_PHYLIP_BASENAME".phy "$MY_PHYLIP_BASENAME".phy.tmp ; 

			echo "INFO      | $(date) | Making final reduced PHYLIP... " | tee -a "$MY_LOGFILE_SWITCH"
			cat header.tmp "$MY_PHYLIP_BASENAME".phy.tmp > "$MY_PHYLIP_BASENAME".phy ;
			rm header.tmp ;
			echo "INFO      | $(date) | Complete. " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | Reduced PHYLIP No. taxa: ${MY_CORR_NTAX} " | tee -a "$MY_LOGFILE_SWITCH"
			echo "INFO      | $(date) | Reduced PHYLIP No. char: ${MY_NCHAR} " | tee -a "$MY_LOGFILE_SWITCH"

			## Remove allele designations from final PHYLIP files with search and replace:
			echo "INFO      | $(date) | Cleaning reduced PHYLIP taxon names by removing allele designations... " | tee -a "$MY_LOGFILE_SWITCH"
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak 's/\_0\ /\ \ \ /g; s/\_1\ /\ \ \ /g' "$MY_PHYLIP_BASENAME".phy ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/\_0\ /\ \ \ /g; s/\_1\ /\ \ \ /g' "$MY_PHYLIP_BASENAME".phy ;
			fi

			echo "$((count++)) "  >/dev/null 2>&1 ;
		done
	)
fi
###
echo "INFO      | $(date) | Complete. " | tee -a "$MY_LOGFILE_SWITCH"


################################# 4. CLEAN UP WORKSPACE 

echo "INFO      | $(date) | # Step #4: Clean up workspace by removing temporary files generated during run. " | tee -a "$MY_LOGFILE_SWITCH"

	###### Remove temporary or unnecessary files created above:
	echo "INFO      | $(date) | Removing temporary files... " | tee -a "$MY_LOGFILE_SWITCH"
	
	if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
		rm ./*.tmp ; 
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	echo "INFO      | $(date) | Complete. " | tee -a "$MY_LOGFILE_SWITCH"


echo "INFO      | $(date) | Done."  | tee -a "$MY_LOGFILE_SWITCH"
echo "----------------------------------------------------------------------------------------------------------" | tee -a "$MY_LOGFILE_SWITCH"
echo "" | tee -a "$MY_LOGFILE_SWITCH"


## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
# INPUT_PHYLIP_FILE=NULL
# MULTIPLE_PHYLIP_SWITCH=0
# MY_KEEP_PHYLIP_SWITCH=0
# USER_SPEC_TAXNAMES_FILE=NULL
# MY_LOGFILE_SWITCH=NULL
# MY_DEBUG_MODE_SWITCH=0

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i, --input     inputPHYLIP (def: NULL) name of input PHYLIP DNA sequence alignment file
  -m, --multi     multiPHYLIP (def: 0, turned off; 1, on) whether or not to subsample multiple   
                  PHYLIP DNA sequence alignment files in current working directory
  -k, --keep      keepPHYLIP (def: 0, off; 1, on) whether or not to keep the original PHYLIP 
                  files; if invoked, originals are stored in orig_phylip/ subfolder
  -l, --logfile   logFile (def: dropRandomHap_output.txt) log screen output to file in working  
                  dir with user-specified name (default is on, so allows changing log file name)
  -h, --help      echo this help text and exit
  -V, --version   echo version and exit
  -d, --debug     debug (def: 0, off; 1, on) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT randomly drops one phased haplotype (allele) per individiual from each of a 
 series of PHYLIP alignments (i.e. by gene), while making sure to readjust the taxon number
 entries in the PHYLIP file headers (first entries). The script runs on one (-i flag) or 
 multiple (-m flag) PHYLIP DNA sequence alignment files ('.phy' extension; Felsenstein 2002) 
 in the current working directory by (1) obtaining and checking, modifying, and unique-sorting
 tip taxon names, (2) shuffling a copy of the alignment to randomize sequence (row) order,
 (3) looping through taxon names and extracting the first matching sequence for each name 
 while randomizing allele selection, and (4) creating the final reduced PHYLIP with updated 
 header.
	It is expected that the PHYLIP alignment files have the extension '.phy' and contain 
 phased sequence data, with a maximum of two phased haplotypes per individual, and that the 
 tip taxon names are appended with phased haplotype designations of '_0' for first phased 
 haplotype and '_1' for second phased haplotype. The _0 and _1 phase designations are common 
 to software and pipelines for phasing consensus sequence data (e.g. from HTS) including 
 PHYLUCE (Faircloth 2015) and SECAPR (Andermann et al. 2018). Phased PHYLIP alignments from 
 other UCE or NGS pipelines may work if they are made to conform to the expected taxon name 
 format described above. Tip taxon names (basenames) may include alphanumeric characters but 
 no spaces or pound signs (#), or else there could be issues (untested). 
	By default, the program runs quietly with limited output to screen, and stderr and stdout 
 are redirected to a log file in the current directory named 'dropRandomHap_log.txt'. Optionally, 
 the user may supply their own name for the log file (-l, --logfile flag). While the PHYLIP
 files are replaced by default, one option (-k 1, --keep 1) allows keeping the original PHYLIP 
 files (saved in 'orig_phylip/' subfolder). The user may also indicate whether or not to run 
 in debug mode (-d, --debug flag).
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage as obtained by running the script with the -h flag. It has been 
 tested with Perl v5.1+ on macOS High Sierra (v10.13+) and Centos 5/6/7 Linux, but should 
 work on many other versions of macOS or Linux. 

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f dropRandomHap -i <inputPHYLIP>        Drop haplotypes from a single input PHYLIP file
    piranha -f dropRandomHap -m 1 -k 1               Run on multiple PHYLIP files in current dir,
                                                     while keeping original files
    piranha -f dropRandomHap --multi 1 --keep 1      Same as above, but using long options
    piranha -f dropRandomHap -h                      Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a3. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Andermann, T., Cano, Á., Zizka, A., Bacon, C., & Antonelli, A. 2018. SECAPR—a bioinformatics 
	pipeline for the rapid and user-friendly processing of targeted enriched Illumina sequences, 
	from raw reads to alignments. PeerJ, 6, e5175.
 Faircloth, B.C. 2015. PHYLUCE is a software package for the analysis of conserved genomic 
	loci. Bioinformatics, 32(5), 786-788.

 Created by Justin Bagley on Sun, February 24, 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CLEAN WORKING DIR, CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;
	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	perl -p -i -e $'s/\-input/\-\-input/g' ./args.txt
	perl -p -i -e $'s/\-multi/\-\-multi/g' ./args.txt
	perl -p -i -e $'s/\-keep/\-\-keep/g' ./args.txt
	perl -p -i -e $'s/\-logfile/\-\-logfile/g' ./args.txt
	perl -p -i -e $'s/\-debug/\-\-debug/g' ./args.txt
	perl -p -i -e $'s/\-taxa/\-\-taxa/g' ./args.txt


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-input' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		INPUT_PHYLIP_FILE=NULL ;
	elif [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-input' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		INPUT_PHYLIP_FILE="$MY_ARG" ;
	elif [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-input' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-input' ./args.txt | perl -pe 's/\-\-input//g' | perl -pe 's/\ //g')";
		INPUT_PHYLIP_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-multi' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MULTIPLE_PHYLIP_SWITCH=0 ;
	elif [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-multi' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-m' ./args.txt | perl -pe 's/\-m//g' | perl -pe 's/\ //g')";
		MULTIPLE_PHYLIP_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-multi' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-multi' ./args.txt | perl -pe 's/\-\-multi//g' | perl -pe 's/\ //g')";
		MULTIPLE_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-keep' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_KEEP_PHYLIP_SWITCH=0 ;
	elif [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-keep' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-k' ./args.txt | perl -pe 's/\-k//g' | perl -pe 's/\ //g')";
		MY_KEEP_PHYLIP_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-keep' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-keep' ./args.txt | perl -pe 's/\-\-keep//g' | perl -pe 's/\ //g')";
		MY_KEEP_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-l' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-logfile' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_LOGFILE_SWITCH=dropRandomHap_output.txt  ;
	elif [[  "$(grep -h '\-l' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-logfile' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-l' ./args.txt | perl -pe 's/\-l//g' | perl -pe 's/\ //g')";
		MY_LOGFILE_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-l' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-logfile' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-logfile' ./args.txt | perl -pe 's/\-\-logfile//g' | perl -pe 's/\ //g')";
		MY_LOGFILE_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	elif [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-verbose' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-verbose' ./args.txt | perl -pe 's/\-\-verbose//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
		if [[ -z "$MY_VERBOSE_OUT_SWITCH" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" != "1" ]]; then MY_VERBOSE_OUT_SWITCH=1 ; fi
	fi
#
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	elif [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	elif [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]] && [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" != "0" ]]; then
		MY_ARG="$(grep -h '\-\-debug' ./args.txt | perl -pe 's/\-\-debug//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
		if [[ -z "$MY_DEBUG_MODE_SWITCH" ]] && [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]] && [[ "$MY_DEBUG_MODE_SWITCH" != "1" ]]; then MY_DEBUG_MODE_SWITCH=1 ; fi
	fi
#


# ############ PARSE THE OPTIONS
# while getopts 't:o:d:' opt ; do
#   case $opt in
# ## dropRandomHap options:
#     t) USER_SPEC_TAXNAMES_FILE=$OPTARG ;;
#     o) MY_LOGFILE_SWITCH=$OPTARG ;;
#     d) MY_DEBUG_MODE_SWITCH=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# # Store the remaining part as arguments.
# # args+=("$@")
 

# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
dropRandomHap

# Exit cleanly
safeExit
