#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: RAxMLRunner.sh                                                                   #
  VERSION="v1.5.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Fri, 19 Aug 2016 00:33:27 -0300.                     #
# Last update: April 13, 2020                                                            #
# Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR AUTOMATING MOVING AND RUNNING RAxML RUNS ON A REMOTE SUPERCOMPUTER    #
# (AND EXTRACTING THE RESULTS...coming soon)                                             #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

CONFIG_FILE_LOCATION="${SCRIPT_PATH}/../etc/raxml_runner.cfg" # Update this path to find the raxml_runner.cfg file.

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




RAxMLRunner () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | RAxMLRunner, v1.5.1 April 2020                                 "
echo "INFO      | $(date) | Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting RAxMLRunner pipeline... "
echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and examine directory contents. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


##### Setup and run check on the number of run folders in present working directory:
	MY_DIRCOUNT="$(find . -type d | wc -l)";
	MY_NUM_RUN_FOLDERS="$(calc $MY_DIRCOUNT - 1)";
	echo "INFO      | $(date) |          Found ${MY_NUM_RUN_FOLDERS} run folders present in the current working directory. "

echo "INFO      | $(date) |          Checking for 'raxml_runner.cfg' configuration file... "
if [[ -f ./raxml_runner.cfg ]]; then 
	echo "INFO      | $(date) |          Configuration file check passed. Moving forward with .cfg file in current directory... "
elif [[ ! -f ./raxml_runner.cfg ]]; then 
	echo "WARNING!  | $(date) |          Configuration file check FAILED. Copying default .cfg file into current directory... "
	cp "$CONFIG_FILE_LOCATION" . ;
	echo "INFO      | $(date) |          Please edit the default 'raxml_runner.cfg' configuration file just added so that \
it includes all pertinent information (first 3 variables) before rerunning RAxMLRunner in this directory. "
	echo "INFO      | $(date) |          Quitting... "
	safeExit ;
fi


echo "INFO      | $(date) | Step #2: Make batch submission file; move all run folders to supercomputer; and then check that \
batch submission file was created. "
##--This step assumes that you have set up passowordless access to your supercomputer
##--account (e.g. passwordless ssh access), by creating and organizing appropriate and
##--secure public and private ssh keys on your machine and the remote supercomputer (by 
##--secure, I mean you closed write privledges to authorized keys by typing "chmod u-w 
##--authorized keys" after setting things up using ssh-keygen). This is VERY IMPORTANT
##--as the following will not work without completing this process first. The following
##--links provide a list of useful tutorials/discussions related to doing this:
#	* https://www.msi.umn.edu/support/faq/how-do-i-setup-ssh-keys
#	* https://coolestguidesontheplanet.com/make-passwordless-ssh-connection-osx-10-9-mavericks-linux/ 
#	* https://www.tecmint.com/ssh-passwordless-login-using-ssh-keygen-in-5-easy-steps/

	MY_SC_DESTINATION="$(grep -n "destination_path" ./raxml_runner.cfg | \
	awk -F"=" '{print $NF}' | sed 's/\ //g')";				## This pulls out the correct destination path on the supercomputer from the "raxml_runner.cfg" configuration file in the working directory (generated/modified by user prior to running RAxMLRunner).

	MY_SSH_ACCOUNT="$(grep -n "ssh_account" ./raxml_runner.cfg | \
	awk -F"=" '{print $NF}' | sed 's/\ //g')";

	##--Start making batch queue submission file by making just the top with correct shebang:
echo "#!/bin/bash
" > sbatch_sub_top.txt

echo "INFO      | $(date) |          Starting copying run folders to supercomputer... note: this may display folder contents transferred rather than folder names. "
(
	for i in ./*/; do
		FOLDERNAME="$(echo $i | sed 's/\.\///g')";
		scp -r $i $MY_SSH_ACCOUNT:$MY_SC_DESTINATION ;			## Safe copy to remote machine.

echo "cd $MY_SC_DESTINATION$FOLDERNAME
sbatch RAxML_sbatch.sh
#" >> ./cd_and_sbatch_commands.txt

	done
)

##--Finish making batch queue submission file and name it "sbatch_sub.sh".
echo "
$MY_SC_PBS_WKDIR_CODE
exit 0
" > ./sbatch_sub_bottom.txt

cat ./sbatch_sub_top.txt ./cd_and_sbatch_commands.txt ./sbatch_sub_bottom.txt > ./raxmlrunner_sbatch_sub.sh

##--More flow control. Check to make sure sbatch_sub.sh file was successfully created.
if [ -f ./raxmlrunner_sbatch_sub.sh ]; then
    echo "INFO      | $(date) |          Batch queue submission file ('raxmlrunner_sbatch_sub.sh') successfully created. "
else
    echo "WARNING!  | $(date) |          Something went wrong. Batch queue submission file ('raxmlrunner_sbatch_sub.sh') not created. Exiting... "
    exit
fi

echo "INFO      | $(date) | Step #3: Move batch submission file to supercomputer. "
echo "INFO      | $(date) |          Moving batch file to supercomputer... "

##### Pull out the correct path to user's bin folder on the supercomputer from the "raxml_runner.cfg" configuration file.
	MY_SC_BIN="$(grep -n "bin_path" ./raxml_runner.cfg | \
	awk -F"=" '{print $NF}' | sed 's/\ //g')" ;

echo "INFO      | $(date) |          Also copying sbatch_sub_file to supercomputer..."
scp ./raxmlrunner_sbatch_sub.sh $MY_SSH_ACCOUNT:$MY_SC_DESTINATION


echo "INFO      | $(date) | Step #4: Submit all RAxML jobs to the queue. "
##--This is the key: using ssh to connect to supercomputer and execute the "raxmlrunner_sbatch_sub.sh"
##--submission file created and moved into sc destination folder above. The batch qsub file
##--loops through all run folders and submits all jobs/runs (sh scripts in each folder) to the 
##--job queue. We do this (pass the commands to the supercomputer) using bash here document syntax 
##--(as per examples on the following web page, URL: 
##--https://www.cyberciti.biz/faq/linux-unix-osx-bsd-ssh-run-command-on-remote-machine-server/).

ssh $MY_SSH_ACCOUNT << HERE
cd $MY_SC_DESTINATION
pwd
chmod u+x ./raxmlrunner_sbatch_sub.sh
./raxmlrunner_sbatch_sub.sh
#
exit
HERE


echo "INFO      | $(date) |          Finished copying run folders to supercomputer and submitting RAxML jobs to queue!!"

echo "INFO      | $(date) | Step #5: Clean up temporary files generated during run. "
echo "INFO      | $(date) |          Removing temporary files from local machine..."
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.

	if [[ -s ./sbatch_sub_top.txt ]; then rm ./sbatch_sub_top.txt ; fi
	if [[ -s ./sbatch_sub_bottom.txt ]]; then rm ./sbatch_sub_bottom.txt ; fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	#rm ./cd_and_sbatch_commands.txt

	##--Optional cleanup: remove batch submission script from bin folder on supercomputer account.
	##--ssh $MY_SSH_ACCOUNT 'rm ~/bin/raxmlrunner_sbatch_sub.sh;' NOTE: path/to/bin may be different
	##--on another user's account.

echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"
echo ""

## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
# None at this time.

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit
  -d   debug (def: 0, off; 1, on also: --debug) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT is designed to work in a current directory containing one or multiple RAxML
 v8+ (Stamatakis 2014) run folders, each containing RAxML input files and a submission script 
 named 'RAxML_sbatch.sh'. Given such a workspace, this function automates copying and running 
 (queueing) the RAxML runs on a remote high-performance supercomputing cluster that uses SLURM 
 resource management (in which scripts are submitted using 'sbatch'). 
	Like other functions of PIrANHA that are specifically aimed at automating running software 
 on external machines, RAxMLRunner extracts settings for secure copy and other supercomputer 
 interactions, including queuing jobs, from a configuration file named 'raxml_runner.cfg' 
 that must be present in the current directory. There are four entries that users can supply 
 in this file. However, two of these are essential for running RAxML using the RAxMLRunner 
 function, including: ssh user account info and the path to the parent directory for RAxML 
 runs on the supercomputer. 
	When RAxMLRunner is called using PIrANHA, the program first checks for an appropriate 
 .cfg file in the current dir, and if one is found then the program will run. If no .cfg file
 is found, then RAxMLRunner copies the default .cfg file into the current directory and the 
 user is prompted to fill out the information and save a new version of the .cfg file in 
 current directory. Under this scenario, the user next calls RAxMLRunner in PIrANHA a second 
 time and the program will encounter the .cfg file and run.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f RAxMLRunner         Run program with the defaults and parameters extracted 
                                   from the configuration file
    piranha -f RAxMLRunner -h      Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Stamatakis, A. 2014. RAxML version 8: a tool for phylogenetic analysis and post-analysis of 
	large phylogenies. Bioinformatics, 30, 1312-1313.

 Created by Justin Bagley on Fri, 19 Aug 2016 00:33:27 -0300.
 Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.
"

## previous system type (see also SNAPPRunner): uses SLURM resource management with PBS wrappers, or a PBS resource management system ...

#if [[ -z "$*" ]]; then
#	echo "$USAGE"
#	exit
#fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi


############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	fi
	if [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_DEBUG_MODE_SWITCH=1 ;
	fi

# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
RAxMLRunner

# Exit cleanly
safeExit
