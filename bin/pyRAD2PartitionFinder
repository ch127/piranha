#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: pyRAD2PartitionFinder.sh                                                         #
  VERSION="v1.2.3"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Wed, 27 Jul 2016 00:36:32 -0300.                     #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR RUNNING PartitionFinder ON SNP DNA PARTITIONS OUTPUT FROM pyRAD /     #
# ipyrad                                                                                 #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited. Always make this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




pyRAD2PartitionFinder () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | pyRAD2PartitionFinder, v1.2.3 March 2019  (in PIrANHA v0.3a1) "
echo "INFO      | $(date) | Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Modify pyRAD / ipyrad data file for PartitionFinder. "
############ STEP #2: MODIFY pyRAD DATAFILE FOR PartitionFinder
MY_PYRAD_PARTITION=./*.partitions  ;         				## Assign "partition" files in current directory to variable.

###### FORMAT pyRAD PARTITION FILE FOR PartitionFinder: 
(
	for i in $MY_PYRAD_PARTITION; do               			## Look in the current directory for partition scheme files output by pyRAD.
		echo "$i";
		sed 's/^DNA..//g' "${i}" > "${i}"_1.tmp	;			## Reformatting using nested for loops.
			for j in "${i}"_1.tmp; do 
				echo "$j";
				sed 's/$/;/' "${j}" > "${j}".PFparts.txt ;
			done
		for k in *.partitions_1.tmp.PFparts.txt; do
			mv "$k" ${k/.partitions_1.tmp.PFparts.txt/.newPartitions.txt}	;
		done
	done
)

	rm *_1.tmp ;


echo "INFO      | $(date) | Step #3: Prepare PartitionFinder configuration ('.cfg') file. "
############ STEP #3: PREPARE PartitionFinder CONFIGURATION FILE
if [[ "$MY_INPUT_PHYLIP_SWITCH" = "0" ]] || [[ "$MY_INPUT_PHYLIP_SWITCH" = "$(find . -name '*.phy' -type f | sed 's/\.\/\.\_.*//g')" ]]; then
	MY_PHYLIP_FILENAME="$(echo ./*.phy | sed 's/\.\/\.\_.*//g' | head -n1 | sed -n 's/.\///p')" ;	## Get name of PHYLIP datafile in current working directory. Usually there will only be one PHYLIP file in working directory corresponding to pyRAD output from SNP/RAD assembly in PHYLIP format.
else
	MY_PHYLIP_FILENAME="$MY_INPUT_PHYLIP_SWITCH" ;
fi


if [[ "$MY_SEARCH_ALGORITHM" = "rcluster" ]]; then

echo "## ALIGNMENT FILE ##
	alignment = $MY_PHYLIP_FILENAME;

	## BRANCHLENGTHS: linked | unlinked ##
	branchlengths = linked;

	## MODELS OF EVOLUTION for PartitionFinder: all | raxml | mrbayes | beast | <list> ##
	##              for PartitionFinderProtein: all_protein | <list> ##
	models = $MY_PF_EVOMODELS;

	# MODEL SELECCTION: AIC | AICc | BIC #
	model_selection = $MY_PF_MODSEL;

	## DATA BLOCKS: see manual for how to define ##
	[data_blocks]
	" > PF_top.tmp

echo "## SCHEMES, search: all | greedy | rcluster | hcluster | user ##
	[schemes]
	search = rcluster;

	#user schemes go here if search=user. See manual for how to define.#
	" > PF_bottom.tmp

	cat ./PF_top.tmp ./*.newPartitions.txt ./PF_bottom.tmp > partition_finder.cfg ;  	## Make PartitionFinder configuration file.
	rm ./PF_top.tmp ./PF_bottom.tmp;  												## Remove unnecessary files.


if [[ "$MY_PF_RUN_SWITCH" -eq "1" ]]; then
echo "INFO      | $(date) | Step #4: Run PartitionFinder on data in current working directory. "
############ STEP #4: RUN PartitionFinder ON THE DATA IN WORKING DIRECTORY
###### Find path to PartitionFinder version <PFversion> ($MY_PF_VERSION) and assign to variable:
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py' |  \
# sed -n 's/.://p')"
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py\|partitionfinder-1.1.1/PartitionFinder.py' | sed -n 's/.://p' |  sed 's/\ .*//g')"

	if [[ "$MY_PF_PATH" = "SEARCH" ]]; then 
		MY_PATH_TO_PARTITIONFINDER="$MY_PF_PATH" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "1" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *1.1.1*/PartitionFinder.py | head -n1)" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "2" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *2.1.1*/PartitionFinder.py | head -n1)" ;
	fi
	
python $MY_PATH_TO_PARTITIONFINDER . --raxml --rcluster-percent "$MY_PF_RCLUSTER_PERCENT"
fi


elif [[ "$MY_SEARCH_ALGORITHM" = "greedy" ]]; then

echo "## ALIGNMENT FILE ##
	alignment = $MY_PHYLIP_FILENAME;

	## BRANCHLENGTHS: linked | unlinked ##
	branchlengths = linked;

	## MODELS OF EVOLUTION for PartitionFinder: all | raxml | mrbayes | beast | <list> ##
	##              for PartitionFinderProtein: all_protein | <list> ##
	models = $MY_PF_EVOMODELS;

	# MODEL SELECCTION: AIC | AICc | BIC #
	model_selection = $MY_PF_MODSEL;

	## DATA BLOCKS: see manual for how to define ##
	[data_blocks]
	" > PF_top.tmp

echo "## SCHEMES, search: all | greedy | rcluster | hcluster | user ##
	[schemes]
	search = greedy;

	#user schemes go here if search=user. See manual for how to define.#
	" > PF_bottom.tmp

	cat ./PF_top.tmp ./*.newPartitions.txt ./PF_bottom.tmp > partition_finder.cfg  	## Make PartitionFinder configuration file.
	rm ./PF_top.tmp ./PF_bottom.tmp;  												## Remove unnecessary files.


if [[ "$MY_PF_RUN_SWITCH" -eq "1" ]]; then
echo "INFO      | $(date) | Step #4: Run PartitionFinder on data in current working directory. "
############ STEP #4: RUN PartitionFinder ON THE DATA IN WORKING DIRECTORY
###### Find path to PartitionFinder version <PFversion> ($MY_PF_VERSION) and assign to variable:
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py' |  \
# sed -n 's/.://p')"
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py\|partitionfinder-1.1.1/PartitionFinder.py' | sed -n 's/.://p' |  sed 's/\ .*//g')"

	if [[ "$MY_PF_PATH" = "SEARCH" ]]; then 
		MY_PATH_TO_PARTITIONFINDER="$MY_PF_PATH" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "1" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *1.1.1*/PartitionFinder.py | head -n1)" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "2" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *2.1.1*/PartitionFinder.py | head -n1)" ;
	fi

python $MY_PATH_TO_PARTITIONFINDER .

fi


elif [[ "$MY_SEARCH_ALGORITHM" = "hcluster" ]]; then

echo "## ALIGNMENT FILE ##
	alignment = $MY_PHYLIP_FILENAME;

	## BRANCHLENGTHS: linked | unlinked ##
	branchlengths = linked;

	## MODELS OF EVOLUTION for PartitionFinder: all | raxml | mrbayes | beast | <list> ##
	##              for PartitionFinderProtein: all_protein | <list> ##
	models = $MY_PF_EVOMODELS;

	# MODEL SELECCTION: AIC | AICc | BIC #
	model_selection = $MY_PF_MODSEL;

	## DATA BLOCKS: see manual for how to define ##
	[data_blocks]
	" > PF_top.tmp

echo "## SCHEMES, search: all | greedy | rcluster | hcluster | user ##
	[schemes]
	search = hcluster;

	#user schemes go here if search=user. See manual for how to define.#
	" > PF_bottom.tmp

	cat ./PF_top.tmp ./*.newPartitions.txt ./PF_bottom.tmp > partition_finder.cfg  	## Make PartitionFinder configuration file.
	rm ./PF_top.tmp ./PF_bottom.tmp;  												## Remove unnecessary files.

if [[ "$MY_PF_RUN_SWITCH" -eq "1" ]]; then
echo "INFO      | $(date) | Step #4: Run PartitionFinder on data in current working directory. "
############ STEP #4: RUN PartitionFinder ON THE DATA IN WORKING DIRECTORY
###### Find path to PartitionFinder version <PFversion> ($MY_PF_VERSION) and assign to variable:
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py' |  \
# sed -n 's/.://p')"
#MY_PATH_TO_PARTITIONFINDER="$(locate PartitionFinder.py | grep -n 'PartitionFinderV1.1.1_Mac/PartitionFinder.py\|partitionfinder-1.1.1/PartitionFinder.py' | sed -n 's/.://p' |  sed 's/\ .*//g')"

	if [[ "$MY_PF_PATH" = "SEARCH" ]]; then 
		MY_PATH_TO_PARTITIONFINDER="$MY_PF_PATH" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "1" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *1.1.1*/PartitionFinder.py | head -n1)" ;
	elif [[ "$MY_PF_PATH" != "SEARCH" ]] && [[ "$MY_PF_VERSION" -eq "2" ]]; then
		MY_PATH_TO_PARTITIONFINDER="$(locate *2.1.1*/PartitionFinder.py | head -n1)" ;
	fi

python $MY_PATH_TO_PARTITIONFINDER . --raxml

fi

fi

echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_INPUT_PHYLIP_SWITCH=0
MY_PF_RUN_SWITCH=1
MY_PF_VERSION=1
MY_PF_PATH=SEARCH
MY_PF_RCLUSTER_PERCENT=0.1
MY_PF_EVOMODELS=beast
MY_PF_MODSEL=BIC
MY_SEARCH_ALGORITHM=rcluster

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputPHYLIP (def: 0, .phy file in pwd; also takes name of .phy file in pwd, or absolute 
       path to .phy file in another dir) input PHYLIP sequence alignment file 
  -r   runPF (def: 1; opt out: 0) whether or not to run PartitionFinder after prepping 
       input files
  -v   PFversion (def: 1 = v1.1.1; other: 2 = v2.1.1) specify PartitionFinder version
  -p   PFpath (def: searches for PFversion locally) absolute path to PartitionFinder.py 
       Python script to execute
  -P   rclusterPercent (def: 0.1) --rcluster-percent value for PartitionFinder
  -e   evoModels (def: beast; other: all, raxml, mrbayes)
  -m   modSel (def: BIC; other: AIC, AICc) model selection metric
  -s   search (def: $MY_SEARCH_ALGORITHM; other: greedy, hcluster) desired PartitionFinder
       search algorithm
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates running PartitionFinder (Lanfear et al. 2012, 2014) 'out-of-the-box'
 starting from the PHYLIP DNA sequence alignment file ('.phy') and partitions ('.partitions') 
 file output by pyRAD (Eaton 2014) or ipyrad (Eaton and Overcast 2016). Script expects to be 
 run from a working directory containing minimally one each of the two file types mentioned 
 above. The only dependencies are Python 2.7/3++ and PartitionFinder (v1.1.1 or v2.1.1+). 
	For the -s flag, options are 'greedy', 'rcluster', and 'hcluster'. For less than 100 loci, 
 use the greedy algorithm. The rcluster and hcluster algorithms were developed in Lanfear et al. 
 (2014) for use with genome-scale datasets (reduced-genome, ddRADseq, GBS, and multilocus seq 
 matrices with 100s to 1000s of loci), where the greedy algorithm is very time consuming; however, 
 rcluster has been shown to greatly outperform hcluster, and is recommended for finding the 
 optimal partitioning scheme with such data (although hcluster is computationally more efficient). 
 Because this script was initially developed for use with ddRADseq assemblies or loci output 
 by pyRAD, the -s setting is set to rcluster by default.
 
 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a1. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Eaton, D.A. 2014. PyRAD: assembly of de novo RADseq loci for phylogenetic analyses. 
 	Bioinformatics, 30, 1844-1849.
 Eaton, D.A.R., Overcast, I. 2016. ipyrad: interactive assembly and analysis of RADseq data sets. 
 	Available at: <http://ipyrad.readthedocs.io/>.
 Lanfear, R., Calcott, B., Ho, S.Y.W., Guindon, S. 2012. Partitionfinder: combined selection of 
	partitioning schemes and substitution models for phylogenetic analyses. Molecular Biology 
	and Evolution, 29, 1695–1701. 
 Lanfear, R., Calcott, B., Kainer, D., Mayer, C., Stamatakis, A. 2014. Selecting optimal 
	partitioning schemes for phylogenomic datasets. BMC Evolutionary Biology, 14, 82.

 Created by Justin Bagley on Wed, 27 Jul 2016 00:36:32 -0300.
 Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:r:v:p:P:e:m:s:' opt ; do
  case $opt in
## pyRAD2PartitionFinder options:
    i) MY_INPUT_PHYLIP_SWITCH=$OPTARG ;;
    r) MY_PF_RUN_SWITCH=$OPTARG ;;
    v) MY_PF_VERSION=$OPTARG ;;
    p) MY_PF_PATH=$OPTARG ;;
    P) MY_PF_RCLUSTER_PERCENT=$OPTARG ;;
    e) MY_PF_EVOMODELS=$OPTARG ;;
    m) MY_PF_MODSEL=$OPTARG ;;
    s) MY_SEARCH_ALGORITHM=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
pyRAD2PartitionFinder

# Exit cleanly
safeExit
