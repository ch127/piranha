#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: makePartitions.sh                                                                #
  VERSION="v1.2.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, 19 Feb 2019 22:36:23 -0600.                     #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2019 Justin C. Bagley. All rights reserved.                              #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# THIS SHELL SCRIPT USES PHYLIP DNA SEQUNENCE ALIGNMENTS IN CURRENT DIRECTORY TO MAKE    #
# PARTITIONS / CHARSETS FILES IN RAxML, PartitionFinder, AND NEXUS FORMATS, WHICH ARE    #
# OUTPUT TO SEPARATE FILES                                                               #
#                                                                                        #
##########################################################################################

## OLD NOTE REMOVED FROM USAGE (dates to Jan/Feb 2019; now not relevant): 	
# This script was written during development of the concatenateSeqs function but can be
# used as a standalone function to solve the problems of (1) obtaining partitions files
# for a set of PHYLIP alignments, or specifically (2) correcting partitions output by 
# ElConcatenero (https://github.com/ODiogoSilva/ElConcatenero; currently packaged with 
# PIrANHA) if, upon checking, ElConcatenero has given the correct order of loci but incorrect
# ranges of nucleotides for the partitions in its output. 

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




makePartitions () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | makePartitions, v1.2.1 March 2019  (part of PIrANHA v0.3a2)"
echo "INFO      | $(date) | Copyright (c) 2019 Justin C. Bagley. All rights reserved.      "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Starting makePartitions analysis... "
	echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and determine output file settings. "
fi
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Set output file. "
fi
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH" ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) |          Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
	fi
elif [[ "$MY_OUTPUT_FILE_SWITCH" = "NULL" ]]; then
	exec >> ./makePartitions_output.txt ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) |          Default output file settings. Logging output to file at ./makePartitions_output.txt ... "
	fi
fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #3: Extract partitions information from PHYLIP headers and make partitions files. "
fi
count=1
(
	for i in ./*.phy; do

		######  makePartitions  ######

		MY_PHYLIP_NCHAR="$(head -n1 $i | perl -pe 's/^[0-9]*\ +//g; s/\ //g')" ;
		echo "###----------   $i,  $MY_PHYLIP_NCHAR bp   ----------###" ;


		if [[ "$count" = "1" ]]; then

		## On first loop iteration, make partitions/charsets files including files with
		## RAxML partitions, PartitionFinder subsets, and NEXUS charsets with the following
		## formats. Do this by using 1-sequenceLength of 1st locus.
		# raxml format: "DNA, locus1 = 1-607"
		# PF format: "locus1=1-607;"
		# NEXUS format: "  charset locus1 = 1-607;" 
			locus="$(basename $i '.phy')" ;
			echo "DNA, ${locus} = 1-${MY_PHYLIP_NCHAR}" >> ./raxml_partitions.part ;
			echo "${locus}=1-${MY_PHYLIP_NCHAR};" >> partitionfinder_subsets.txt ;
			echo "  charset ${locus} = 1-${MY_PHYLIP_NCHAR};" >> NEXUS_charsets_lowercase.txt ;
			echo "  CHARSET ${locus} = 1-${MY_PHYLIP_NCHAR};" >> NEXUS_charsets_uppercase.txt ;

			#echo "$MY_PHYLIP_NCHAR" > previous_nchar.tmp ;
			MY_PREV_END_RANGE_VAL="$(echo $MY_PHYLIP_NCHAR)";

		elif [[ "$count" -gt "1" ]]; then

		## On second and subsequent loop iterations ($count > 1), add the partitions/charsets
		## to the partitions/charsets files by making calculations using previous locus 
		## information and current, ith locus information, as follows:
			locus="$(basename $i '.phy')" ;

			#MY_PREV_NCHAR="$(cat ./previous_nchar.tmp)" ;

			MY_NEW_START_RANGE_VAL="$(calc $MY_PREV_END_RANGE_VAL + 1)" ;
			MY_NEW_END_RANGE_VAL="$(calc $MY_PREV_END_RANGE_VAL + $MY_PHYLIP_NCHAR)" ;
			echo "DNA, ${locus} = $MY_NEW_START_RANGE_VAL-${MY_NEW_END_RANGE_VAL}" >> ./raxml_partitions.part ;
			echo "${locus}=$MY_NEW_START_RANGE_VAL-${MY_NEW_END_RANGE_VAL};" >> ./partitionfinder_subsets.txt ;
			echo "  charset ${locus} = $MY_NEW_START_RANGE_VAL-${MY_NEW_END_RANGE_VAL};" >> ./NEXUS_charsets_lowercase.txt ;
			echo "  CHARSET ${locus} = $MY_NEW_START_RANGE_VAL-${MY_NEW_END_RANGE_VAL};" >> ./NEXUS_charsets_uppercase.txt ;

			#echo "$MY_PHYLIP_NCHAR" > previous_nchar.tmp ;
			MY_PREV_END_RANGE_VAL="$(echo $MY_NEW_END_RANGE_VAL)" ;

		fi

	echo "$((count++))" > count.tmp ;
		
	done
)


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #4: Clean up workspace by removing temporary files generated during run. "
	echo "INFO      | $(date) |          Deleting temporary files... "
fi
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	rm ./*.tmp ;

echo "----------------------------------------------------------------------------------------------------------"

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "output file(s): ./raxml_partitions.part "
	echo "                ./partitionfinder_subsets.txt "
	echo "                ./NEXUS_charsets_lowercase.txt "
	echo "                ./NEXUS_charsets_uppercase.txt "
fi
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_OUTPUT_FILE_SWITCH=NULL
MY_VERBOSE_OUT_SWITCH=0

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -o   outputFile (def: NULL) send screen output to file in working dir with user-specified 
       name, for example 'output.txt'
  -v   verbose (def: 0, off; 1, on) specify verbose filename conversion and step output to
       screen (stdout)
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT loops through a set of PHYLIP (Felsenstein 2002) DNA sequence alignments in the 
 current working directory and uses their headers to make partitions/charsets files with RAxML 
 partition, PartitionFinder subset, and NEXUS charset formats. Results are output to multiple
 partitions files. The ordering of charsets is equal to the alphanumeric order in which bash 
 or UNIX terminal would read the PHYLIP files (e.g. locus1.phy, locus10.phy, ..., and not 
 locus1.phy, locus2.phy, ...). This is the same order in which the related PIrANHA functions 
 concatenateSeqs, concatSeqsPartitions, and completeConcatSeqs will read and concatenate the 
 PHYLIP alignments. Sequence names should include alphanumeric, hyphen, and underscore 
 characters but no spaces, or else there could be issues. Also, PHYLIP alignment files must 
 have the extension '.phy'. 
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or Linux
 (tested on CentOS 6/7). Besides standard UNIX/Linux command line tools, the only other 
 dependency is Perl (v5+), which is usually already installed on mac and Linux distributions.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f makePartitions            Run makePartitions in current working directory
    piranha -f makePartitions --args='-h'    Get this makePartitions-specific help text

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 19 Feb 2019 22:36:23 -0600.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'o:v:' opt ; do
  case $opt in
## makePartitions options:
    o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
    v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
makePartitions

# Exit cleanly
safeExit
