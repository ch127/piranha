#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: PHYLIP2FASTA.sh                                                                  #
  VERSION="v1.3.2"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Mon, Mar 4 14:52:24 CST 2019.                        #
# Last update: July 31, 2020                                                             #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT AUTOMATES CONVERTING EACH OF ONE TO MULTIPLE PHYLIP DNA SEQUENCE     #
# ALIGNMENT FILES INTO FASTA FORMAT                                                      #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




PHYLIP2FASTA () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | PHYLIP2FASTA, v1.3.2 July 2020                                 "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Starting PHYLIP2FASTA pipeline... "
	echo "INFO      | $(date) | Step #1: Set up workspace (e.g. functions, working directory) and check machine type. "
fi
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
#USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
#echoCDWorkingDir
echoShortPWD
checkMachineType

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


############ CONVERT PHYLIP FILES TO FASTA FORMAT

############ CASE #1: SINGLE INPUT SEQUENTIAL PHYLIP FILE
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ -s "$INPUT_PHYLIP_FILE" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" != "1" ]]; then
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Step #2: Convert single input PHYLIP alignment file to FASTA format. "
	fi
	j="$INPUT_PHYLIP_FILE"; 
	INPUT_PHYLIP_FILE="$(echo "$j" | sed 's/\.\///g')";
	MY_BASENAME="$(basename "$INPUT_PHYLIP_FILE" '.phy')" ;
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Converting $INPUT_PHYLIP_FILE ... "
	fi
#
	## Check to make sure PHYLIP header of only numbers (ntax  nchar) is present,
	## and if present do sed 1d first; if _not_ present, then do not do sed 1d at
	## all because that would cause you to lose the first sequence/tip taxon.
	## WORKING - $MY_HEADER_CHECK is 1 (true) for input PHYLIP file _with_ a two-
	## part, numeric PHYLIP header, 0 (false) for input PHYLIP file starting with
	## the first sequence (presumably):
	#
	# WORKING (this is working, but commented out to see if I can improve it):
	# MY_HEADER_CHECK="$(grep '^[0-9][[:blank:]]*[0-9]' "$INPUT_PHYLIP_FILE" | wc -l | sed 's/\ //g')";
	# WORKING 2 (also working, improved code):
	# MY_HEADER_CHECK="$(grep -v '[A-z\-]' "$INPUT_PHYLIP_FILE" | grep '^[0-9][[:blank:]]*[0-9]' | wc -l | sed 's/\ //g')";
	# WORKING 3 (even better code):
	MY_HEADER_CHECK="$(head -n1 "$INPUT_PHYLIP_FILE" | perl -pe $'s/^[0-9]*[[:space:]]*[0-9]*$\n//g' | wc -l | sed 's/\ //g')";
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Header check: $MY_HEADER_CHECK"
	fi
	if [[ "$MY_HEADER_CHECK" = "0" ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | PHYLIP header detected... "
		fi
		sed '1d' "$INPUT_PHYLIP_FILE" | sed 's/^/\>/g' | perl -pe $'s/\ +/\n/g' > "$MY_BASENAME".fas ;
	fi
	if [[ "$MY_HEADER_CHECK" = "1" ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "WARNING   | $(date) | PHYLIP header NOT detected... "
		fi
		sed 's/^/\>/g' "$INPUT_PHYLIP_FILE" | perl -pe $'s/\ +/\n/g' > "$MY_BASENAME".fas ;
	fi
#
	## Clean FASTA. Remove any tabs if present from the final FASTA file generated above:
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Cleaning final FASTA file ${MY_BASENAME}.fas... "
	fi
	perl -p -i -e 's/\t//g' "$MY_BASENAME".fas  ;
#
elif [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ ! -s "$INPUT_PHYLIP_FILE" ]]; then
	echo "WARNING   | $(date) | ERROR: Found no PHYLIP file named $INPUT_PHYLIP_FILE in current working directory. Quitting... " 
	exit ;
fi

############ CASE #2: MULTIPLE SEQUENTIAL PHYLIP FILES IN CURRENT DIRECTORY
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
	MY_PHYLIP_COUNT="$(ls -1 *.phy 2>/dev/null | wc -l)";
	if [[ "$MY_PHYLIP_COUNT" != "0" ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | Step #2: Convert multiple PHYLIP alignment files in current directory to FASTA format. "
		fi
		(
			for i in ./*.phy; do
				MY_BASENAME="$(basename "$i" '.phy')" ;
				if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
					echo "INFO      | $(date) | Converting $i ... "
				fi
				# WORKING!
				MY_HEADER_CHECK="$(head -n1 "$i" | perl -pe $'s/^[0-9]*[[:space:]]*[0-9]*$\n//g' | wc -l | sed 's/\ //g')";
				if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
					echo "INFO      | $(date) | Header check: $MY_HEADER_CHECK"
				fi
				if [[ "$MY_HEADER_CHECK" = "0" ]]; then
					if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
						echo "INFO      | $(date) | PHYLIP header detected. Removing header line... "
					fi
					sed '1d' "$i" | sed 's/^/\>/g' | perl -pe $'s/\ +/\n/g' > "$MY_BASENAME".fas ;
				fi
				if [[ "$MY_HEADER_CHECK" = "1" ]]; then
					if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
						echo "WARNING   | $(date) | PHYLIP header NOT detected. Keeping first line... "
					fi
					sed 's/^/\>/g' "$i" | perl -pe $'s/\ +/\n/g' > "$MY_BASENAME".fas ;
				fi
#
				## Clean FASTA. Remove any tabs if present from the final FASTA file generated above:
				if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
					echo "INFO      | $(date) | Cleaning final FASTA file ${MY_BASENAME}.fas... "
				fi
				perl -p -i -e 's/\t//g' "$MY_BASENAME".fas  ;
#
			done
		)
	else
		echo "WARNING   | $(date) | ERROR: Found no PHYLIP files in current working directory. Quitting... " 
		exit ;
	fi
fi


############ CLEAN WORKING DIRECTORY BY ORGANIZING FILES AND REMOVING TEMPORARY FILES.
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "0" ]]; then
###### SINGLE CLEANUP: 
	if [[ "$KEEP_ORIG_PHYLIP_SWITCH" = "0" ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | Step #3: Clean up working directory by organizing files and removing original files per user request. "
		fi
		if [[ -s "$INPUT_PHYLIP_FILE" ]]; then rm "$INPUT_PHYLIP_FILE" ; fi
		if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	fi

	if [[ "$KEEP_ORIG_PHYLIP_SWITCH" = "1" ]] && [[ ! -d fasta/ ]] && [[ ! -d phylip/ ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | Step #3: Clean up working directory by organizing files while keeping original files per user request. "
		fi
#		mkdir fasta/ ;
#		mkdir phylip/ ;
#		mv "$INPUT_PHYLIP_FILE" ./phylip/ ;
#		mv "$MY_BASENAME".fas ./fasta/ ;
		if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	fi
fi

if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
###### MULTI CLEANUP: Remove PHYLIP files in $USER_SPEC_PATH, conditional upon user request. 
## Also, if PHYLIP files kept, then organize output FASTAs into fasta/ dir, and original 
## PHYLIPs into a separate phylip/ dir.
	if [[ "$KEEP_ORIG_PHYLIP_SWITCH" = "0" ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | Step #3: Clean up working directory by organizing files and removing original files per user request. "
		fi
		if [[ "$(ls -1 ./*.phy 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
			rm ./*.phy ; 
		fi
		if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	fi

	if [[ "$KEEP_ORIG_PHYLIP_SWITCH" = "1" ]] && [[ ! -d fasta/ ]] && [[ ! -d phylip/ ]]; then
		if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
			echo "INFO      | $(date) | Step #3: Clean up working directory by organizing files while keeping original files per user request. "
		fi
		mkdir fasta/ ;
		mkdir phylip/ ;
		mv ./*.phy ./phylip/ ;
		mv ./*.fas ./fasta/ ;
		if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.
	fi
fi

echo "INFO      | $(date) | Done." 
echo "----------------------------------------------------------------------------------------------------------"
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ -s "$INPUT_PHYLIP_FILE" ]]; then
	echo "output file(s): ./${MY_BASENAME}.fas"
fi
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
	echo "output file(s): Multiple FASTA DNA sequence alignments in fasta/ subfolder"
fi
echo ""

## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="
Usage: piranha -f $(basename "$0") [Options]...

 ${bold}Options:${reset}
  -i   inputPHYLIP (def: NULL) name of input PHYLIP DNA sequence alignment file
  -m   multiPHYLIP (def: 0, turned off; 1, on) convert multiple PHYLIP files in current 
       working directory to FASTA format
  -k   keepPHYLIP (def: 1, on, keep; 0, off) whether or not to keep original file(s)
  -v   verbose (def: 0, off; 1, on) output more information to screen (stdout)
  -h   help text (also: --help) show this help text and exit
  -V   version (also: --version) echo version and exit
  -d   debug (def: 0, off; 1, on also: --debug) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates the conversion of one or multiple PHYLIP (Felsenstein 2002) DNA 
 sequence alignment files into FASTA ('.fas') format, while saving (-k 1) or deleting (-k 0) 
 the original input file(s). There are two basic workflows for running this script. 1) To 
 convert a single input PHYLIP file to FASTA format, the user must pass the name of the 
 target PHYLIP file to the program using the -i flag. 2) To convert all PHYLIP files in the 
 current working directory to FASTA format, the user must turn on the <multiPHYLIP> option 
 with -m 1.
	By default, the program will keep the original PHYLIP files; however, an option (-k 1) 
 is available that allows removing them. Also by default, the script will run quietly with 
 little output to screen; however, setting the -v option to 1 redirects verbose run information 
 to screen for each input file. Arguments are passed to the program following the function
 name (see examples below). Sequence names should include alphanumeric, hyphen, and underscore 
 characters but no spaces, or else there could be issues. 
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage as obtained by running the script with the -h flag. It has been 
 tested with Perl v5.1+ on macOS High Sierra (v10.13+) and Centos 5/6/7 Linux, but should 
 work on many other versions of macOS or Linux. There are no other dependencies. 

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f PHYLIP2FASTA -i <inputPHYLIP> -k 1      Convert <inputPHYLIP> file to FASTA and
                                                       keep original file
    piranha -f PHYLIP2FASTA -m 1 -k 1 -v 1             Convert multiple PHYLIP files in working
                                                       dir to FASTA, keep original files, and
                                                       print stdout to screen

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Mon, Mar 4 14:52:24 CST 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" = "-h" ]] || [[ "$1" = "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" = "-V" ]] || [[ "$1" = "--version" ]]; then
	echo "$(basename "$0") $VERSION"
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		INPUT_PHYLIP_FILE=NULL ;
	else 
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		INPUT_PHYLIP_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MULTIPLE_PHYLIP_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-m' ./args.txt | perl -pe 's/\-m//g' | perl -pe 's/\ //g')";
		MULTIPLE_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		KEEP_ORIG_PHYLIP_SWITCH=1 ;
	else 
		MY_ARG="$(grep -h '\-k' ./args.txt | perl -pe 's/\-k//g' | perl -pe 's/\ //g')";
		KEEP_ORIG_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	fi
	if [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_DEBUG_MODE_SWITCH=1 ;
	fi


# ############ PARSE THE OPTIONS
# while getopts 'i:m:k:v:d:' opt ; do
#   case $opt in
# ## PHYLIP2FASTA options:
#     i) INPUT_PHYLIP_FILE=$OPTARG ;;
#     m) MULTIPLE_PHYLIP_SWITCH=$OPTARG ;;
#     k) KEEP_ORIG_PHYLIP_SWITCH=$OPTARG ;;
#     v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
#     d) MY_DEBUG_MODE_SWITCH=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
PHYLIP2FASTA

# Exit cleanly
safeExit
