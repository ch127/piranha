#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: fastSTRUCTURE.sh                                                                 #
  VERSION="v1.1.4"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Wed, 27 Jul 2016 00:48:14 -0300.                     #
# Last update: December 23, 2020                                                         #
# Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# INTERACTIVE SHELL SCRIPT FOR RUNNING fastSTRUCTURE (Raj et al. 2014) ON BIALLELIC SNP  #
# DATASETS                                                                               #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------
UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

# Source shared functions and variables
# -----------------------------------
FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()




fastSTRUCTURE () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | fastSTRUCTURE, v1.1.4 April 2020                               "
echo "INFO      | $(date) | Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | Step #1: Setup. Read user input, set environmental variables. "

	MY_FASTSTRUCTURE_WKDIR="$(pwd -P)" ;
	MY_FASTSTRUCTURE_PATH="$(echo $FASTSTRUCTURE_PATH)" ;
	RUN_SEED=$RANDOM

echo "INFO      | $(date) | Step #2: Run fastSTRUCTURE on range of K specified by user. "
echo "INFO      | $(date) | Modeling K = $LOWER_K_VAL to $UPPER_K_VAL clusters in fastSTRUCTURE. "

(
	for (( i=$LOWER_K_VAL; i<=$UPPER_K_VAL; i++ )); do
		echo "$i";
		python "$MY_FASTSTRUCTURE_PATH" -K "$i" --input="$MY_FASTSTRUCTURE_WKDIR/$FASTSTRUCTURE_INPUT" --output="$FASTSTRUCTURE_OUTPUT" --format=str --full --seed="$RUN_SEED" ;
	done
)

echo "INFO      | $(date) | fastSTRUCTURE runs completed. "


echo "INFO      | $(date) | Step #3: Estimate model complexity. "
###### Obtain an estimate of the model complexity for each set of runs (per species):
	MY_CHOOSEK_PATH="$(echo $FASTSTRUCTURE_PATH | sed 's/structure.py//g' | sed 's/$/chooseK.py/g')" ;

	python "$MY_CHOOSEK_PATH" --input="$FASTSTRUCTURE_OUTPUT" > chooseK.out.txt ;

echo "INFO      | $(date) | Finished estimating model complexity. "
	cat chooseK.out.txt ;


echo "INFO      | $(date) | Step #4: Visualize results. "
###### Use DISTRUCT to create graphical output of results corresponding to the best K value modeled.
	read -p "INPUT     | $(date) | Enter the value of K that you want to visualize : " bestK ;

	MY_DISTRUCT_PATH="$(echo $FASTSTRUCTURE_PATH | sed 's/structure.py//g' | sed 's/$/distruct.py/g')" ;

	python "$MY_DISTRUCT_PATH" -K "$bestK" --input="$MY_FASTSTRUCTURE_WKDIR/$FASTSTRUCTURE_OUTPUT" --output="$FASTSTRUCTURE_OUTPUT_distruct.svg" ;


echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}


############################### BEGIN OPTIONS AND USAGE ##################################


############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
# USER_SPEC_PATH=.
FASTSTRUCTURE_PATH=/Applications/STRUCTURE-fastStructure-e47212f/structure.py
FASTSTRUCTURE_INPUT=NULL
LOWER_K_VAL=1
UPPER_K_VAL=10
FASTSTRUCTURE_OUTPUT=fS_out_simple

############ CREATE USAGE & HELP TEXTS
USAGE="
Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -p   fsPath (def: /Applications/STRUCTURE-fastStructure-e47212f/structure.py) path to
       main fastSTRUCTURE Python script (assuming macOS, typical install location; change
       this option if you have a different install location)
  -i   fsInput (def: NULL) basename of fastSTRUCTURE input file in STRUCTURE format; typically
       <basename>.str is the input file and the input is <basename> without the extension
  -l   lowerK (def: 1, other: lK) lower K value to be modeled in fastSTRUCTURE
  -u   upperK (def: 10, other: uK) upper K value to be modeled in fastSTRUCTURE
  -o   fsOutput (def: fS_out_simple) basename for fastSTRUCTURE output files
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates running fastSTRUCTURE v1.0 (Raj et al. 2014) on a STRUCTURE-formatted
 input file of genetic data. Assumes that you have installed fastSTRUCTURE and its dependencies,
 including Python, and automatically generates random number seeds.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f fastSTRUCTURE -p <fsPath> -i <fsInput> -l <lowerK> -u <upperK> -o <fsOutput>

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Raj, A., Stephens, M., Pritchard, J.K. 2014. fastSTRUCTURE: variational inference of population 
	structure in large SNP data sets. Genetics, 197, 573â€“589.

 Created by Justin Bagley on Wed, 27 Jul 2016 00:48:14 -0300.
 Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'p:i:l:u:o:' opt ; do
  case $opt in
## fastSTRUCTURE options:
    p) FASTSTRUCTURE_PATH=$OPTARG ;;
    i) FASTSTRUCTURE_INPUT=$OPTARG ;;
    l) LOWER_K_VAL=$OPTARG ;;
    u) UPPER_K_VAL=$OPTARG ;;
    o) FASTSTRUCTURE_OUTPUT=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


################################ END OPTIONS AND USAGE ###################################


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
fastSTRUCTURE

# Exit cleanly
safeExit
