#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: treeThinner.sh                                                                   #
  VERSION="v1.2.2"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Thu, 17 Nov 2016 00:24:53 -0600.                     #
# Last update: April 13, 2020                                                            #
# Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR DOWNSAMPLING ("THINNING") TREES IN MRBAYES .T FILES SO THAT THEY      #
# CONTAIN EVERY NTH TREE                                                                 #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()


############# SCRIPT INFO
## NOTE: try to expand to multiple treefile formats in future versions.

###### A method specific to MrBayes .t trees files: 1) count the number of lines in the
## header (NEXUS top and beginning of TREES block with translated taxon names) by
## subtracting 1 from the line on which the first ampersand occurs; 2) cut the header
## section out of the .t file and save it; 3) working only with lines containing trees
## (thus with ampersands or "&U"; get these lines by using grep), get every nth line of
## the trees; and 4) paste the header, the trees, and an appropriate final 1-2 lines
## back together as a final output .t file that has been "thinned".

############# 


treeThinner () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | treeThinner, v1.2.2 April 2020                                 "
echo "INFO      | $(date) | Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
### STEP #1:
read -p "Please enter the name of your MrBayes .t trees file : " MY_TFILE ;
read -p "Please enter the frequency (n) of nth lines that you would like to keep : " NTH_LINES ;

   MY_FIRST_TREELINE=$(awk '/&U/{ print NR}' $MY_TFILE | head -n1) ;
   MY_NUM_HEADER_LINES="$(calc $MY_FIRST_TREELINE - 1)" ;

### STEP #2:
   head -n$MY_NUM_HEADER_LINES $MY_TFILE > header.txt ;

### STEP #3:
   grep "&U" $MY_TFILE > trees.txt ;
   awk 'NR == 1 || NR % '$NTH_LINES' == 0' ./trees.txt | sed '1d' > thinned_trees.txt ;

### STEP #4:
   echo "END;
" > ./end.txt ;

   cat ./header.txt ./thinned_trees.txt ./end.txt > ./nth_line_trees.t ;

### CLEANUP.
	if [[ -s ./header.txt ]]; then rm ./header.txt ; fi
	if [[ -s ./trees.txt ]]; then rm ./trees.txt ; fi
	if [[ -s ./thinned_trees.txt ]]; then rm ./thinned_trees.txt ; fi
	if [[ -s ./end.txt ]]; then rm ./end.txt ; fi

echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"

##########################################################################################
######################################### END ############################################

}


############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates thinning a phylogenetic tree file ('.t' extension) output by MrBayes
 v3+ (Ronquist et al. 2012) to every nth tree. This is an interactive script. First, the user
 is prompted to input the name of their tree file. After reading this in, the thinning frequency
 is read from user. This information is used to output a thinned treefile named 'nth_line_trees.t'
 in the current working directory. 
 
 TODO: Extend this script to work with tree files from other phylogenetic software programs 
 in the near future (2019), by allowing it to a) run with options (non-interactively), 
 b) detect tree file type, and c) conduct thinning.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f treeThinner

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Ronquist, F., Teslenko, M., van der Mark, P., Ayres, D., Darling, A., et al. (2012) MrBayes 
    v. 3.2: efficient Bayesian phylogenetic inference and model choice across a large model 
    space. Systematic Biology, 61, 539-542. 

 Created by Justin Bagley on Thu, 17 Nov 2016 00:24:53 -0600.
 Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.
"

#if [[ -z "$*" ]]; then
#	echo "$USAGE"
#	exit
#fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
treeThinner

# Exit cleanly
safeExit
