#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: AnouraNEXUSPrepper.sh                                                            #
  VERSION="v1.3.3"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Sun, February 24, 2019.                              #
# Last update: April 17, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT AUTOMATES A VARIETY OF TEXT MODIFICATIONS TO ANOURA UCE LOCI NEXUS FILES  #
# IN ORDER TO CLEAN THEM AND MAKE THEM CONFORM TO A STANDARD FORMAT                      #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()






AnouraNEXUSPrepper () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | AnouraNEXUSPrepper, v1.3.3 April 2020                          "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and read in NEXUS file. "
############ I. SET UP WORKSPACE AND CHECK MACHINE TYPE, AND READ IN NEXUS FILE.
## Nothing to do for working dir because script executes in current working dir (of execution/
## sourcing). Only echo cwd to screen:
MY_PATH="$(pwd -P | sed 's/$/\//g' | sed 's/.*\/\(.*\/\)\(.*\/\)/\.\.\.\/\1\2/g')";
echo "INFO      | $(date) | Current directory: $MY_PATH "
echoCDWorkingDir
#echo "INFO      | $(date) | Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |      Found machine type ${machine}. "

############ READ IN NEXUS FILE.
## 1. Read in the input NEXUS file. Only accommodates one file at present, but could easily
## be extended to run on multiple input NEXUS files using a for loop or while loop (with
## list in case of while). Also set up environment.

if [[ "$MY_INPUT_NEXUS_SWITCH" = "0" ]]; then
	MY_NEXUS_FILENAME="$(echo ./*.{nex,NEX,nexus,NEXUS} | sed 's/\.\/\.\_.*//g' | head -n1 | sed -n 's/.\///p')"	## Get name of NEXUS datafile in current working directory. Usually there will only be one NEXUS file in working directory corresponding to user file/output from assembly software. This checks for any NEXUS, and takes first filename; in such cases, filename is echoed to screen and user may use keyboard to terminate execution if desired (e.g., in mac Terminal: control + C).
else
	MY_NEXUS_FILENAME="$MY_INPUT_NEXUS_SWITCH";
fi


echo "INFO      | $(date) | Step #2: Use sed & Perl search and replace to fix various patterns to conform to a project (NEXUS) standard. "
############ II. SEARCH AND REPLACE.
## 2. Search and replace on a variety of patterns:

if [[ "${machine}" = "Mac" ]]; then
	sed -i.bak 's/begin\ data\;/BEGIN\ DATA\;/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/dimensions/DIMENSIONS/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/ntax/NTAX/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/nchar/NCHAR/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/format/FORMAT/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/datatype/DATATYPE/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/\=dna/\=DNA/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/matrix/MATRIX/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/missing\=\?/MISSING\=N/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/gap\=\-/GAP\=\-\ INTERLEAVE\=NO/g' "$MY_NEXUS_FILENAME" ;
	rm ./*.bak;

	## Use Ns as missing, so convert any question marks to capital N's:
	sed -i.bak 's/\?/N/g' "$MY_NEXUS_FILENAME" ;
	rm ./*.bak;

	## Taxon/tip name sed replacements:
	sed -i.bak 's/^a\_/A/g; s/^g\_/G/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/\_type\_/type/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/Acartype0\ /Acartype\_0\ \ /g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/Acartype1\ /Acartype\_1\ \ /g' "$MY_NEXUS_FILENAME" ;
	rm ./*.bak;

	## Set section sed replacements:
	sed -i.bak 's/charset\ '\''uce\-/CHARSET\ uce/g' "$MY_NEXUS_FILENAME" ;
#
	sed -i.bak 's/^CHARSET/\ \ CHARSET/g' "$MY_NEXUS_FILENAME" ;
#
	sed -i.bak 's/\.nexus'\''\ \=\ /\=/g' "$MY_NEXUS_FILENAME" ;

	# Capitalization (optional):
	sed -i.bak 's/begin\ sets\;/BEGIN\ SETS\;/g' "$MY_NEXUS_FILENAME" ;
	sed -i.bak 's/end\;/END\;/g' "$MY_NEXUS_FILENAME" ;
	rm ./*.bak;
fi

if [[ "${machine}" = "Linux" ]]; then
	sed -i 's/begin\ data\;/BEGIN\ DATA\;/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/dimensions/DIMENSIONS/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/ntax/NTAX/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/nchar/NCHAR/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/format/FORMAT/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/datatype/DATATYPE/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/\=dna/\=DNA/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/matrix/MATRIX/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/missing\=\?/MISSING\=N/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/gap\=\-/GAP\=\-\ INTERLEAVE\=NO/g' "$MY_NEXUS_FILENAME" ;

	## Use Ns as missing, so convert any question marks to capital N's:
	sed -i 's/\?/N/g' "$MY_NEXUS_FILENAME" ;

	## Taxon/tip name sed replacements:
	sed -i 's/^a\_/A/g; s/^g\_/G/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/\_type\_/type/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/Acartype0\ /Acartype\_0\ \ /g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/Acartype1\ /Acartype\_1\ \ /g' "$MY_NEXUS_FILENAME" ;

	## Set section sed replacements:
	sed -i 's/charset\ '\''uce\-/CHARSET\ uce/g' "$MY_NEXUS_FILENAME" ;
#
	sed -i 's/^CHARSET/\ \ CHARSET/g' "$MY_NEXUS_FILENAME" ;
#
	sed -i 's/\.nexus'\''\ \=\ /\=/g' "$MY_NEXUS_FILENAME" ;

	# Capitalization (optional):
	sed -i 's/begin\ sets\;/BEGIN\ SETS\;/g' "$MY_NEXUS_FILENAME" ;
	sed -i 's/end\;/END\;/g' "$MY_NEXUS_FILENAME" ;
fi

	# Remove character partition:
	perl -p -i -e $'s/^charpartition\ [A-Za-z\ +\=\.\,\;0-9\-\_\:]*$\n//g' "$MY_NEXUS_FILENAME" ;

echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_INPUT_NEXUS_SWITCH=0

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: 0, uses NEXUS file in current working directory; accommodates .nex,
       .NEX, .nexus, or .NEXUS file extensions) input NEXUS sequence alignment file
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT is an in-house function that takes as input a single NEXUS file containing data 
 from one or more ultraconserved element (UCE) loci from our Muchhala lab project on Neo-
 tropical Anoura bat UCE phylogenomics (Calderón et al. in prep.), and modifies this 
 <inputNEXUS> file to make it conform to a standard format. This script is project-specific, 
 but is designed to work with NEXUS files output by Brant Faircloth's Phyluce pipeline for 
 UCE phylogenomics (Faircloth 2015; https://github.com/faircloth-lab/phyluce), and thus could 
 easily be modified for use with other datasets from UCE projects. Among other things, a 
 variety of capitalization and text changes are made, and missing data are changed from '?' 
 coding to 'N' characters.
	By default, the script looks for a single NEXUS file in the current working directory;
 however, the user may specify an inputNEXUS filename using the -i flag. Runs on macOS High
 Sierra (10.13+) and many earlier macOS or OSX versions.

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Calderón–Acevedo, C.A.G., Bagley, J.C., Muchhala, N. (in prep.) Genome-wide ultraconserved 
	elements resolve phylogenetic relationships among Neotropical leaf- nosed bats in the 
	genus Anoura Gray 1838. Molecular Phylogenetics and Evolution.
 Faircloth, B.C. 2015. PHYLUCE is a software package for the analysis of conserved genomic
	loci. Bioinformatics, 32(5), 786-788.

 Created by Justin Bagley on Sun, February 24, 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:' opt ; do
  case $opt in
## pyRAD2PartitionFinder options:
    i) MY_INPUT_NEXUS_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
AnouraNEXUSPrepper

# Exit cleanly
safeExit
