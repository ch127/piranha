#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: NEXUS2gphocs.sh                                                                  #
  VERSION="v1.5.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on/before Aug 29 13:12:45 2016 -0700.                   #
# Last update: March 13, 2019                                                            #
# Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT AUTOMATES SUBSAMPLING EACH OF ONE TO MULTIPLE PHYLIP ALIGNMENT       #
# FILES DOWN TO ONE (RANDOM) SEQUENCE PER SPECIES (FOR SPECIES TREE ANALYSIS)            #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../../../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../../../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../../../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
function trapCleanup() {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
function safeExit() {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




function NEXUS2gphocs () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | NEXUS2gphocs, v1.5.0 March 2019  (part of PIrANHA v0.4a3)      "
echo "INFO      | $(date) | Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting NEXUS2gphocs analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


############ STEP #2: GET NEXUS FILE & DATA CHARACTERISTICS, CONVERT NEXUS TO FASTA FORMAT
##--Extract charset info from sets block at end of NEXUS file: 
	MY_NEXUS_CHARSETS="$(egrep "charset|CHARSET" $MY_NEXUS | \
	awk -F"=" '{print $NF}' | sed 's/\;/\,/g' | \
	awk '{a[NR]=$0} END {for (i=1;i<NR;i++) print a[i];sub(/.$/,"",a[NR]);print a[NR]}' | \
	sed 's/\,/\,'$CR'/g' | sed 's/^\ //g')";

##--Count number of loci present in the NEXUS file, based on number of charsets defined.
##--Also get corrected count starting from 0 for numbering loci below...
	MY_NLOCI="$(echo "$MY_NEXUS_CHARSETS" | wc -l)";
	MY_CORR_NLOCI="$(calc $MY_NLOCI - 1)";

##--This is the base name of the original nexus file, so you have it. This WILL work regardless of whether the NEXUS filename extension is written in lowercase or in all caps, ".NEX".
	MY_NEXUS_BASENAME="$(echo $MY_NEXUS | sed 's/\.\///g; s/\.[A-Za-z]\{3\}$//g')";

##--Convert data file from NEXUS to fasta format using bioscripts.convert v0.4 Python package:
##--However, if alignment is too long (>100,000 bp), then need to convert to fasta using my 
##--script and then wrap to 60 characters with fold function (as suggested at stackexchange
##--post URL: https://unix.stackexchange.com/questions/25173/how-can-i-wrap-text-at-a-certain-column-size).
##--If this conversion failes because the alignment is too long, then the code to follow 
##--will have nothing to work with. So, I am here adding a conditional quit if the fasta
##--file is not generated.

#---------ADD IF/THEN CONDITIONAL AND MY OWN NEXUS2fasta SCRIPT HERE!!!!----------#

	convbioseq fasta $MY_NEXUS > "$MY_NEXUS_BASENAME".fasta ;
	MY_FASTA="$(echo "$MY_NEXUS_BASENAME".fasta | sed 's/\.\///g; s/\.nex//g')";
	
	##--The line above creates a file with the name basename.fasta, where basename is the base name of the original .nex file. For example, "hypostomus_str.nex" would be converted to "hypostomus_str.fasta".
	##--Check to make sure the fasta was created; if so, echo info, if not, echo warning and quit:
	if [[ -s "$MY_NEXUS_BASENAME".fasta ]]; then
		echo "INFO      | $(date) |          Input NEXUS was successfully converted to fasta format. Moving forward... "
	else
		echo "WARNING!  | $(date) |          NEXUS to fasta file conversion FAILED! Quitting... "
		exit 1
	fi


############ STEP #3: PUT COMPONENTS OF ORIGINAL NEXUS FILE AND THE FASTA FILE TOGETHER TO
############ MAKE A G-PhoCS-FORMATTED DATA FILE
##--Make top (first line) of the G-Phocs format file, which should have the number of loci on the first line:
echo "$MY_NLOCI" | sed 's/[\ ]*//g' > gphocs_top.txt

echo "$MY_GAP_THRESHOLD" > ./gap_threshold.txt
	count=0
	(
		for j in ${MY_NEXUS_CHARSETS}; do
			echo "$j";
			charRange="$(echo ${j} | sed 's/\,//g')";
			echo "$charRange";
			export setLower="$(echo ${j} | sed 's/\-.*$//g')";
			export setUpper="$(echo ${j} | sed 's/[0-9]*\-//g' | sed 's/\,//g; s/\ //g')";

			**/selectSites.pl -s $charRange $MY_FASTA > ./sites.fasta;
			
			**/fasta2phylip.pl ./sites.fasta > ./sites.phy;

			##--Need to make sure there is a space between the tip taxon name (10 characters as output
			##--by the fasta2phylip.pl Perl script) and the corresponding sequence, for all tips. Use
			##--a perl search and replace for this:

			perl -p -i -e 's/^([A-Za-z0-9\-\_\ ]{10})/$1\ /g' ./sites.phy ;

				##--If .phy file from NEXUS charset $j has gaps in alignment, then call 
				##--rmGapSites.R R script to remove all column positions with gaps from
				##--alignment and output new, gapless phylip file named "./sites_nogaps.phy". 
				##--If charset $j does not have gaps, go to next line of loop. We do the 
				##--above by first creating a temporary file containing all lines in
				##--sites.phy with the gap character:
				grep -n "-" ./sites.phy > ./gaptest.tmp ;
				
				##--Next, we test for nonzero testfile, indicating presence of gaps in $j, 
				##--using UNIX test operator "-s" (returns true if file size is not zero). 
				##--If fails, cat sites.phy into file with same name as nogaps file that
				##--is output by rmGapSites.R and move forward:
				if [ -s ./gaptest.tmp ]; then
					echo "Removing column sites in locus"$count" with gaps. "
					R CMD BATCH **/rmGapSites.R ;
				else
			   		echo ""
			   		cat ./sites.phy > ./sites_nogaps.phy ;
				fi
					
			phylip_header="$(head -n1 ./sites_nogaps.phy)" ;
			locus_ntax="$(head -n1 ./sites_nogaps.phy | sed 's/[\ ]*[.0-9]*$//g')" ;
			locus_nchar="$(head -n1 ./sites_nogaps.phy | sed 's/[0-9]*\ //g')" ;
			
        		if [ $MY_INDIV_MISSING_DATA == 0 ]; then
					sed '1d' ./sites_nogaps.phy | egrep -v 'NNNNNNNNNN|nnnnnnnnnn' > ./cleanLocus.tmp ;
					cleanLocus_ntax="$(cat ./cleanLocus.tmp | wc -l)" ;
					echo locus"$((count++))" $cleanLocus_ntax $locus_nchar > ./locus_top.tmp ;
					cat ./locus_top.tmp ./cleanLocus.tmp >> ./gphocs_body.txt ;
				else
					echo locus"$((count++))" $locus_ntax $locus_nchar > ./locus_top.tmp ;
					cat ./locus_top.tmp ./sites_nogaps.phy >> ./gphocs_body.txt ;
				fi

			rm ./sites.fasta ./sites.phy ./*.tmp ;
			rm ./sites_nogaps.phy ;
		done
	)

	grep -v "^[0-9]*\ [0-9]*.*$" ./gphocs_body.txt > ./gphocs_body_fix.txt ;
	cat ./gphocs_top.txt ./gphocs_body_fix.txt > $MY_NEXUS_BASENAME.gphocs ;

	############ STEP #4: CLEANUP: REMOVE UNNECESSARY FILES
	rm ./gphocs_top.txt ;
	rm ./gap_threshold.txt ;
	rm ./gphocs_body.txt ;

#echo "INFO      | $(date) | Successfully created a '.gphocs' input file from the existing NEXUS file... "
#echo "INFO      | $(date) | Bye.
#"

echo "----------------------------------------------------------------------------------------------------------"
echo ""


##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_NEXUS=NULL
MY_GAP_THRESHOLD=0.001
MY_INDIV_MISSING_DATA=1

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) input NEXUS file
  -g   gapThreshold (def: $MY_GAP_THRESHOLD=essentially zero gaps allowed unless >1000 
       individuals; takes float proportion value)
  -m   indivMissingData (def: $MY_INDIV_MISSING_DATA=allowed; 0=removed)
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 Reads in a single NEXUS datafile and converts it to '.gphocs' format for G-PhoCS software
 (Gronau et al. 2011). Sequence names may not include hyphen characters, or there will be 
 issues. For best results, update to R v3.3.1 or higher. 

 ${bold}DETAILS${reset}
 The -i flag passess the name of the input NEXUS file, <inputNEXUS> parameter, to the program.

 The -g flag supplies a 'gap threshold' to an R script, which deletes all column sites in 
 the DNA alignment with a proportion of gap characters '-' at or above the threshold value. 
 If no gap threshold is specified, all sites with gaps are removed by default. If end goal
 is to produce a file for G-PhoCS, you  will want to leave <gapThreshold> at the default. 
 However, if the next step in your pipeline involves converting from .gphocs to other data 
 formats, you will likely want to set <gapThreshold> = 1 (e.g. before converting to phylip 
 format for RAxML). 

 The -m flag allows users to choose their level of tolerance for individuals with missing
 data. The default is <indivMissingData> = 1, allowing individuals with runs of 10 or more 
 missing nucleotide characters ('N') to be kept in the alignment. Alternatively, setting
 <indivMissingData> = 0 removes all such individuals from each locus; thus, while the input
 file would have had the same number of individuals across loci, the resulting file could
 have varying numbers of individuals for different loci.

 Dependencies: This script has the same dependencies as MAGNET v1.0.0, which it is distributed 
 with. See the MAGNET help text or README for more information. However a list of dependencies
 includes Perl, R, Python, the bioscripts.convert v0.4 Python package, and Naoki Takebayashi 
 Perl scripts 'fasta2phylip.pl' and 'selectSites.pl' given correct permissions in MAGNET folder, 
 or available from command line (in your path). Tested with Perl v5+ and R v3.3.3–v3.5.1.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f MAGNET-1.0.0/NEXUS2gphocs --args='-i <inputNEXUS> -g1 -m1'
    piranha -f MAGNET-1.0.0/NEXUS2gphocs --args='-h'

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.4a3. GitHub repository, Available at:
	<https://github.com/justincbagley/PIrANHA>.

 ${bold}REFERENCES${reset}
 Gronau, I., Hubisz, M.J., Gulko, B., Danko, C.G., Siepel, A. 2011. Bayesian inference of 
	ancient human demography from individual genome sequences. Nature Genetics, 43, 1031-1034.

 Created by Justin Bagley on/before Aug 29 13:12:45 2016 -0700.
 Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:g:m:' opt ; do
  case $opt in
## NEXUS2gphocs options:
    i) MY_NEXUS=$OPTARG ;;
    g) MY_GAP_THRESHOLD=$OPTARG ;;
    m) MY_INDIV_MISSING_DATA=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
NEXUS2gphocs

# Exit cleanly
safeExit
