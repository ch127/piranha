#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: renameForStarBEAST2.sh                                                           #
  VERSION="v1.2.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, Mar 5 11:32:42 CST 2019.                        #
# Last update: March 13, 2019                                                            #
# Copyright (c) 2019 Justin C. Bagley. All rights reserved.                              #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT TO RENAME TIP LABLES IN PHYLIP OR FASTA MULTIPLE SEQUENCE ALIGNMENT (MSA) #
# FILES TO APPEND SPECIES ASSIGNMENTS FOR STARBEAST / STARBEAST2                         #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
function trapCleanup() {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
function safeExit() {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




function renameForStarBEAST2 () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | renameForStarBEAST2, v1.2.1 March 2019  (part of PIrANHA v1.0.0)"
echo "INFO      | $(date) | Copyright (c) 2019 Justin C. Bagley. All rights reserved.      "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Read and process ASTRAL-III style taxon-assignment file. "
## Split input ASTRAL-III-type taxon-assignment file into separate .tmp files for species
## (*_assign_names.tmp) and individuals or tips (*_assign_tips.tmp)
echo "INFO      | $(date) |          Splitting up assignment file... "
perl -pe $'s/\ /\t/g' "$USER_SPEC_ASSIGNMENT_FILE" | cut -f 1 > ./species_assign_names.tmp
perl -pe $'s/\ /\t/g' "$USER_SPEC_ASSIGNMENT_FILE" | cut -f 3- > ./species_assign_tips.tmp

## Count number of species assignments and tips:
MY_NUM_SPECIES_ASSIGN="$(wc -l ./species_assign_names.tmp | sed 's/\ //g; s/\.\/.*//g')"
MY_NUM_TIP_INDS="$(perl -pe $'s/\ /\n/g; s/\t/\n/g' ./species_assign_tips.tmp | sort -u | wc -l | sed 's/\ //g; s/\.\/.*//g')"

echo "INFO      | $(date) | Step #3: Run main parts of script that conduct renaming. "
## Main script loop sets run conditional on input file type:
if [[ "$MY_INPUT_FILE_TYPE" = "phylip" ]]; then
echo "INFO      | $(date) |          Assignment file: $USER_SPEC_ASSIGNMENT_FILE "
echo "INFO      | $(date) |          Number of species assignments: $MY_NUM_SPECIES_ASSIGN "
echo "INFO      | $(date) |          Number of tips: $MY_NUM_TIP_INDS "
echo "INFO      | $(date) |          Renaming PHYLIP MSAs in current working directory... "
for i in ./*.phy; do
	echo "INFO      | $(date) |          $i "
	MY_COUNT=1
	(
		while read TIP_NAME; do 
			MY_SPECIES="$(sed -n ${MY_COUNT}p ./species_assign_names.tmp)"; 
			MY_TIP_NAMES="$TIP_NAME"; 
	
				for j in $MY_TIP_NAMES; do 
					perl -p -i -e 's/'"$j"'/'"$MY_SPECIES"'\_'"$j"'/g' "$i" ; 
				done; 

			echo "INFO      | $(date) |          Finished processing species $((MY_COUNT++))... " 
		done < ./species_assign_tips.tmp
	)
done
fi

if [[ "$MY_INPUT_FILE_TYPE" = "fasta" ]]; then
echo "INFO      | $(date) |          Assignment file: $USER_SPEC_ASSIGNMENT_FILE "
echo "INFO      | $(date) |          Number of species assignments: $MY_NUM_SPECIES_ASSIGN "
echo "INFO      | $(date) |          Number of tips: $MY_NUM_TIP_INDS "
echo "INFO      | $(date) |          Renaming FASTA MSAs in current working directory... "

for i in ./*.fas; do
	echo "INFO      | $(date) |          $i "
	MY_COUNT=1
	(
		while read TIP_NAME; do 
			MY_SPECIES="$(sed -n ${MY_COUNT}p ./species_assign_names.tmp)" ; 
			MY_TIP_NAMES="$TIP_NAME" ; 
	
				for j in $MY_TIP_NAMES; do 
					perl -p -i -e 's/'"$j"'/'"$MY_SPECIES"'\_'"$j"'/g' "$i" ; 
				done; 

			echo "INFO      | $(date) |          Finished processing species $((MY_COUNT++))... " 
		done < ./species_assign_tips.tmp
	)
done
fi

echo "INFO      | $(date) | Step #4: Clean up workspace by deleting temporary files created during run. "
echo "INFO      | $(date) |          Removing temporary files... "
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	rm ./species_assign_names.tmp ./species_assign_tips.tmp ;

echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_INPUT_FILE_TYPE=phylip
USER_SPEC_ASSIGNMENT_FILE=assignment.txt

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -f   input file type (def: phylip; other: fasta) type of file(s) in current directory
       to be renamed (assumes '.phy' or '.fas' extensions for PHYLIP or FASTA format files, 
       respectively)
  -a   assignmentFile (def: assignment.txt) ASTRAL-III style assignment file detailing which
       individual tips correspond to which species or taxa
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT renames tip taxa in all PHYLIP or FASTA DNA sequence alignments in the current
 working directory, so that the taxon names are suitable for assigning species in BEAUti
 v2.4+ (part of BEAST v2.4+; Bouckaert et al. 2014) for StarBEAST2 (Ogilvie et al. 2017). 
 For best results, species assignments in the assignment file should be given as simple
 alphanumeric names with no spaces, hyphens, underscores, or nonalphanumeric characters
 (e.g. the assignment 'unimaculatus' gave no errors in testing).

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f renameForStarBEAST2 --args='-f phylip -a assignment.txt'

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 Created by Justin Bagley on Tue, Mar 5 11:32:42 CST 2019.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'f:a:' opt ; do
  case $opt in
## renameForStarBEAST2 options:
    f) MY_INPUT_FILE_TYPE=$OPTARG ;;
    a) USER_SPEC_ASSIGNMENT_FILE=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
renameForStarBEAST2

# Exit cleanly
safeExit