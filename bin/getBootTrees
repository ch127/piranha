#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: getBootTrees.sh                                                                  #
  VERSION="v1.0.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on/before August 20, 2017.                              #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2017-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT AUTOMATES ORGANIZING BOOTSTRAP TREES OUTPUT BY RAxML RUNS CONDUCTED  #
# IN CURRENT WORKING DIRECTORY USING MAGNET                                              #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




getBootTrees () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | getBootTrees, v1.0.0 March 2019  (part of PIrANHA v0.3a2)"
echo "INFO      | $(date) | Copyright (c) 2017-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting getBootTrees script... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Run main getBootTrees script. "
echo "INFO      | $(date) |          Organizing bootstrap trees and making final output file containing all trees... "
echo "INFO      | $(date) |          Making list of ML bootstrap trees generated by RAxML... "

	ls **/RAxML_bootstrap.raxml_out > bootTrees.list;

	##--Assign bootstrap tree list to variable
	MY_BOOT_TREE_LIST="$(cat ./bootTrees.list)";

	############ ORGANIZE BOOTSTRAP TREES INTO ONE LOCATION
	##--Place all inferred bootstrap tree files into a single "bootstrap_trees" folder in 
	##--working directory. However, all the boot tree files have the same name. So, in order
	##--to do this, we have to give each boot tree file a name that matches the corresponding
	##--run folder, i.e. locus. We can rename each file right after downloading it.

	mkdir ./bootstrap_trees/ ;

	echo "INFO      | $(date) |          Copying *ALL* ML bootstrap trees to 'bootstrap_trees' folder in current directory for post-processing..."
	(
		for j in ${MY_BOOT_TREE_LIST}; do
			echo "$j";
			cp "$j" ./bootstrap_trees/ ;
			MY_LOCUS_NAME="$(echo $j | sed 's/\/[A-Za-z.\_\-]*//g')";
			cp ./bootstrap_trees/RAxML_bootstrap.raxml_out ./bootstrap_trees/"$MY_LOCUS_NAME"_RAxML_boot.tre ;
			rm ./bootstrap_trees/RAxML_bootstrap.raxml_out ;
		done
	)

	echo "INFO      | $(date) |          Making final output file containing best ML trees from all runs/loci..."
	(
		for k in ./bootstrap_trees/*; do
			echo "$k";
			cat "$k" >> ./boottrees.tre ;
		done
	)

	echo "INFO      | $(date) |          Making final list of ML bootstrap trees in bootstrap_trees directory..."
	ls ./bootstrap_trees/*.tre > final_bootTrees.list ;
 
#echo "INFO      | $(date) | Done collating ML bootstrap trees from all RAxML runs (independent sub-folders of pwd) run using getBootTrees.sh."
#echo "INFO      | $(date) | Bye.
#"
echo "----------------------------------------------------------------------------------------------------------"
echo "output file(s)/folder(s): ./boottrees.tre "
echo "                          ./final_bootTrees.list "
echo "                          ./bootstrap_trees/ "
echo ""


##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
# None at this time.

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT was designed to run in a current working directory where the MAGNET pipeline
 in PIrANHA v0.3a2 (Bagley 2019) has been run to estimate maximum-likelihood (ML) gene trees 
 in RAxML v8+ (Stamatakis 2014) for a set of loci from DNA sequence data. Given such a 
 workspace, this script organizes the bootstrap trees resulting from all RAxML runs, in
 subfolders of the current directory. The getBootTrees function is already run during the
 MAGNET pipeline, by default, so users will likely not need to run getBootTrees from this
 standalone function. However, this function may be useful in summarizing bootstrap trees 
 from a set of RAxML subfolders when MAGNET has not been run. For example, if you wrote your
 own code to run RAxML in multiple subfolders of a given directory, then you could use 
 getBootTrees to summarize the bootstrap trees and quit.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or
 Linux (tested on CentOS 6/7). There are no other dependencies.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f getBootTrees  			    Run the software
    piranha -f getBootTrees --args='-h'      Print this help text

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a2. GitHub repository, Available at:
	<https://github.com/justincbagley/PIrANHA>.
 Stamatakis, A. 2014. RAxML version 8: a tool for phylogenetic analysis and post-analysis of 
	large phylogenies. Bioinformatics, 30, 1312-1313.

 Created by Justin Bagley on Wed, Mar 6 09:57:26 CST 2019.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
getBootTrees

# Exit cleanly
safeExit
