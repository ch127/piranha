#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: BEASTReset.sh                                                                    #
  VERSION="v1.0.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Thu, 24 Aug 2017 11:30:42 -0400.                     #
# Last update: March 20, 2019                                                            #
# Copyright (c) 2017-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT AUTOMATING RESETTING THE RANDOM STARTING SEEDS FOR n SHELL SCRIPTS        #
# CORRESPONDING TO n BEAST RUNS (SETUP IN A SERIES OF n RUN FOLDERS) DESTINED FOR A      #
# REMOTE SUPERCOMPUTER                                                                   #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




BEASTReset () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | BEASTReset, v1.0.0 March 2019  (in PIrANHA v0.2-alpha.1c)      "
echo "INFO      | $(date) | Copyright (c) 2017-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting BEASTReset pipeline... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Run BEASTReset with slightly different options, depending on whether machine is mac or Linux. "

if [[ "${machine}" = "Mac" ]]; then

####### CASE 1: LOCAL MACHINE - ONLY FIX SUBMISSION SCRIPTS BY CHANGING RANDOM SEEDS:

####### RUN LOCALLY:
(
	cat "$MY_RERUN_DIR_LIST" | while read i; do 
		cd "$i"; 
		echo "$i"; 
			j=./"$MY_RUN_SCRIPT" ;
			MY_RANDOM_SEED="$(python -c 'import random; print random.randint(10000,100000000000)')"; 
			echo "$MY_RANDOM_SEED" 
			sed -i '' "s/\-seed\ [0-9]*\ /\-seed\ $MY_RANDOM_SEED\ /" "$j" ; 
		cd ..; 
	done
)

fi

## Example of the line above, as bash one-liner, using a specific $MY_RERUN_DIR_LIST list file name:
## (
## cat newseed_redo_dir_list_mycompu.txt | while read i; do cd "$i";  echo "$i";  j=./beast_pbs.sh; MY_RANDOM_SEED="$(python -c 'import random; print random.randint(10000,100000000000)')";  echo $MY_RANDOM_SEED;  sed -i '' "s/\-seed\ [0-9]*\ /\-seed\ $MY_RANDOM_SEED\ /" "$j";  cd ..;  done
## )


####### CASE 2: SUPERCOMPUTER ENVIRONMENT - FIX SUBMISSION SCRIPTS AND RUN THEM ON THE SUPERCOMPUTER,
####### EXPECTING DIFFERENT INPUT FILENAMES/FORMATS VARYING BY MANAGEMENT SYSTEM (PBS or SLURM):

if [[ "${machine}" = "Linux" ]] && [[ "$MY_SC_MANAGEMENT_SYS" = "PBS" ]]; then

####### RUN ON LINUX SUPERCOMPUTER WITH TORQUE/PBS MANAGER:
(
	cat "$MY_RERUN_DIR_LIST" | while read i; do 
		cd "$i"; 
		echo "$i"; 
			j=./"$MY_RUN_SCRIPT" ;
			MY_RANDOM_SEED="$(python -c 'import random; print random.randint(10000,100000000000)')"; 
			echo "$MY_RANDOM_SEED"
			sed -i "s/\-seed\ [0-9]*\ /\-seed\ $MY_RANDOM_SEED\ /" "$j"; 

			qsub ./"$MY_RUN_SCRIPT"

		cd ..; 
	done
)

fi


if [[ "${machine}" = "Linux" ]] && [[ "$MY_SC_MANAGEMENT_SYS" = "SLURM" ]]; then

####### RUN ON LINUX SUPERCOMPUTER WITH SLURM MANAGER:
(
	cat "$MY_RERUN_DIR_LIST" | while read i; do 
		cd "$i"; 
		echo "$i"; 
			j=./"$MY_RUN_SCRIPT" ;
			MY_RANDOM_SEED="$(python -c 'import random; print random.randint(10000,100000000000)')"; 
			echo "$MY_RANDOM_SEED" 
			sed -i "s/\-seed\ [0-9]*\ /\-seed\ $MY_RANDOM_SEED\ /" "$j"; 

			sbatch ./"$MY_RUN_SCRIPT"

		cd ..; 
	done
)

fi

echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_RERUN_DIR_LIST=list.txt
MY_RUN_SCRIPT=beast_pbs.sh
MY_SC_MANAGEMENT_SYS=PBS

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   rerunList (def: $MY_RERUN_DIR_LIST) name of BEAST run sub-folders that need to be reset/rerun
  -s   scriptName (def: $MY_RUN_SCRIPT) name of shell/bash run submission script (must be the
       same for all runs, or entered with wildcards to accommodate all names used, e.g. 'beast*.sh')
  -m   manager (def: $MY_SC_MANAGEMENT_SYS; other: SLURM) name of scheduling and resource manager system on the 
       supercomputer
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THI SCRIPT expects to start from a set of BEAST run sub-folders in the current working 
 directory. Each sub-folder will correspond to a run that has been (or will be) submitted 
 to a remote supercomputing cluster with a Linux operating system, and either a TORQUE/PBS 
 or SLURM scheudling and resource management system. As a consequence, each run sub-folder
 will contain a run submission shell script for queuing on the supercomputer. BEASTReset 
 saves the user time by automating the resetting of the random starting number seeds in 
 each submission shell script. 
 	This script accepts as mandatory input the name of the <workingDir> where the program 
 should be run. The main options determining the form of a run is the -i flag, which takes 
 the name of a list file (e.g. 'list.txt' by default) containing names of sub-folders to be 
 analyzed, one per line; and the -s flag, which specifies the name of the submission 
 shell scripts (which must all be the same, or be entered with wildcards to accomodate all 
 names used, e.g. 'beast*.sh'). These options are critical for customizing the run. The -m 
 flag tells the program whether the supercomputer uses a TORQUE/PBS or SLURM manager; if 
 '-mPBS', the shell scripts must have PBS format (be queable using qsub); if '-mSLURM', the 
 shell scripts must have SBATCH format.
	After detecting the local computing environment with the uname utility, BEASTReset.sh
 will perform one of two general operations, with two sub-options (a or b). (1a) If the 
 environment is Mac OS X and no list of sub-folders is provided, then the script assumes the 
 environment is the user's local Mac machine, and it goes through all sub-folders, looks for 
 the submission script (-s flag), and then resets the seed in each script. In a similar case, 
 the script (1b) accepts the list of sub-folders that failed (specified using the -i flag) 
 and only modifies shell scripts in this list file. Alternatively, (2a) if the environment 
 is Linux and no list file is specified, then the script assumes the environment is the remote 
 supercomputer, and it will go through all sub-folders and reset the seed in each submission 
 script (-s flag). Again, the script will also (2b) accept a list of sub-folders that failed 
 (-i flag), which must contain paths to run sub-folders on the supercomputer, with on path 
 per line). 
	Currently, the only dependency for BEASTReset is Python v2.7++ or v3.5++. BEASTReset is
 part of the PIrANHA software repository (Bagley 2019). See the BEASTReset and PIrANHA 
 README files for additional information.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:
 
    piranha -f BEASTReset			   Run in current working directory
    piranha -f BEASTReset --args='-i <rerunList> -s <scriptName>'	Run with options
    piranha -f BEASTReset --args='-h'	  Print help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 Created by Justin Bagley on Thu, 24 Aug 2017 11:30:42 -0400.
 Copyright (c) 2017-2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:s:m:' opt ; do
  case $opt in
## BEASTReset options:
    i) MY_RERUN_DIR_LIST=$OPTARG ;;
    s) MY_RUN_SCRIPT=$OPTARG ;;
    m) MY_SC_MANAGEMENT_SYS=$OPTARG ;;

## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
BEASTReset

# Exit cleanly
safeExit
