#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: taxonCompFilter.sh                                                               #
  export VERSION="v1.0.4"                                                                #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Fri, Mar 15 11:20:02 CDT 2019.                       #
# Last update: December 15, 2020                                                         #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description: Taxon completeness filter. Starts from a set of PHYLIP gene multiple      #
# sequence alignments (MSAs) in current working directory and filters out alignments not #
# meeting a user-specified taxonomic sampling threshold.                                 #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()




taxonCompFilter () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | taxonCompFilter, v1.0.4 December 2020                          "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting taxonCompFilter analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
checkMachineType


############ OPTIONAL OUTPUT TO FILE
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH"
	exec 2>&1
fi


###### RUN TAXON COMPLETENESS FILTER.
echo "INFO      | $(date) | Step #2: Interpret threshold criterion and then run taxon completeness filter. "
echo "INFO      | $(date) | Checking the following loci: "

	## Convert user-specified taxonomic completeness threshold from decimal to whole 
	## number for testing:
	MY_THRESH_CRIT_RAW="$(calc ${MY_NUM_TAX}*${USER_TAX_COMP_THRESHOLD})"
	MY_THRESH_CRIT_RAW_FRACTIONAL="$(echo $MY_THRESH_CRIT_RAW | sed 's/.*\.//g')"
	if [[ "$MY_THRESH_CRIT_RAW_FRACTIONAL" -eq "5" ]] || [[ "$MY_THRESH_CRIT_RAW_FRACTIONAL" -eq "50" ]]; then
		MY_THRESH_CRIT="$(calc $MY_THRESH_CRIT_RAW-0.5 | sed 's/\..*//g')"
		echo "INFO      | $(date) | Using critical threshold of $MY_THRESH_CRIT. "
	else
		MY_THRESH_CRIT="$(awk  'BEGIN { rounded = sprintf("%.0f", '$MY_NUM_TAX'*'$USER_TAX_COMP_THRESHOLD'); print rounded }')"
		echo "INFO      | $(date) | Using critical threshold of $MY_THRESH_CRIT. "
	fi

		mkdir filter_"$USER_TAX_COMP_THRESHOLD"/ ;

count=1
(
	for i in ./*.phy; do
		## Loop through each MSA; save it into a temporary file msa.tmp or "$MY_PHY_BASENAME".tmp:
#		echo "INFO      | $(date) | Count: $((count++)) "
		echo "INFO      | $(date) | ###--------------   $((count++)). $i   --------------###"
		MY_PHY_BASENAME="$(basename $i .phy)"
		cp "$i" "$MY_PHY_BASENAME".tmp ;
#
		MY_PHY_NLINES="$(awk 'END {print NR,"lines"}' ${MY_PHY_BASENAME}.tmp | sed 's/\ .*//g')"; 
		MY_CORR_PHY_NLINES="$(calc $MY_PHY_NLINES - 1)";
#
		if [[ "${machine}" = "Mac" ]]; then
			## Remove _[01], spaces after tip taxon names, and all sequences:
			sed -i.bak 's/\ .*//g' "$MY_PHY_BASENAME".tmp ;
			sed -i.bak 's/\_[01]$//g' "$MY_PHY_BASENAME".tmp ;
			sed -i.bak '1d' "$MY_PHY_BASENAME".tmp ;
			rm ./*.bak ;
		fi

		if [[ "${machine}" = "Linux" ]]; then
			## Remove _[01], spaces after tip taxon names, and all sequences:
			sed -i 's/\ .*//g' "$MY_PHY_BASENAME".tmp ;
			sed -i 's/\_[01]$//g' "$MY_PHY_BASENAME".tmp ;
			sed -i '1d' "$MY_PHY_BASENAME".tmp ;
		fi
#
		## Count number of nonredundant taxa, our metric for applying the user-specified 
		## taxonomic completeness threshold:
		echo "INFO      | $(date) | Counting nonredundant taxa... "
		MY_NUM_NONREDUND_TAX="$(sort -u "$MY_PHY_BASENAME".tmp | wc -l | perl -pe 's/\ //g')";
		echo "INFO      | $(date) | Num. nonredundant taxa: $MY_NUM_NONREDUND_TAX "
#
#		## Convert user-specified taxonomic completeness threshold from decimal to whole 
#		## number for testing:
#		MY_THRESH_CRIT_RAW="$(calc ${MY_NUM_TAX}*${USER_TAX_COMP_THRESHOLD})"
#		MY_THRESH_CRIT_RAW_FRACTIONAL="$(echo $MY_THRESH_CRIT_RAW | sed 's/.*\.//g')"
#		if [[ "$MY_THRESH_CRIT_RAW_FRACTIONAL" -eq "5" ]] || [[ "$MY_THRESH_CRIT_RAW_FRACTIONAL" -eq "50" ]]; then
#			MY_THRESH_CRIT="$(calc $MY_THRESH_CRIT_RAW-0.5 | sed 's/\..*//g')"
#			echo "INFO      | $(date) | Using critical threshold of $MY_THRESH_CRIT. "
#		else
#			MY_THRESH_CRIT="$(awk  'BEGIN { rounded = sprintf("%.0f", '$MY_NUM_TAX'*'$USER_TAX_COMP_THRESHOLD'); print rounded }')"
#			echo "INFO      | $(date) | Using critical threshold of $MY_THRESH_CRIT. "
#		fi
#
		echo "INFO      | $(date) | Checking against user-specified criterion... "
		if [[ "$MY_NUM_NONREDUND_TAX" -ge "$MY_THRESH_CRIT" ]]; then
			cp "$i" filter_"$USER_TAX_COMP_THRESHOLD"/ ;
			echo "INFO      | $(date) | Kept."
		else
			echo "INFO      | $(date) | Not kept."
		fi	
#
		if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
			rm ./*.tmp ; 
		fi
#		echo "Count: $((count++)) "
	done
)



###### EVALUATE RESULTS AND CLEAN UP THE WORKSPACE AS NEEDED.
echo "INFO      | $(date) | STEP #3: SUMMARIZE RESULTS AND CLEAN UP WORKSPACE. "

	cd filter_"$USER_TAX_COMP_THRESHOLD"/;
	MY_NUM_KEPT_ALIGNS="$(ls . | wc -l)"
	echo "INFO      | $(date) | Saved $MY_NUM_KEPT_ALIGNS multiple sequence alignments meeting threshold to filter_${USER_TAX_COMP_THRESHOLD}/ subfolder. "


echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_UNPHASED_SEQS_SWITCH=1
MY_PHASED_SEQS_SWITCH=0
MY_OUTPUT_FILE_SWITCH=NULL
MY_NUM_TAX=NULL
USER_TAX_COMP_THRESHOLD=0.7

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -u   unphased (def: 1, true; other: 0, false) whether or not input PHYLIP alignments 
       contain unphased DNA sequences.
  -p   phased (def: 0, false; other: 1, true) whether or not input PHYLIP alignments contain
       phased DNA sequences.
  -o   outputFile (def: NULL) send all output (stdout and stderr) to file in <workingDir> with 
       this name, for example 'output.txt'.
  -n   numTax (def: NULL) mandatory number of tip taxa in the dataset.
  -t   taxCompThresh (def: 0.7) mandatory taxonomic completeness threshold, given as decimal 
       percentage of taxa; alignments with greater than or equal to this % of taxa are kept
  -h   help text (also: -help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 STARTING FROM a current working directory, <workingDir>, containing a set of multiple \
 sequence alignments (MSAs) in PHYLIP format (Felsenstein 2002), this script runs in <workingDir> 
 and takes as mandatory input 

 - the number of taxa, <numTax>, passed with the -n flag, and
 - a taxonomic completeness threshold given as a float (decimal) equivalent of percentage 
   (<taxCompThresh>, passed with -t flag; e.g. 0.75 = 75%).
 
 Given these inputs, the script loops through the MSAs and keeps only those alignments 
 meeting the user-specified taxonomic completeness threshold <taxCompThresh>; alignments that
 pass this filter are saved to an output subfolder of <workingDir>, while those that fail to
 pass this filter are simply not included.
	This script accommodates both unphased and phased MSAs. However, it is expected that 
 phased MSAs will contain phased haplotype designations of '_0' for first phased haplotype  
 and '_1' for second phased haplotype (with maximum of two phased haplotypes). The _0 and 
 _1 phased designations are common to software and pipelines for phasing MSAs. However, 
 this script was created with pipelines for processing genome-scale target enrichment (e.g. 
 ultraconserved elements; UCE) or hybrid enrichment data in mind, and has been specifically
 written and tested to handle phased PHYLIP MSAs output from PHYLUCE (Faircloth 2015) and 
 SECAPR (Andermann et al. 2018). 
	Taxon names must not have terminated in _0 or _1 prior to phasing (this would give phased 
 taxon names ending in '_0_0' or '_0_1' in the alignments, which could cause errors).
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage as obtained by running the script with the -h flag, and has been 
 tested on macOS High Sierra (v10.13+) but will work on many earlier versions or Linux. 
 Phased PHYLIP alignments from other UCE or NGS pipelines may work if they are made to 
 conform to the expected taxon names formatting described above. PHYLIP filenames and taxon 
 names should not include spaces, or else there will be issues. 

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f taxonCompFilter -p 1 -n <numTaxa> -t <taxCompThresh>     Generic usage with arguments
    piranha -f taxonCompFilter -p 1 -n 43 -t 0.75                       Empirical 75% taxon sampling example
    piranha -f taxonCompFilter -h                                       Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Andermann, T., Cano, Á., Zizka, A., Bacon, C., & Antonelli, A. 2018. SECAPR—a bioinformatics 
	pipeline for the rapid and user-friendly processing of targeted enriched Illumina sequences, 
	from raw reads to alignments. PeerJ, 6, e5175.
 Faircloth, B.C. 2015. PHYLUCE is a software package for the analysis of conserved genomic 
	loci. Bioinformatics, 32(5), 786-788.
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Fri, Mar 15 11:20:02 CDT 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'u:p:o:n:t:' opt ; do
  case $opt in
## taxonCompFilter options:
    u) MY_UNPHASED_SEQS_SWITCH=$OPTARG ;;
    p) MY_PHASED_SEQS_SWITCH=$OPTARG ;;
    o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
    n) MY_NUM_TAX=$OPTARG ;;
    t) USER_TAX_COMP_THRESHOLD=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
taxonCompFilter

# Exit cleanly
safeExit
