#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: PHYLIPsubsampler.sh                                                              #
  VERSION="v1.1.4"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, 19 Feb 2019 22:36:23 -0600.                     #
# Last update: March 15, 2019                                                            #
# Copyright (c) 2019 Justin C. Bagley. All rights reserved.                              #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT AUTOMATES SUBSAMPLING EACH OF ONE TO MULTIPLE PHYLIP ALIGNMENT       #
# FILES DOWN TO ONE (RANDOM) SEQUENCE PER SPECIES (FOR SPECIES TREE ANALYSIS)            #
#                                                                                        #
##########################################################################################

## TODO: Compare with dropRandomHap script; if highly overlapping and non-complementary, 
## then decide on one and keep it, remove the other, and develop the one you kept further.

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




PHYLIPsubsampler () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | PHYLIPsubsampler, v1.1.4 March 2019  (in PIrANHA v0.2-alpha.2)"
echo "INFO      | $(date) | Copyright (c) 2019 Justin C. Bagley. All rights reserved.      "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting PHYLIPSubsampler analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


###### FILE PROCESSING
echo "INFO      | $(date) | Step #2: Conduct main PHYLIP file processing steps. "
## If INPUT_PHYLIP_FILE is 'NULL' (not given or changed by user), then use MY_ASSIGNMENT_FILE
## that is read in and conduct subsampling as usual on all PHYLIP alignments (i.e. in
## variable $MY_PHYLIP_ALIGNMENTS) within the current working dir.

if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]]; then

MY_PHYLIP_ALIGNMENTS=./*.phy ;
(
	for i in $MY_PHYLIP_ALIGNMENTS; do 
		LOCUS_NAME="$(echo $i | sed 's/\.\///g; s/\.phy//g; s/\/$//g')";
		echo "$LOCUS_NAME";

			head -n+1 "$i" > ./head.tmp; 

			count=1
			while read j; do
				grep "$(echo $j)" "$i" | head -n1 > ./ind"$count".tmp;
				COUNT_PLUS_ONE="$((count++))";
			done < "$MY_ASSIGNMENT_FILE"

			(
				for k in ./ind*.tmp; do  
					if [[ "$(wc -c $k | sed 's/\.\/.*//g')" -gt "0" ]]; then 
					echo OK >> check.tmp; 
					fi; 
				done
			)

			MY_NUMTAX="$(wc -l ./check.tmp | sed 's/\ \.\/.*//g; s/\ //g')";
			MY_NUMCHAR="$(cat head.tmp | sed 's/^[0-9]*\ //g')";
			echo "$MY_NUMTAX   $MY_NUMCHAR" > ./new_head.tmp ;

		rm "$i";
		cat ./new_head.tmp ./ind*.tmp > "$LOCUS_NAME".phy;
		rm ./*.tmp;

		while read j; do
			if [[ "${machine}" = "Mac" ]]; then
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
			fi

			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
			fi
		done < "$MY_ASSIGNMENT_FILE"

	done
)

fi



## If INPUT_PHYLIP_FILE is given or changed by user (not NULL), then use MY_ASSIGNMENT_FILE
## that is read in and conduct subsampling only on the alignment in $INPUT_PHYLIP_FILE, 
## which must be within the current working dir. This analysis will only subset one file.

if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]]; then

(
	for i in $INPUT_PHYLIP_FILE; do 
		LOCUS_NAME="$(echo $i | sed 's/\.\///g; s/\.phy//g; s/\/$//g')";
		echo "$LOCUS_NAME";

			head -n+1 "$i" > ./head.tmp; 

			count=1
			while read j; do
			# echo "$j"
			grep "$(echo $j)" "$i" | head -n1 > ./ind"$count".tmp;
			COUNT_PLUS_ONE="$((count++))";
			done < "$MY_ASSIGNMENT_FILE"

			(
				for k in ./ind*.tmp; do  
					if [[ "$(wc -c $k | sed 's/\.\/.*//g')" -gt "0" ]]; then 
					echo OK >> check.tmp; 
					fi; 
				done
			)

			MY_NUMTAX="$(wc -l ./check.tmp | sed 's/\ \.\/.*//g; s/\ //g')";
			MY_NUMCHAR="$(cat head.tmp | sed 's/^[0-9]*\ //g')";
			echo "$MY_NUMTAX   $MY_NUMCHAR" > ./new_head.tmp ;

		rm "$i";
		cat ./new_head.tmp ./ind*.tmp > "$LOCUS_NAME".phy;
		rm ./*.tmp;

		while read j; do
			if [[ "${machine}" = "Mac" ]]; then
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i '' 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
			fi

			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
				sed -i 's/\('$j'\)-[0-9\ ]*/\1\ \ \ \ \ \ /g' "$LOCUS_NAME".phy;
			fi
		done < "$MY_ASSIGNMENT_FILE"

	done
)

fi


#echo "INFO      | $(date) | Done."
#echo "INFO      | $(date) | Bye.
#"

echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
INPUT_PHYLIP_FILE=NULL
MY_ASSIGNMENT_FILE=assignments.txt

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputPHYLIP (def: NULL) Used in case of subsampling a single input PHYLIP file; 
       otherwise, left blank when analyzing multiple PHYLIP files (default)
  -a   assignmentFile (def: $MY_ASSIGNMENT_FILE) Name of assignment file containing four-letter
       population or taxon assignment codes, one per line
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THE SCRIPT runs in the current working directory, <workingDir>, where there exists one
 sequential PHYLIP (Felsenstein 2002) file or multiple sequential PHYLIP files that you 
 want to subsample, keeping one random (first) sequence per population or species. This 
 is very useful when you need to subsample one or more datasets to conduct single-tip 
 phylogenetic analyses, for example when (1) estimating 1-tip-per-species gene trees for 
 species tree reconstruction, or (2) when you will use the PHYLIP files to directly estimate 
 the species tree. In the first case, with one input PHYLIP file, you must use -i <inputPHYLIP>.
	The populations or species are contained in an assignment file, which is passed to the
 program using the -a flag. Sequence names should not include space or underline characters, 
 or there could be issues. Also, PHYLIP alignment files must have the extension '.phy'. 
 _Interleaved PHYLIP format is not supported._

 ${bold}DETAILS${reset}
 The -i flag supplies the name of a single input PHYLIP file in the current <workingDir> 
 for analysis. If this flag is not used, then the program will assume that multiple PHYLIP files
 are present in <workingDir> and will attempt to subsample all of them. This is useful when
 you want to subsample a single PHYLIP file for single-tip phylogenetic analyses, for example
 during species tree reconstruction.
 
 The -a flag allows users to specify an assignment file. This file must contain a 
 single, four-letter population or taxon assignment code on each line, which corresponds to  
 the first four letters of each taxon/sequence label in (each of) the PHYLIP file(s). In each
 PHYLIP file, the four-letter code must be followed by a dash (text en dash) character,
 which can be followed by any numeric string. The specificity of this format limits the
 generality of the script, necessitating that the user ensure that all individual sequence/
 taxon names fit the required format. However, the required format is in and of itself very
 simple; an example of a 'legal' taxon/sequence label would be 'Pibf-15', where 'Pibf' is a
 four-letter code representing the species in question and '15' refers to the 15th sequenced
 individual. The default name for the assignment file is 'assignments.txt', which will be 
 expected if no assignment file is specified using the -a flag.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f PHYLIPsubsampler --args='-a species.txt'    Run on multiple PHYLIP files with user-
             											   specified assignment file 'species.txt'

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 19 Feb 2019 22:36:23 -0600.
 Copyright (c) 2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'i:a:' opt ; do
  case $opt in
## PHYLIPSubsampler options:
    i) INPUT_PHYLIP_FILE=$OPTARG ;;
    a) MY_ASSIGNMENT_FILE=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done

# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
PHYLIPsubsampler

# Exit cleanly
safeExit
