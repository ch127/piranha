#!/bin/bash

##########################################################################################
#                            FASTA2PHYLIP v1.0, February 2019                            #
#  SHELL SCRIPT TO CONVERT ONE OR MULTIPLE FASTA-FORMATTED DNA SEQUENCE ALIGNMENTS INTO  #
#  SEQUENTIAL PHYLIP FORMATTED ALIGNMENTS                                                #
#  Copyright Â©2019 Justinc C. Bagley. For further information, see README and license    #
#  available at https://github.com/justincbagley/Anoura-UCE-Phylogenomics-Project/. Last #
#  update: February 23, 2019. For questions, please email bagleyj@umsl.edu.              #
##########################################################################################

############ SCRIPT OPTIONS
STARTING_FILE_TYPE=1
KEEP_MOD_FASTA_SWITCH=NULL
MY_OUTPUT_FILE_SWITCH=NULL
MY_QUIET_RUN_SWITCH=NULL

############ CREATE USAGE & HELP TEXTS
Usage="Usage: $(basename $0) [Help: -h help] [Options: -f k o q] [stdin:] <inputFile> [or] <workingDir> 
 ## Help:
  -h   help text (also: -help)

 ## Options:
  -f   fileType (def: 1; 1/o = single <inputFile>, 2/a = multiple FASTA files) starting file
       type; if 1 or 'o' ('one'), script expects as stdin the name of a single FASTA <inputFile>
       in current working directory; if 2 or 'a' ('all'), then script expects <workingDir> 
       with multiple FASTA files
  -k   keepModifiedFASTA (def: NULL; 1, keep intermediate non-wrapped, sequential FASTA
       file(s) generated by the program) whether or not to keep intermediate FASTAs from 
       which any text wrapping has been removed (leaving 1 sequence/line)
  -o   outputFile (def: NULL) send all output (stdout and stderr) to file with this name (for
       example, 'output.txt') in current directory (-f 1; see below) or <workingDir> (-f 2).
  -q   quiet (def: NULL; 1 = turned on) if 1, mutes all output of the program using redirection,
       thus should not be used with -o flag

  This script expects FASTA files with extension '.fasta', and -f 1 always runs in the directory
  where you are executing this script, or in your case: 

  Current directory: $PWD

 ## Example usage:
  Example #1: quiet run on a single FASTA file (-f 1):
  ./FASTA2PHYLIP -f 1 -q 1 locus115.fasta .
  
  Example #2: quiet run on multiple FASTA files in <workingDir> (-f 2):
  ./FASTA2PHYLIP -f 2 -q 1 .
  ./FASTA2PHYLIP -f 2 -q 1 ~/PATH/TO/RUN/FOLDER
"


if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$Usage"
	exit
fi

############ PARSE THE OPTIONS
while getopts 'f:k:o:q:' opt ; do
  case $opt in
## FASTA2PHYLIP options:
    f) STARTING_FILE_TYPE=$OPTARG ;;
    k) KEEP_MOD_FASTA_SWITCH=$OPTARG ;;
    o) MY_OUTPUT_FILE_SWITCH=$OPTARG ;;
    q) MY_QUIET_RUN_SWITCH=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$Usage" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$Usage" >&2
       exit 1 ;;
  esac
done

############ Skip processed options, check for mandatory positional parameters
shift $((OPTIND-1)) 
if [ $# -lt 1 ]; then
	echo "WARNING!  | $(date) |          Missing one or more mandatory positional parameters. Quitting... "
	echo "$Usage"
  exit 1
fi


# echo "
# ##########################################################################################
# #                            FASTA2PHYLIP v1.0, February 2019                            #
# ##########################################################################################
# "

######################################## START ###########################################
###### OUTPUT OPTION 1: SEND OUTPUT TO FILE.
# exec >> ./output.txt 
# exec 2>&1
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH"
	exec 2>&1
fi
###### OUTPUT OPTION 2: QUIET MODE.
if [[ "$MY_QUIET_RUN_SWITCH" = "1" ]]; then
	exec > /dev/null
	exec 2>&1
fi

###### SET UP ENVIRONMENT BY CREATING USEFUL VARIABLES AND FUNCTIONS.
	CR=$(printf '\r');
	calc () {
	bc -l <<< "$@" 
}

###### RUN FASTA2PHYLIP FUNCTION.

############################## IF -f 1: SINGLE FILE RUN ##################################
##########################################################################################

#######
if [[ "$STARTING_FILE_TYPE" = "1" ]] || [[ "$STARTING_FILE_TYPE" = "s" ]] || [[ "$STARTING_FILE_TYPE" = "single" ]] || [[ "$STARTING_FILE_TYPE" = "o" ]] || [[ "$STARTING_FILE_TYPE" = "one" ]]; then

	## Read fasta as input (mandatory positional parameter $1), and move into environmental 
	## variable $i:
	i="$1";

	## Get FASTA basename:
	MY_BASENAME="$(basename $i .fasta)";

	## Convert wrapped FASTA to non-wrapped, FASTA-formatted text tmp file:
	perl -pe $'s/([A-Za-z\-\?])$\n/$1/g' "$i" | perl -pe 's/\>/\n\>/g' | \
	sed '/^[[:space:]]*$/d' > "$MY_BASENAME"_nonwrap.fasta.tmp;
	j="$MY_BASENAME"_nonwrap.fasta.tmp;

## if desired, save nonwrap.fasta file, or overwrite original fasta file with it, since having 
## sequences in 1-per-line format is desirable.
	
	## Collect info for PHYLIP file, and make PHYLIP header
	MY_NTAX="$(grep -n '>[A-Za-z0-9\-\_]' $j | wc -l | sed 's/\ //g')";
	MY_NCHAR="$(head -n2 $j | tail -n+2 | wc -c | sed 's/\ //g')";
	MY_CORR_NCHAR="$(calc $MY_NCHAR-1)";
	header="$(echo $MY_NTAX $MY_CORR_NCHAR)";
	
	## convert FASTA sequences, taking up 2 lines per individual, to PHYLIP format, taking
	## up only one line per individual with no "\>" characters and spaces between the tip
	## taxon names and corresponding sequences.
	if [[ "$MY_CORR_NCHAR" -lt "2000" ]]; then

		perl -pe $'s/\>(.*)$\n/$1/g' "$j" | column -t > "$MY_BASENAME".phy.tmp;
		echo "$header" | cat - "$MY_BASENAME".phy.tmp > "$MY_BASENAME".phy;

	elif [[ "$MY_CORR_NCHAR" -gt "2000" ]]; then

		perl -pe $'s/\>(.*)$\n/$1/g' "$j" > "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp;
		awk 'NR==FNR{for(i=1;i<=NF;i++) 
			max[i] = length($i) > max[i] ? length($i) : max[i]; next} 
			{ for(i=1;i<=NF;i++) printf "%-"max[i]"s  ", $i; printf "\n"}' "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp > "$MY_BASENAME".phy.tmp;
		echo "$header" | cat - "$MY_BASENAME".phy.tmp > "$MY_BASENAME".phy;

	fi
#	
	if [[ "$KEEP_MOD_FASTA_SWITCH" = "1" ]] || [[ ! "$KEEP_MOD_FASTA_SWITCH" = "NULL" ]]; then

		mv "$MY_BASENAME"_nonwrap.fasta.tmp "$MY_BASENAME"_nonwrap.fasta;

	elif [[ "$KEEP_MOD_FASTA_SWITCH" = "NULL" ]]; then

		rm "$MY_BASENAME"_nonwrap.fasta.tmp;

	fi
	
	
	rm ./*.tmp;

fi
#######

############################# IF -f 2: MULTIPLE FILE RUN #################################
##########################################################################################

if [[ "$STARTING_FILE_TYPE" = "2" ]] || [[ "$STARTING_FILE_TYPE" = "a" ]] || [[ "$STARTING_FILE_TYPE" = "all" ]]; then

USER_SPEC_PATH="$1"

############ Set workingDir
if [[ "$USER_SPEC_PATH" = "$(printf '%q\n' "$(pwd)")" ]] || [[ "$USER_SPEC_PATH" = "." ]]; then
	#MY_CWD=`pwd -P`
	MY_CWD="$(printf '%q\n' "$(pwd)" | sed 's/\\//g')"
	echo "INFO      | $(date) |          Setting working directory to:  "
	echo "$MY_CWD "
elif [[ "$USER_SPEC_PATH" != "$(printf '%q\n' "$(pwd)")" ]]; then
	if [[ "$USER_SPEC_PATH" = ".." ]] || [[ "$USER_SPEC_PATH" = "../" ]] || [[ "$USER_SPEC_PATH" = "..;" ]] || [[ "$USER_SPEC_PATH" = "../;" ]]; then
		cd ..;
		MY_CWD="$(printf '%q\n' "$(pwd)" | sed 's/\\//g')"
	else
		MY_CWD=$USER_SPEC_PATH
		echo "INFO      | $(date) |          Setting working directory to user-specified dir:  "	
		echo "$MY_CWD "
		cd "$MY_CWD"
	fi
else
	echo "WARNING!  | $(date) |          Null working directory path. Quitting... "
	exit 1
fi



(
	for i in ./*.fasta; do
	
		## Get FASTA basename:
		MY_BASENAME="$(basename $i .fasta)";

		## Convert wrapped FASTA to non-wrapped, FASTA-formatted text tmp file:
		perl -pe $'s/([A-Za-z\-\?])$\n/$1/g' "$i" | perl -pe 's/\>/\n\>/g' | \
		sed '/^[[:space:]]*$/d' > "$MY_BASENAME"_nonwrap.fasta.tmp;
		j="$MY_BASENAME"_nonwrap.fasta.tmp;

## if desired, save nonwrap.fasta file, or overwrite original fasta file with it, since having 
## sequences in 1-per-line format is desirable.
	
		## Collect info for PHYLIP file, and make PHYLIP header
		MY_NTAX="$(grep -n '>[A-Za-z0-9\-\_]' $j | wc -l | sed 's/\ //g')";
		MY_NCHAR="$(head -n2 $j | tail -n+2 | wc -c | sed 's/\ //g')";
		MY_CORR_NCHAR="$(calc $MY_NCHAR-1)";
		header="$(echo $MY_NTAX $MY_CORR_NCHAR)";
	
		## convert FASTA sequences, taking up 2 lines per individual, to PHYLIP format, taking
		## up only one line per individual with no "\>" characters and spaces between the tip
		## taxon names and corresponding sequences.
		if [[ "$MY_CORR_NCHAR" -lt "2000" ]]; then

			perl -pe $'s/\>(.*)$\n/$1/g' "$j" | column -t > "$MY_BASENAME".phy.tmp;
			echo "$header" | cat - "$MY_BASENAME".phy.tmp > "$MY_BASENAME".phy;

		elif [[ "$MY_CORR_NCHAR" -gt "2000" ]]; then

			perl -pe $'s/\>(.*)$\n/$1/g' "$j" > "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp;
			awk 'NR==FNR{for(i=1;i<=NF;i++) 
				max[i] = length($i) > max[i] ? length($i) : max[i]; next} 
				{ for(i=1;i<=NF;i++) printf "%-"max[i]"s  ", $i; printf "\n"}' "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp "$MY_BASENAME"_nonwrap.fasta.FIXED.tmp > "$MY_BASENAME".phy.tmp;
			echo "$header" | cat - "$MY_BASENAME".phy.tmp > "$MY_BASENAME".phy;

		fi
#	
		if [[ "$KEEP_MOD_FASTA_SWITCH" = "1" ]] || [[ ! "$KEEP_MOD_FASTA_SWITCH" = "NULL" ]]; then

			mv "$MY_BASENAME"_nonwrap.fasta.tmp "$MY_BASENAME"_nonwrap.fasta;

		elif [[ "$KEEP_MOD_FASTA_SWITCH" = "NULL" ]]; then

			rm "$MY_BASENAME"_nonwrap.fasta.tmp;

		fi
	
		rm ./*.tmp;

	done
)

fi
#######


#
#
#
######################################### END ############################################

exit 0

