#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: PHYLIPsummary.sh                                                                 #
  VERSION="v1.0.3"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Wed, Jun 19 14:04:27 CDT 2019.                       #
# Last update: April 13, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL FUNCTION THAT SUMMARIZES THE CHARACTERISTICS OF ONE OR MULTIPLE PHYLIP DNA       #
# SEQUENCE ALIGNMENT FILES AND SAVES RESULTS TO FILE                                     #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




PHYLIPsummary () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | PHYLIPsummary, v1.0.3 April 2020                               "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Starting PHYLIPsummary analysis... "
echo "INFO      | $(date) | Step #1: Set up workspace and set environmental variables. "
############ STEP #1: SET UP VARIABLES AND SETUP FUNCTIONS
###### Set working directory and filetypes as different variables:
echo "INFO      | $(date) |          Setting user-specified path to: "
echo "INFO      | $(date) |          $PWD "	
echo "INFO      | $(date) |          Input file: $INPUT_FILE "
echo "INFO      | $(date) |          Examining current directory, setting variables... "

#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "



echo "INFO      | $(date) | Step #2: Check and produce summaries of characteristics of input PHYLIP file(s). "
############ STEP #2: SUMMARIZE INPUT PHYLIP FILE(S)

### RUN ON SINGLE INPUT PHYLIP FILE
###
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ -s "$INPUT_PHYLIP_FILE" ]]; then
	#### Get PHYLIP characteristics:
	MY_BASENAME="$(basename "$INPUT_PHYLIP_FILE" '.phy')";
#
	MY_NCHAR="$(head -n1 "$INPUT_PHYLIP_FILE" | sed 's/[0-9]*\ //g' | sed 's/\ //g')";
	echo "$MY_NCHAR" >> ./PHYLIP_nChar.list.txt ;
#
	echo "$MY_BASENAME" >> ./PHYLIP_order.list.tmp ;
#
	MY_NTAX="$(head -n1 "$INPUT_PHYLIP_FILE" | sed 's/\ [0-9]*//g; s/\ //g')";
	echo "$MY_NTAX" >> ./PHYLIP_nTax.list.txt ;

	echo "File	nTax	nChar" > ./header.tmp ;
	paste ./PHYLIP_order.list.tmp ./PHYLIP_nChar.list.txt ./PHYLIP_nTax.list.txt > ./PHYLIP_table.tmp ;
	cat ./header.tmp ./PHYLIP_table.tmp > ./PHYLIP_Summary.txt ;
fi
###

### RUN ON MULTIPLE PHYLIP FILES
###
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
count=0
(
	for i in ./*.phy ; do
		#### Get PHYLIP characteristics:
		MY_BASENAME="$(basename "$i" '.phy')";
#
		MY_NCHAR="$(head -n1 "$i" | sed 's/[0-9]*\ //g' | sed 's/\ //g')";
		echo "$MY_NCHAR" >> ./PHYLIP_nChar.list.txt ;
#
		echo "$MY_BASENAME" >> ./PHYLIP_order.list.tmp ;
#
		MY_NTAX="$(head -n1 "$i" | sed 's/\ [0-9]*//g; s/\ //g')";
		echo "$MY_NTAX" >> ./PHYLIP_nTax.list.txt ;
		echo "Done summarizing PHYLIP file: $((count++))... ";
	done
)
#
	echo "File	nTax	nChar" > ./header.tmp ;
	paste ./PHYLIP_order.list.tmp ./PHYLIP_nChar.list.txt ./PHYLIP_nTax.list.txt > ./PHYLIP_table.tmp ;
	cat ./header.tmp ./PHYLIP_table.tmp > ./PHYLIP_Summary.txt ;

#	MY_N_PHY_FILES="$(echo "$count" )";
	MY_N_PHY_FILES="$(ls ./*.phy | wc -l | sed 's/\ //g')";
fi
###


echo "INFO      | $(date) | Step #3: Clean up workspace by removing temporary files generated during run. "
###### Remove temporary or unnecessary files created above:
	echo "INFO      | $(date) |          Removing temporary files... "
	if [[ ! -z "$(ls ./*.tmp)" ]]; then
		rm ./*.tmp ;
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.


echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ -s "$INPUT_PHYLIP_FILE" ]]; then
	echo "input PHYLIP file: $INPUT_PHYLIP_FILE "
	echo "output files: ./PHYLIP_nTax.list.txt "
	echo "              ./PHYLIP_nChar.list.txt "
	echo "              ./PHYLIP_Summary.txt "
fi
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
	echo "input PHYLIP files: $MY_N_PHY_FILES PHYLIP alignments from current directory"
	echo "output files: ./PHYLIP_nTax.list.txt "
	echo "              ./PHYLIP_nChar.list.txt "
	echo "              ./PHYLIP_Summary.txt "
fi
echo ""

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i   inputPHYLIP (def: NULL) input PHYLIP filename
  -m   multiPHYLIP (def: 0, turned off; 1, on) whether to summarize multiple PHYLIP files 
       in current working directory
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT reads one (-i flag) or multiple (-m flag) PHYLIP (Felsenstein 2002) DNA sequence 
 alignment files and produces a summary of their main characteristics, including the numbers of
 taxa (tips/sequence labels) and characters (bp), which is saved to file. Sequence names 
 should include alphanumeric, hyphen, and underscore characters but no spaces. Also, PHYLIP
 alignment files must have the extension '.phy'. Output is saved to the following files:

 - No. taxa:       PHYLIP_nTax.list.txt
 - No. characters: PHYLIP_nChar.list.txt
 - PHYLIP summary: PHYLIP_Summary.txt     (table)

	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or
 Linux (tested on CentOS 6/7). There are no other dependencies.
 
 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f PHYLIPsummary -i <inputPHYLIP>      Summarize single PHYLIP file
    piranha -f PHYLIPsummary -m 1                  Summarize multiple PHYLIP files
    piranha -f PHYLIPsummary -h                    Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, Jun 11 12:36:45 CDT 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		INPUT_PHYLIP_FILE=NULL ;
	else 
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		INPUT_PHYLIP_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MULTIPLE_PHYLIP_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-m' ./args.txt | perl -pe 's/\-m//g' | perl -pe 's/\ //g')";
		MULTIPLE_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#

# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
PHYLIPsummary

# Exit cleanly
safeExit
