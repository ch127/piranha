#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: PHYLIP2NEXUS.sh                                                                  #
  VERSION="v1.3.8"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Thu, Mar 15 15:27:49 2018 -0400.                     #
# Last update: November 13, 2020                                                         #
# Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR CONVERTING A PHYLIP-FORMATTED DNA SEQUENCE ALIGNMENT TO NEXUS FORMAT, #
# WITH OR WITHOUT PARTITIONS FROM A PARTITIONS FILE                                      #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




PHYLIP2NEXUS () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | PHYLIP2NEXUS, v1.3.8 November 2020                             "
echo "INFO      | $(date) | Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace and set environmental variables. "
############ STEP #1: SET UP VARIABLES AND SETUP FUNCTIONS
###### Set working directory and filetypes as different variables:
echoShortPWD
echo "INFO      | $(date) | Input PHYLIP file: $INPUT_PHYLIP_FILE "
echo "INFO      | $(date) | Examining current directory, setting variables... "
checkMachineType


###
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ -s "$INPUT_PHYLIP_FILE" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "0" ]]; then

	MY_PHYLIP_LENGTH="$(cat $INPUT_PHYLIP_FILE | wc -l | sed 's/(\ )*//g')";
	MY_BODY_LENGTH="$(calc $MY_PHYLIP_LENGTH - 1)";
	## This "MY_BODY_LENGTH" is number of lines comprised by sequence and eof lines; was going to call it "MY_SEQUENCE_AND_EOF_LINES" but thought that name was too long.
	tail -n$MY_BODY_LENGTH $INPUT_PHYLIP_FILE > sequences.tmp;
	MY_NTAX="$(head -n1 $INPUT_PHYLIP_FILE | sed 's/\ [0-9]*//g'| sed 's/[\]*//g')";
	MY_NCHAR="$(head -n1 $INPUT_PHYLIP_FILE | sed 's/^[0-9]*\ //g'| sed 's/[\]*//g' | sed 's/\ //g')";

echo "INFO      | $(date) | Step #2: Make NEXUS-formatted alignment file. "
###### Make NEXUS format file:
	echo "INFO      | $(date) | Making NEXUS file... "

echo "#NEXUS

BEGIN DATA;
	DIMENSIONS NTAX="${MY_NTAX}" NCHAR="${MY_NCHAR}";
	FORMAT DATATYPE=DNA GAP=- MISSING=N;
	MATRIX" > NEXUS_top.tmp

echo ";
END;
" > NEXUS_bottom.tmp

	MY_PHYLIP_BASENAME="$(echo $INPUT_PHYLIP_FILE | sed 's/\.phy//g')" ;

echo "INFO      | $(date) | If available, add partition information to NEXUS... "
##
if [[ "$MY_PARTITIONS_FILE" = "NULL" ]]; then
	echo "INFO      | $(date) | No partitions file detected... "
	cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp > ./"$MY_PHYLIP_BASENAME".nex ;
	echo "INFO      | $(date) | Final, simple NEXUS written to ${MY_PHYLIP_BASENAME}.nex "

elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "raxml" ]]; then
	echo "INFO      | $(date) | Read RAxML-style partitions file. Adding partition information to final NEXUS file... "
	echo "begin sets;" > ./begin.tmp
	sed $'s/^DNA\,\ /\tcharset\ /g; s/$/\;/g' "$MY_PARTITIONS_FILE" > NEXUS_charsets.tmp ;
	echo "end;" > ./end.tmp
#	
		# Accommodating different machine types...
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak $'s/$/\\\n/' ./end.tmp ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i 's/$/\n/' ./end.tmp ;
		fi
#
	cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./begin.tmp ./NEXUS_charsets.tmp ./end.tmp > ./"$MY_PHYLIP_BASENAME".nex ;
	echo "INFO      | $(date) | Final, partitioned NEXUS written to ${MY_PHYLIP_BASENAME}.nex "

elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "nexus" ]] || [[ "$MY_PARTFILE_FORMAT" = "nex" ]] || [[ "$MY_PARTFILE_FORMAT" = "NEX" ]]; then
	echo "INFO      | $(date) | Read NEXUS-style charset file. Adding partition information to final NEXUS file... "
	cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./"$MY_PARTITIONS_FILE" > ./"$MY_PHYLIP_BASENAME".nex ;
	echo "INFO      | $(date) | Making final, partitioned NEXUS file... "
#

elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "SVDquartets" ]] || [[ "$MY_PARTFILE_FORMAT" = "SVDq" ]]; then
	echo "INFO      | $(date) | Read SVDquartets-style NEXUS charset file. Adding partition information to final NEXUS file... "
	cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./"$MY_PARTITIONS_FILE" > ./"$MY_PHYLIP_BASENAME".nex ;
	echo "INFO      | $(date) | Making final, partitioned NEXUS file... "

fi
##

perl -p -i -e $'s/^'"$MY_NTAX"'\ +[0-9]*.*\n//g' ./"$MY_PHYLIP_BASENAME".nex ; 
perl -p -i -e $'s/^'"$MY_NTAX"'\t[0-9]*.*\n//g' ./"$MY_PHYLIP_BASENAME".nex ; 


#### ADDITIONAL EDITS CLEANING FINAL NEXUS FILE:

	## Fix nuisance hex characters if generated for some reason in the final output NEXUS file:
#	MY_HEX_CHAR_CHECK="$(grep -h '\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#	MY_HEX_CHAR_CHECK="$(grep -h -b -o $'\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#	MY_HEX_CHAR_CHECK="$(grep -b -o $'\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#	MY_HEX_CHAR_CHECK="$(grep -h '^([0-9A-Fa-f]{2})+$' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#	MY_HEX_CHAR_CHECK="$(grep -h '^([0-9A-Fa-f]{2})+' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
	MY_HEX_CHAR_CHECK="$(grep -hbo '[[:xdigit:]]' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";

	if [[ "$MY_HEX_CHAR_CHECK" -gt "0" ]]; then
		echo "INFO      | $(date) | Cleaning hex characters from final NEXUS file... "
		# Working code:
		# sed 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex ;
		fi
	fi

	## Remove second NEXUS header if accidentally added to NEXUS partitions file by user
	## using the -NEX option (accommodate '#nexus', '#NEXUS', and '#Nexus'):
	MY_NEXUS_HEADER_COUNT="$(grep -h '\#NEXUS\|\#Nexus\|\#nexus' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
	if [[ "$MY_NEXUS_HEADER_COUNT" -gt "1" ]]; then
		echo "INFO      | $(date) | Fixing NEXUS header in final NEXUS file... "
		MY_UNWANTED_NEXUS_LINES="$(grep -n '\#NEXUS\|\#Nexus\|\#nexus' ./"$MY_PHYLIP_BASENAME".nex  | sed '1d' | sed 's/\:.*//g')";
		(
			for i in $MY_UNWANTED_NEXUS_LINES; do
				if [[ "${machine}" = "Mac" ]]; then
					sed -i.bak ''"$i"'d' ./"$MY_PHYLIP_BASENAME".nex ;
					rm ./*.bak;
				fi
				if [[ "${machine}" = "Linux" ]]; then
					sed -i ''"$i"'d' ./"$MY_PHYLIP_BASENAME".nex ;
				fi
			done
		)
	fi

	## Remove PHYLIP header if present on line 7 of the new NEXUS file. This sometimes happens
	## when the total number of sequences is odd (because of EOF line handling?). Just check 
	## for it and remove the line if present, as follows:
	if [[ "$(sed -n '7p' ./"$MY_PHYLIP_BASENAME".nex | wc -c | sed 's/\ //g')" -lt "20" ]]; then 
		echo "INFO      | $(date) | Fixing NEXUS matrix... "
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak '7d' ./"$MY_PHYLIP_BASENAME".nex ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i '7d' ./"$MY_PHYLIP_BASENAME".nex ;
		fi
	fi

	## Replace \? missing characters with Ns, if present:
	if [[ "$( grep -h '\?' ./"$MY_PHYLIP_BASENAME".nex | wc -l )" -gt "0" ]]; then 
		echo "INFO      | $(date) | Fixing missing data characters... "
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak 's/\?/N/g' ./"$MY_PHYLIP_BASENAME".nex ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i 's/\?/N/g' ./"$MY_PHYLIP_BASENAME".nex ;
		fi
	fi

fi
###

###
if [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then

echo "INFO      | $(date) | Step #2: Convert multiple PHYLIP files in working dir into NEXUS-formatted alignment files. "

(
	for INPUT_PHYLIP_FILE in ./*.phy; do
	
		MY_PHYLIP_LENGTH="$(cat $INPUT_PHYLIP_FILE | wc -l | sed 's/(\ )*//g')";
		MY_BODY_LENGTH="$(calc $MY_PHYLIP_LENGTH - 1)";
		## This "MY_BODY_LENGTH" is number of lines comprised by sequence and eof lines; was going to call it "MY_SEQUENCE_AND_EOF_LINES" but thought that name was too long.
		tail -n$MY_BODY_LENGTH $INPUT_PHYLIP_FILE > sequences.tmp;
		MY_NTAX="$(head -n1 $INPUT_PHYLIP_FILE | sed 's/\ [0-9]*//g'| sed 's/[\]*//g')";
		MY_NCHAR="$(head -n1 $INPUT_PHYLIP_FILE | sed 's/^[0-9]*\ //g'| sed 's/[\]*//g' | sed 's/\ //g')";

	###### Make NEXUS format file:
		echo "INFO      | $(date) | Converting $INPUT_PHYLIP_FILE to NEXUS format... "

	echo "#NEXUS

BEGIN DATA;
	DIMENSIONS NTAX="${MY_NTAX}" NCHAR="${MY_NCHAR}";
	FORMAT DATATYPE=DNA GAP=- MISSING=N;
	MATRIX" > NEXUS_top.tmp

echo ";
END;
" > NEXUS_bottom.tmp

	MY_PHYLIP_BASENAME="$(echo $INPUT_PHYLIP_FILE | sed 's/\.phy//g')" ;

	echo "INFO      | $(date) | If available, add partition information to NEXUS... "
	if [[ "$MY_PARTITIONS_FILE" = "NULL" ]]; then
		echo "INFO      | $(date) | No partitions file detected... "
		cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp > ./"$MY_PHYLIP_BASENAME".nex ;
		echo "INFO      | $(date) | Final, simple NEXUS written to ${MY_PHYLIP_BASENAME}.nex "

	elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "raxml" ]]; then
		echo "INFO      | $(date) | Read RAxML-style partitions file. Adding partition information to final NEXUS file... "
		echo "begin sets;" > ./begin.tmp
		sed $'s/^DNA\,\ /\tcharset\ /g; s/$/\;/g' "$MY_PARTITIONS_FILE" > NEXUS_charsets.tmp ;
		echo "end;" > ./end.tmp
#	
			# Accommodating different machine types...
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak $'s/$/\\\n/' ./end.tmp ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/$/\n/' ./end.tmp ;
			fi
#
		cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./begin.tmp ./NEXUS_charsets.tmp ./end.tmp > ./"$MY_PHYLIP_BASENAME".nex ;
		echo "INFO      | $(date) | Final, partitioned NEXUS written to ${MY_PHYLIP_BASENAME}.nex "

	elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "nexus" ]] || [[ "$MY_PARTFILE_FORMAT" = "nex" ]] || [[ "$MY_PARTFILE_FORMAT" = "NEX" ]]; then
		echo "INFO      | $(date) | Read NEXUS-style charset file. Adding partition information to final NEXUS file... "
		cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./"$MY_PARTITIONS_FILE" > ./"$MY_PHYLIP_BASENAME".nex ;
		echo "INFO      | $(date) | Making final, partitioned NEXUS file... "
#

	elif [[ "$MY_PARTITIONS_FILE" != "NULL" ]] && [[ "$MY_PARTFILE_FORMAT" = "SVDquartets" ]] || [[ "$MY_PARTFILE_FORMAT" = "SVDq" ]]; then
		echo "INFO      | $(date) | Read SVDquartets-style NEXUS charset file. Adding partition information to final NEXUS file... "
		cat ./NEXUS_top.tmp ./sequences.tmp ./NEXUS_bottom.tmp ./"$MY_PARTITIONS_FILE" > ./"$MY_PHYLIP_BASENAME".nex ;
		echo "INFO      | $(date) | Making final, partitioned NEXUS file... "

	fi

	perl -p -i -e $'s/^'"$MY_NTAX"'\ +[0-9]*.*\n//g' ./"$MY_PHYLIP_BASENAME".nex ; 
	perl -p -i -e $'s/^'"$MY_NTAX"'\t[0-9]*.*\n//g' ./"$MY_PHYLIP_BASENAME".nex ; 
	

	#### ADDITIONAL EDITS CLEANING FINAL NEXUS FILE:
	
		## Fix nuisance hex characters if generated for some reason in the final output NEXUS file:
#		MY_HEX_CHAR_CHECK="$(grep -h '\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#		MY_HEX_CHAR_CHECK="$(grep -h -b -o $'\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#		MY_HEX_CHAR_CHECK="$(grep -b -o $'\x{0D}' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#		MY_HEX_CHAR_CHECK="$(grep -h '^([0-9A-Fa-f]{2})+$' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
#		MY_HEX_CHAR_CHECK="$(grep -h '^([0-9A-Fa-f]{2})+' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
		MY_HEX_CHAR_CHECK="$(grep -hbo '[[:xdigit:]]' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";

		if [[ "$MY_HEX_CHAR_CHECK" -gt "0" ]]; then
			echo "INFO      | $(date) | Cleaning hex characters from final NEXUS file... "
			# Working code:
			# sed 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's'/"$(printf "\x0D")"'//g' ./"$MY_PHYLIP_BASENAME".nex ;
			fi
		fi
	
		## Remove second NEXUS header if accidentally added to NEXUS partitions file by user
		## using the -NEX option (accommodate '#nexus', '#NEXUS', and '#Nexus'):
		MY_NEXUS_HEADER_COUNT="$(grep -h '\#NEXUS\|\#Nexus\|\#nexus' ./"$MY_PHYLIP_BASENAME".nex  | wc -l | sed 's/\ //g')";
		if [[ "$MY_NEXUS_HEADER_COUNT" -gt "1" ]]; then
			echo "INFO      | $(date) | Fixing NEXUS header in final NEXUS file... "
			MY_UNWANTED_NEXUS_LINES="$(grep -n '\#NEXUS\|\#Nexus\|\#nexus' ./"$MY_PHYLIP_BASENAME".nex  | sed '1d' | sed 's/\:.*//g')";
			(
				for i in $MY_UNWANTED_NEXUS_LINES; do
					if [[ "${machine}" = "Mac" ]]; then
						sed -i.bak ''"$i"'d' ./"$MY_PHYLIP_BASENAME".nex ;
						rm ./*.bak;
					fi
					if [[ "${machine}" = "Linux" ]]; then
						sed -i ''"$i"'d' ./"$MY_PHYLIP_BASENAME".nex ;
					fi
				done
			)
		fi
	
		## Remove PHYLIP header if present on line 7 of the new NEXUS file. This sometimes happens
		## when the total number of sequences is odd (because of EOF line handling?). Just check 
		## for it and remove the line if present, as follows:
		if [[ "$(sed -n '7p' ./"$MY_PHYLIP_BASENAME".nex | wc -c | sed 's/\ //g')" -lt "20" ]]; then 
			echo "INFO      | $(date) | Fixing NEXUS matrix... "
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak '7d' ./"$MY_PHYLIP_BASENAME".nex ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i '7d' ./"$MY_PHYLIP_BASENAME".nex ;
			fi
		fi

		## Replace \? missing characters with Ns, if present:
		if [[ "$( grep -h '\?' ./"$MY_PHYLIP_BASENAME".nex | wc -l )" -gt "0" ]]; then 
			echo "INFO      | $(date) | Fixing missing data characters... "
			if [[ "${machine}" = "Mac" ]]; then
				sed -i.bak 's/\?/N/g' ./"$MY_PHYLIP_BASENAME".nex ;
				rm ./*.bak;
			fi
			if [[ "${machine}" = "Linux" ]]; then
				sed -i 's/\?/N/g' ./"$MY_PHYLIP_BASENAME".nex ;
			fi
		fi

	done
)


fi
###



echo "INFO      | $(date) | Step #3: Clean up workspace by removing temporary files generated during run. "
###### Remove temporary or unnecessary files created above:
	echo "INFO      | $(date) | Removing temporary files... "

	if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
		rm ./*.tmp ; 
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.

echo "INFO      | $(date) | Done. " 
echo "----------------------------------------------------------------------------------------------------------"
MY_PHYLIP_BASENAME="$(echo $MY_PHYLIP_BASENAME | sed 's/\.\///g' )"
if [[ "$INPUT_PHYLIP_FILE" != "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "0" ]]; then
	echo "output file(s): ./${MY_PHYLIP_BASENAME}.nex"
elif [[ "$INPUT_PHYLIP_FILE" = "NULL" ]] && [[ "$MULTIPLE_PHYLIP_SWITCH" = "1" ]]; then
	echo "output file(s): Multiple NEXUS alignments in current directory"
fi
echo ""

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="
Usage: piranha -f $(basename "$0") [Options]...

 ${bold}Options:${reset}
  -i   inputPHYLIP (def: NULL) input PHYLIP filename
  -m   multiPHYLIP (def: 0, turned on; 1, on) convert multiple PHYLIP files in working dir
  -p   partitionsFile (def: NULL; other: filename) name of file containing data partitions 
       in RAxML, regular NEXUS, or SVDquartets-style NEXUS format (see below)
  -f   fileType (def: raxml; other: nexus|NEX|nex, SVDquartets|SVDq) partitions file type, 
       specifying either RAxML DNA partitions format, NEXUS character sets format, or 
       SVDquartets NEXUS character sets format
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT reads one (-i flag) or multiple (-m flag) PHYLIP (Felsenstein 2002) DNA sequence 
 alignment files and converts them to NEXUS ('.nex'; Maddison et al. 1997) format. Sequence 
 names should include alphanumeric, hyphen, and underscore characters but no spaces. Also, 
 PHYLIP alignment files must have the extension '.phy'. Optionally, when reading in a single 
 PHYLIP file, the user may use the -p and -f flags to read in and process an external partitions 
 file containing information on character set partitions for <inputPHYLIP>, to be included 
 in the resulting NEXUS file. The partitions file may be in one of the three standard formats 
 for which examples are provided below and must be described as such using the corresponding 
 -f flag option. The following examples are given for a hypothetical set of subsets identified 
 using PartitionFinder (Lanfear et al. 2014), as follows:
 
 # Standard RAxML partitions format (e.g. output by PartitionFinder):
 
 	DNA, p1 = 1-437, 2557-2966, 3646-4111, 4112-4455, 7756-8178, 18049-18521
 	DNA, p2 = 438-848, 5168-5641, 10779-11203, 12446-12835, 13296-13700, 15612-16092
  	...
 	DNA, p16 = 35370-35812

 # Regular NEXUS character set format:

 	begin sets;
	 	charpartition PartitionFinderSubsets = 
			 charset p1=1-437, 2557-2966, 3646-4111, 4112-4455, 7756-8178, 18049-18521;
			 charset p2=438-848, 5168-5641, 10779-11203, 12446-12835, 13296-13700, 15612-16092;
			 ...
			 charset p16=35370-35812;
	 end;
 
 # SVDquartets NEXUS character set format:

 	begin sets;
	 	charpartition PartitionFinderSubsets = 
			 p1 : 1-437, 2557-2966, 3646-4111, 4112-4455, 7756-8178, 18049-18521,
			 p2 : 438-848, 5168-5641, 10779-11203, 12446-12835, 13296-13700, 15612-16092,
			 ...
			 p16 : 35370-35812;
	 end;

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    Convert individual PHYLIP file to NEXUS with partitions:
    piranha -f PHYLIP2NEXUS -i <inputPHYLIP> -p <partitionsFile> -f raxml
    piranha -f PHYLIP2NEXUS -i <inputPHYLIP> -p <partitionsFile> -f NEX
    piranha -f PHYLIP2NEXUS -i <inputPHYLIP> -p <partitionsFile> -f SVDquartets

    Convert multiple PHYLIP files in working directory to NEXUS format:
    piranha -f PHYLIP2NEXUS -m 1 

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a3. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.
 Lanfear R, Calcott B, Kainer D, Mayer C, Stamatakis A (2014) Selecting optimal partitioning 
 	schemes for phylogenomic datasets. BMC Evolutionary Biology, 14, 82.
 Maddison, D.R., Swofford, D.L. and Maddison, W.P., 1997. NEXUS: an extensible file format for 
	systematic information. Systematic Biology, 46(4), 590–621.

 Created by Justin Bagley on Thu, Mar 15 15:27:49 2018 -0400.
 Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		INPUT_PHYLIP_FILE=NULL ;
	else 
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		INPUT_PHYLIP_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-m' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MULTIPLE_PHYLIP_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-m' ./args.txt | perl -pe 's/\-m//g' | perl -pe 's/\ //g')";
		MULTIPLE_PHYLIP_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-p' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_PARTITIONS_FILE=NULL ;
	else 
		MY_ARG="$(grep -h '\-p' ./args.txt | perl -pe 's/\-p//g' | perl -pe 's/\ //g')";
		MY_PARTITIONS_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-f' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_PARTFILE_FORMAT=raxml ;
	else 
		MY_ARG="$(grep -h '\-f' ./args.txt | perl -pe 's/\-f//g' | perl -pe 's/\ //g')";
		MY_PARTFILE_FORMAT="$MY_ARG" ;
	fi
#



# ############ PARSE THE OPTIONS
# while getopts 'i:m:p:f:' opt ; do
#   case $opt in
# ## PHYLIP2NEXUS options:
#     i) INPUT_PHYLIP_FILE=$OPTARG ;;
#     m) MULTIPLE_PHYLIP_SWITCH=$OPTARG ;;
#     p) MY_PARTITIONS_FILE=$OPTARG ;;
#     f) MY_PARTFILE_FORMAT=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# Store the remaining part as arguments.
# args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
PHYLIP2NEXUS

# Exit cleanly
safeExit
