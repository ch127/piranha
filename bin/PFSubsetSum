#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: PFSubsetSum.sh                                                                   #
  VERSION="v1.4.2"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Wed, Sep 7 01:07:20 2016 -0300.                      #
# Last update: April 17, 2020                                                            #
# Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR CALCULATING SUMMARY STATISTICS FOR DNA SUBSETS WITHIN THE OPTIMUM     #
# PARTITIONING SCHEME IDENTIFIED FOR THE DATA BY PartitionFinder v1 or v2                #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




PFSubsetSum () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | PFSubsetSum, v1.4.2 April 2020                                 "
echo "INFO      | $(date) | Copyright (c) 2016-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace (e.g. functions, working directory) and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
MY_WORKING_DIR="$(pwd -P)";		## Keep, used by script a few places below.
checkMachineType


###### Detect and read in PartitionFinder best scheme file ('best_scheme.txt') from current working directory:
echo "INFO      | $(date) | Step #2: Detect and read PartitionFinder output file. "
shopt -s nullglob
if [[ -n $(echo ./best_scheme.txt) ]]; then
	echo "INFO      | $(date) | Found PartitionFinder 'best_scheme.txt' results file... "
    MY_BEST_SCHEME_FILE=./best_scheme.txt ;
else
    echo "WARNING!  | $(date) | No PartitionFinder 'best_scheme.txt' results file in current working directory. Quitting... "
	safeExit;
fi


###### Extract charsets and calculate summary statistics for each PF subset in the best
###### scheme:
echo "INFO      | $(date) | Step #3: Compute summary statistics for each data subset. "
echo "INFO      | $(date) | Extracting and organizing subsets...  "

	##--Extract subsets from PartitionFinder output file:
	MY_NUM_SUBSETS=$(grep -n "^DNA," $MY_BEST_SCHEME_FILE | wc -l);
	MY_START_LINE_NUM="$(cat $MY_BEST_SCHEME_FILE | grep -n '^DNA,' | head -n1 | sed 's/\:.*//')";
	MY_END_LINE_NUM="$(cat $MY_BEST_SCHEME_FILE | grep -n '^DNA,' | tail -n1 | sed 's/\:.*//')";
	sed -n "$MY_START_LINE_NUM","$MY_END_LINE_NUM"p $MY_BEST_SCHEME_FILE > ./subsets.txt;
	MY_SUBSETS_FILE=./subsets.txt;

echo "INFO      | $(date) | The best scheme from PartitionFinder contains $MY_NUM_SUBSETS subsets.  "

	##--Move each subset to its own file, with the same subset's name... The subsets
	##--(a.k.a. "partitions", though this is not technically correct) are always named
	##--"px" where x is a number from 1 to the total number of subsets in the best
	##--scheme identified by PartitionFinder. So, we can do this with a simple for loop
	##--across different p's:
(
	for (( i=1; i<=$MY_NUM_SUBSETS; i++ )); do
		SUBSET_NAME="$(echo p$i)";
		sed -n "$i"p $MY_SUBSETS_FILE | sed 's/DNA\,//g; s/p[0-9]*//g; s/^[\ =]*//g' > "$SUBSET_NAME".txt ;		##--This cleans up the subset data by removing everything except the charsets (e.g. deleting "DNA, "...).

		echo "$SUBSET_NAME" >> ./subset_names.txt ;

	done			
)	


echo "INFO      | $(date) | 1. Calculating numCharsets (number of character sets) within each subset in the scheme...  "
	##--Prep work: make output directory...
	mkdir "$MY_WORKING_DIR"/numCharsets/ ;

(
    for (( i=1; i<=$MY_NUM_SUBSETS; i++ )); do
        SUBSET_NAME="$(echo p$i)";
        SUBSET_FILE="$(echo ./$SUBSET_NAME.txt)";
        number_of_occurrences=$(grep -o "\-" <<< cat $SUBSET_FILE | wc -l);
        echo "$number_of_occurrences" > "$SUBSET_NAME"_numCharsets.out ;
		
		cat ./"$SUBSET_NAME"_numCharsets.out >> ./numCharsets/ALL_numCharsets.txt ;

    done
)
mv ./*_numCharsets.out ./numCharsets/ ;


echo "INFO      | $(date) | 2. Calculating subsetLengths (alignment lengths in bp) for each subset in the scheme...  "
	##--Now, we need a loop that will go into each subset file output from the preceding
	##--loops ("p1.txt", "p2.txt", etc.), split the charsets in each subset (file)
	##--onto separate lines, calculate the length of each charset (=locus), then sum
	##--all the charset lengths (locus bp) to get the total length in bp for the whole
	##--subset.

	##--One solution is to do the above easily by making and calling on an R script:
	
	##--Prep work: make output directory...
	mkdir "$MY_WORKING_DIR"/subsetLengths/ ;

(
    for (( i=1; i<=$MY_NUM_SUBSETS; i++ )); do
        SUBSET_NAME="$(echo p$i)";
        SUBSET_FILE="$(echo ./$SUBSET_NAME.txt)";
		cat "$SUBSET_FILE" > ./Rinput.txt;
		CHARSET_DUMP="$(cat ./Rinput.txt)";

		##--Make R script and give it data from each subset file within the loop...
echo "#!/usr/bin/env Rscript

charsets_as_numbers <- c("$CHARSET_DUMP")
out <- sum(abs(charsets_as_numbers)) + length(charsets_as_numbers)

write.table(out, '"$MY_WORKING_DIR"/subsetLengths/"$SUBSET_NAME"_subsetLength.out', sep='\t', quote=F, row.names=F, col.names=F)

" > ./GetSubsetLength.r

		##--Call the 'GetSubsetLength.r' R script to run just on the subset at the current
		##--point in the loop:
		chmod u+x ./GetSubsetLength.r ;
		R CMD BATCH GetSubsetLength.R ;

		if [[ -s ./Rinput.txt ]]; then rm ./Rinput.txt ; fi 
		if [[ -s ./GetSubsetLength.r ]]; then rm ./GetSubsetLength.r ; fi 

		cat ./subsetLengths/"$SUBSET_NAME"_subsetLength.out >> ./subsetLengths/ALL_subsetLengths.txt ;

	done
)

if [[ -s subsets.txt ]]; then rm subsets.txt ; fi 		##--Remove subset lists and individual subset files
if [[ ! -z ./p*.txt ]]; then rm ./p*.txt ; fi 
mv ./*.Rout ./subsetLengths/ ;


echo "INFO      | $(date) | 3. Extracting subsetModels (selected models of DNA sequence evolution) for each subset in the scheme...  "
	grep -n "^[0-9]" ./best_scheme.txt > ./subset_mods_prep.txt ;
	MY_SUBSET_MODELS_PREPPER=./subset_mods_prep.txt ;
	sed 's/^[0-9:\ |]*//g; s/\ \ \ \ |\ p.*$//g' $MY_SUBSET_MODELS_PREPPER > ./subsetModels.txt ;
	if [[ -s ./subset_mods_prep.txt ]]; then rm ./subset_mods_prep.txt ; fi 


echo "INFO      | $(date) | 4. Making file 'sumstats.txt' with subset summary statistics table...  "
echo "###################### PartitionFinder Subsets Summary Statistics ########################
Subset	numCharsets	subsetLength	subsetModel	| partitions" > table_header.txt ;
paste ./subset_names.txt **/ALL_numCharsets.txt **/ALL_subsetLengths.txt ./subsetModels.txt | column -s $'\t' -t > ./table.txt ;
cat ./table_header.txt ./table.txt > ./sumstats.txt ;


############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	if [[ -s ./table_header.txt ]]; then rm ./table_header.txt ; fi 
	if [[ -s ./table.txt ]]; then rm ./table.txt ; fi 
	if [[ -s ./subset_names.txt ]]; then rm ./subset_names.txt ; fi 
	if [[ -s ./subsetModels.txt ]]; then rm ./subsetModels.txt ; fi 

echo "INFO      | $(date) | Done."
echo "----------------------------------------------------------------------------------------------------------"
echo "output file(s): PartitionFinder subset summary statistics written to ./sumstats.txt"
echo ""

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version and exit
  -c   citation (also: --citation) echo program citation and exit

 ${bold}OVERVIEW${reset}
 This simple function uses a shell script to calculate summary statistics for DNA subsets 
 within the optimum sequence partitioning scheme identified for the data by PartitionFinder
 v1 or v2 (Lanfear et al. 2012, 2014). We assume that the function is being run from a working
 directory containing files from a completed PartitionFinder run (usually cwd is a subfolder
 named 'analysis/', created by PartitionFinder for each run), and thus containing at minimum
 the main 'best_scheme.txt' output file from PartitionFinder, as well as the analysis subfolder
 named subsets/ (PartitionFinder creates other subfolders named phylofiles/, schemes/, 
 start_tree/, and cfg/, but these are not necessary). Given such a working directory, 
 `PFSubsetSum` calculates several summary statistics, including numCharsets (number of character 
 sets), subsetLengths (alignment lengths in bp), and subsetModels (selected models of DNA 
 sequence evolution) for each subset in the best scheme. These statistics are collated into 
 a summary table file named 'sumstats.txt' saved in the current directory.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or
 Linux (tested on CentOS 5/6/7). The key dependency is R, the R environment for statistical
 computing (available at: https://cran.r-project.org), which must be installed and available 
 as 'R' from the command line. Tested using R v3.5+ but should work on older versions.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f PFSubsetSum         Regular run in directory containing PartitionFinder results
    piranha -f PFSubsetSum -h      Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Lanfear, R., Calcott, B., Ho, S.Y.W., Guindon, S. 2012. Partitionfinder: combined selection of 
	partitioning schemes and substitution models for phylogenetic analyses. Molecular Biology 
	and Evolution, 29, 1695–1701. 
 Lanfear, R., Calcott, B., Kainer, D., Mayer, C., Stamatakis, A. 2014. Selecting optimal 
	partitioning schemes for phylogenomic datasets. BMC Evolutionary Biology, 14, 82.

 Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.
 Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.
"

#if [[ -z "$*" ]]; then
#	echo "$USAGE"
#	exit
#fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-c" ]] || [[ "$1" == "-citation" ]] || [[ "$1" == "--citation" ]]; then
	echo " Bagley, J.C. 2020. PIrANHA v0.4a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.
"
	exit
fi

# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
PFSubsetSum

# Exit cleanly
safeExit
