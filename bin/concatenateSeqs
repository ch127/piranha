#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: concatenateSeqs.sh                                                               #
  VERSION="v1.3.1"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, Mar 12 21:23:30 CDT 2019.                       #
# Last update: April 17, 2020                                                            #
# Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT CONVERTS SERIES OF PHYLIP DNA SEQUENCE ALIGNMENTS WITH EQUAL TAXON   #
# SAMPLING INTO A SINGLE CONCATENATED PHYLIP ALIGNMENT                                   #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------
UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

# Source shared functions and variables
# -----------------------------------
FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited. Always make this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()




concatenateSeqs () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | concatenateSeqs, v1.3.1 April 2020                             "
echo "INFO      | $(date) | Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"
#if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
echo "INFO      | $(date) | Starting concatenateSeqs analysis... "
echo "INFO      | $(date) | Running with the following options: "
echo "INFO      | $(date) | - Taxon names and spaces file, <taxonNamesSpaces> = ${USER_SPEC_NAMSPACES_FILE} "
echo "INFO      | $(date) | - <outputFile> option = ${MY_OUTPUT_FILE_SWITCH} "
echo "INFO      | $(date) | - Verbose output switch, <verbose> = ${MY_VERBOSE_OUT_SWITCH} "

echo "INFO      | $(date) | Step #1: Set up workspace, check machine type, and determine output file settings. "
#fi
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
echoCDWorkingDir
checkMachineType

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Set output file. "
fi
if [[ "$MY_OUTPUT_FILE_SWITCH" != "NULL" ]]; then
	exec >> ./"$MY_OUTPUT_FILE_SWITCH" ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Output file switch activated. Logging output to file at ./${MY_OUTPUT_FILE_SWITCH} ... "
	fi
elif [[ "$MY_OUTPUT_FILE_SWITCH" = "NULL" ]]; then
	exec >> ./concatenateSeqs_output.txt ;
	exec 2>&1 ;
#
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Default output file settings. Logging output to file at ./concatenateSeqs_output.txt ... "
	fi
fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Run main concatenateSeqs analysis. "
fi


count=1
(
	for i in ./*.phy; do
 
		######  concatenateSeqs  ######

 		cp "$USER_SPEC_NAMSPACES_FILE" "$i".tmp ;
 		j="$i".tmp ;
 		MY_PHYLIP_NCHAR="$(head -n1 $i | perl -pe 's/^[0-9]*\ +//g; s/\ //g')" ;
 		echo "###----------   $i,  $MY_PHYLIP_NCHAR bp   ----------###"
		echo "$USER_SPEC_NAMSPACES_FILE"

		## On first loop iteration, make concatenated seqs PHYLIP file from complete locus1 
		## PHYLIP file, then make partitions/charsets files. Specifically, when you make the
		## files of RAxML partitions, PartitionFinder subsets, and NEXUS charsets, then the
		## formats are as follows:
		# raxml format: "DNA, locus1 = 1-607"
		# PF format: "locus1=1-607;"
		# NEXUS format: "  charset locus1 = 1-607;" 

		if [[ "$count" = "1" ]]; then

			#echo "$count"

			# Make concatenated seqs file from complete locus1 PHYLIP file, and move original
			# locus1 PHYLIP file to orig_phylip/ subfolder.
			mkdir orig_phylip/ ;
			cp "$i" ./concatenated_seqs.phy ;
			cp "$i" ./orig_phylip/ ;

		elif [[ "$count" -gt "1" ]]; then

			#echo "$count"

			# Concatenate $i > 1 PHYLIP sequences to concatenated seqs PHYLIP file
			while read l; do
				MY_TAXON_NAME="$(echo $l | sed 's/\ //g')" ;
				MY_1ST_INST_LINE="$(grep -n "$MY_TAXON_NAME" $i | head -n1 | sed 's/\:.*//g; s/\ //g' | perl -pe 's/\t//g')" ;			
					# extract/copy corresponding sequence from $i and paste it to end of
					# line with same name ($MY_TAXON_NAME) in tmp file $j:
					MY_SEQUENCE="$(grep -h "$MY_TAXON_NAME" $i | perl -pe 's/^[A-Za-z0-9\-\_\ ]*\ //g' | sed 's/\ //g')" ;
					if [[ "${machine}" = "Mac" ]]; then
						sed -i.bak '/^'"$MY_TAXON_NAME"'/s/$/'"$MY_SEQUENCE"'/' ./concatenated_seqs.phy ;
						rm ./*.bak ;
					fi

					if [[ "${machine}" = "Linux" ]]; then
						sed -i '/^'"$MY_TAXON_NAME"'/s/$/'"$MY_SEQUENCE"'/' ./concatenated_seqs.phy ;
					fi
			done < "$USER_SPEC_NAMSPACES_FILE"

			cp "$i" ./orig_phylip/ ;

		fi


	echo "$((count++))" > count.tmp ;

	done
)



###### FIX NEW CONCATENATED PHYLIP ALIGNMENT TO HAVE THE CORRECT NCHAR INFORMATION

		# Add header with corrected ntax and nchar information:
		cat ./concatenated_seqs.phy | tail -n+2 > ./concatenated_seqs.tmp ;
		MY_CONCAT_PHY_NTAX="$(cat ./concatenated_seqs.phy | tail -n+2 | wc -l | perl -pe 's/\t//g; s/\ //g')" ;
		MY_CONCAT_PHY_NCHAR="$(head -n2 ./concatenated_seqs.phy | tail -n1 | perl -pe 's/^[A-Za-z0-9\-\_]*[\ ]*//; s/\ //g; s/$//g; s/\s//g' | wc -c | perl -pe 's/\t//g; s/\ //g')" ;
		echo "$MY_CONCAT_PHY_NTAX  $MY_CONCAT_PHY_NCHAR" > ./concat_header.tmp ;
		
		# Overwrite original phy file with new phy file:
		cat ./concat_header.tmp ./concatenated_seqs.tmp > ./concatenated_seqs.phy ;



if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #3: Clean up workspace by removing temporary files generated during run. "
	echo "INFO      | $(date) | Deleting temporary files... "
fi
############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
		rm ./*.tmp ; 
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.

echo "INFO      | $(date) | Done." 
echo "----------------------------------------------------------------------------------------------------------"
echo "output file(s): ./concatenated_seqs.phy "
#if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
#	echo "output file(s): ./concatenated_seqs.phy "
#fi
echo ""

## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -t   taxonNamesSpaces (def: NULL) mandatory taxon 'names and spaces' file
  -o   outputFile (def: NULL) send screen output to file in working dir with user-specified 
       name, for example 'output.txt'
  -v   verbose (def: 0, off; 1, on) specify verbose run, step output to screen (stdout),
       logged to output file
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit
  -d   debug (def: 0, off; 1, on also: --debug) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT runs in a working directory containing a series of PHYLIP (Felsenstein 2002)
 DNA sequence alignments for different genes (e.g. 100s or 1000s of RAD or UCE loci) each
 having the same number of taxa, or taxon sampling. Given such a workspace, the script 
 takes as input a 'names and spaces file', <inputNameSpacesFile>, containing the names of
 tip taxa, one per line, as well as spaces extending the total number of characters to be
 the same on each line (e.g. 10 or 12 characters including spaces), passed using the -t
 flag. When run, the script concatenates the PHYLIP alignments together. The ordering of 
 the gene alignments is equal to the alphanumeric order in which bash or UNIX terminal would 
 read the PHYLIP files (e.g. locus1.phy, locus10.phy, ..., and not locus1.phy, locus2.phy, 
 ...). 
	By default all script output is written to a file named 'concatenateSeqs_output.txt'. 
 The user may optionally specify verbose output (-v 1) or a desired output file name (using
 the -o flag).Taxon names in the PHYLIP files should contain only alphanumeric characters and 
 no spaces, or else there could be issues. Also, PHYLIP alignment files must have the extension 
 '.phy'.
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave, and CentOS 5/6/7 Linux, but should work on many
 other versions. Besides standard UNIX/Linux command line tools, the only other dependency 
 is Perl (v5+), which is usually already installed on mac and Linux distributions.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f concatenateSeqs -t <taxonNamesSpaces>

	Suggested usage, starting from scratch:
	
		Create <taxonNamesSpaces> file with getTaxonNames function:
		piranha -f getTaxonNames -n <numTips>	# Creates file: '<numTips>_taxon_names_spaces.txt'

		Concatenate PHYLIP alignments in working dir:
		piranha -f concatenateSeqs -t <numTips>_taxon_names_spaces.txt

	Suggested usage, starting from existing <taxonNamesSpaces> file, 'taxon_name_spaces12.txt':
   
		piranha -f concatenateSeqs -t taxon_name_spaces12.txt -v 1

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, Mar 12 21:23:30 CDT 2019.
 Copyright (c) 2019-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#perl -p -i -e $'s/\ /\n/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-t' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		USER_SPEC_NAMSPACES_FILE=NULL ;
	else 
		MY_ARG="$(grep -h '\-t' ./args.txt | perl -pe 's/\-t//g' | perl -pe 's/\ //g')";
		USER_SPEC_NAMSPACES_FILE="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_OUTPUT_FILE_SWITCH=NULL ;
	else 
		MY_ARG="$(grep -h '\-o' ./args.txt | perl -pe 's/\-o//g' | perl -pe 's/\ //g')";
		MY_OUTPUT_FILE_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	fi
	if [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_DEBUG_MODE_SWITCH=1 ;
	fi


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
concatenateSeqs

# Exit cleanly
safeExit
