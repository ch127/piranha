#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: ExaBayesPostProc.sh                                                              #
  VERSION="1.3.2"                                                                        #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Fri, 29 Jul 2016 11:28:02 -0300.                     #
# Last update: March 14, 2019                                                            #
# Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT THAT AUTOMATES READING AND CONDUCTING POST-PROCESSING OF PHYLOGENETIC     #
# RESULTS FROM EXABAYES                                                                  #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




function ExaBayesPostProc () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | ExaBayesPostProc, v1.3.2 March 2019  (in PIrANHA v0.2-alpha.1c)"
echo "INFO      | $(date) | Copyright (c) 2016-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
USER_SPEC_PATH="$(printf '%q\n' "$(pwd)")";
echoCDWorkingDir
MY_WORKING_DIR="$(pwd -P)";
#echo "INFO      | $(date) |          Checking machine type... "
checkMachineType
#echo "INFO      | $(date) |               Found machine type ${machine}. "


echo "INFO      | $(date) | Step #2: Check whether dependencies, including ExaBayes utility programs and MrBayes, are available from command line. "

MY_CREDSET_EXECUT_CHECK="$(which credibleSet)"
if [[ -s "$MY_CREDSET_EXECUT_CHECK"  ]]; then 
	echo "INFO      | $(date) |          Check #1 passed, credibleSet is installed..."
else
	echo "WARNING!  | $(date) |          Check #1 FAILED, credibleSet _not_ installed..."
	echo "INFO      | $(date) |          Please install or reinstall ExaBayes, including credibleSet and other utilities."
	echo "INFO      | $(date) |          Find more information in the ExaBayes manual, here: https://cme.h-its.org/exelixis/web/software/exabayes/manual/index.html "
	echo "ERROR     | $(date) |          Quitting..."
	exit 1 ;
fi

MY_EXTRACTBIPS_EXECUT_CHECK="$(which extractBips)"
if [[ -s "$MY_EXTRACTBIPS_EXECUT_CHECK"  ]]; then 
	echo "INFO      | $(date) |          Check #2 passed, extractBips is installed..."
else
	echo "WARNING!  | $(date) |          Check #1 FAILED, extractBips _not_ installed..."
	echo "INFO      | $(date) |          Please install or reinstall ExaBayes, including extractBips and other utilities."
	echo "INFO      | $(date) |          Find more information in the ExaBayes manual, here: https://cme.h-its.org/exelixis/web/software/exabayes/manual/index.html "
	echo "ERROR     | $(date) |          Quitting..."
	exit 1 ;
fi

MY_POSTPROC_EXECUT_CHECK="$(which postProcParam)"
if [[ -s "$MY_POSTPROC_EXECUT_CHECK"  ]]; then 
	echo "INFO      | $(date) |          Check #3 passed, postProcParam is installed..."
else
	echo "WARNING!  | $(date) |          Check #1 FAILED, postProcParam _not_ installed..."
	echo "INFO      | $(date) |          Please install or reinstall ExaBayes, including postProcParam and other utilities."
	echo "INFO      | $(date) |          Find more information in the ExaBayes manual, here: https://cme.h-its.org/exelixis/web/software/exabayes/manual/index.html "
	echo "ERROR     | $(date) |          Quitting..."
	exit 1 ;
fi

MY_MRBAYES_EXECUT_CHECK1="$(which mb)"
MY_MRBAYES_EXECUT_CHECK2="$(which mrbayes)"
if [[ -s "$MY_MRBAYES_EXECUT_CHECK1"  ]] || [[ -s "$MY_MRBAYES_EXECUT_CHECK2"  ]] ; then 
	echo "INFO      | $(date) |          Check #4 passed, MrBayes is installed..."
else
	echo "WARNING!  | $(date) |          Check #1 FAILED, MrBayes apparently _not_ installed..."
	echo "INFO      | $(date) |          Please install or reinstall MrBayes, or make it available from the command line (e.g. using an alias) as 'mb' or 'mrbayes'. "
	echo "INFO      | $(date) |          Find more information at the MrBayes v3.2+ website, here: http://nbisweden.github.io/MrBayes/, or "
	echo "INFO      | $(date) |          if you have Anaconda/Miniconda installed, you could try a Bioconda install of MrBayes as follows: $ conda install -c bioconda mrbayes ; ## info: https://anaconda.org/bioconda/mrbayes"
	echo "ERROR     | $(date) |          Quitting..."
	exit 1 ;
fi


echo "INFO      | $(date) | Step #3: Read ExaBayes output file names in current directory and call utility programs to conduct ExaBayes post-processing. "


echo "INFO      | $(date) |          A. Read ExaBayes results files into environmental variables... "
	MY_EXABAYES_TREEFILES=./ExaBayes_topologies.*		## Assign "topologies" files in current directory to variable.
	MY_EXABAYES_PARAMFILES=./ExaBayes_parameters.*		## Assign "parameters" files in current directory to variable.


echo "INFO      | $(date) |          B. Conduct ExaBayes run summary... "
###### RUN SUMMARY:

echo "INFO      | $(date) |         TREE SUMMARY: "
echo "INFO      | $(date) |         Getting ${MY_CREDIBLE_INT}% percentile credible set of trees from ExaBayes analysis... "
(
	for i in $MY_EXABAYES_TREEFILES; do
		echo "$i";
		credibleSet -n 50cred.out.txt -f "${i}" -c "$MY_CREDIBLE_INT" ;
	done
)

echo "INFO      | $(date) |          Getting bipartitions, plus branch lengths and ESS scores for all bipartitions, of ExaBayes trees... "
###### Get bipartitions, plus branch lengths & ESS scores for all bipartitions, of ExaBayes trees:
(
	for i in $MY_EXABAYES_TREEFILES; do 
		echo "$i";
		extractBips -n out.txt -f "${i}" -b "$MY_REL_BURNIN_PROPORTION" ;
	done
)

echo "INFO      | $(date) |          C. Conduct parameters summary... "
###### PARAMETERS SUMMARY: 
###### Summarize parameters of each run using postProcParam utility:
echo "INFO      | $(date) |          Summarizing parameters of each ExaBayes run in current working directory using postProcParam utility... "
(
	for j in $MY_EXABAYES_PARAMFILES; do
		echo "$j";
		postProcParam -n out.txt -f "${j}" -b "$MY_REL_BURNIN_PROPORTION" ;
	done
)

echo "INFO      | $(date) | Step #3: Reformat ExaBayes output files and conduct additional file processing in MrBayes v3.2+. "
(
	for k in ./ExaBayes_topologies.*; do 
		echo "$k";
		sed 's/.{.}//g' "${k}" > "${k}"_1.tmp ;
			sed 's/:0.0;/;/g' "${k}"_1.tmp > "${k}".t ;
	done
)

### TODO: Add an option that reads in the number of runs and creates or sets the following loop 
### accordingly (so that if -n 2 , then the loop goes through the first two lines, through
### .run2.t, and if -n3, then the loop goes through .run3.t, etc.)

echo "INFO      | $(date) |          Renaming tree files for $MY_NUM_REPLICATE_RUNS replicate runs... "

if [[ "$MY_NUM_REPLICATE_RUNS" = "1"]]; then
(
	for l in *.t; do
		mv "$l" ${l/.0.t/.run1.t} ;
	done
)
fi

if [[ "$MY_NUM_REPLICATE_RUNS" = "2"]]; then
(
	for l in *.t; do
		mv "$l" ${l/.0.t/.run1.t} ;
		mv "$l" ${l/.1.t/.run2.t} ;
	done
)
fi

if [[ "$MY_NUM_REPLICATE_RUNS" = "3"]]; then
(
	for l in *.t; do
		mv "$l" ${l/.0.t/.run1.t} ;
		mv "$l" ${l/.1.t/.run2.t} ;
		mv "$l" ${l/.2.t/.run3.t} ;
	done
)
fi

if [[ "$MY_NUM_REPLICATE_RUNS" = "4"]]; then
(
	for l in *.t; do
		mv "$l" ${l/.0.t/.run1.t} ;
		mv "$l" ${l/.1.t/.run2.t} ;
		mv "$l" ${l/.2.t/.run3.t} ;
		mv "$l" ${l/.3.t/.run4.t} ;
	done
)
fi

if [[ "$MY_NUM_REPLICATE_RUNS" = "5"]]; then
(
	for l in *.t; do
		mv "$l" ${l/.0.t/.run1.t} ;
		mv "$l" ${l/.1.t/.run2.t} ;
		mv "$l" ${l/.2.t/.run3.t} ;
		mv "$l" ${l/.3.t/.run4.t} ;
		mv "$l" ${l/.4.t/.run5.t} ;
	done
)
fi

echo "INFO      | $(date) | Step #4: Prep files and then summarize trees, their posterior probabilities, and their errors using MrBayes v3.2+ (assumes ExaBayes NEXUS file available)."
###### Prep files and then summarize trees, their posterior probabilities, and their errors using MrBayes.

	## First check for NEXUS files, because everything from here down relies upon the availability
	## of a NEXUS file presumably corresponding to an ExaBayes run in current working directory.

	echo "INFO      | $(date) |          Checking availability of NEXUS files... "

	MY_NEXUS_FILE_CHECK="$(echo ./*.nex | wc -l | perl -pe 's/\ //g')";

if [[ "$MY_NEXUS" != "NULL" ]] && [[ "$MY_NEXUS_FILE_CHECK" -gt "0" ]]; then
	MY_NEXUS_FILENAME="$(echo $MY_NEXUS | sed -n 's/.\///p')";
	echo "INFO      | $(date) |          NEXUS check passed. Using NEXUS file ${MY_NEXUS_FILENAME}... "
	MY_MRBAYES_FILENAME="$(ls | sed -n 's/\.0$//p' | grep -n "topologies" | sed -n 's/.://p')";
elif [[ "$MY_NEXUS" = "NULL" ]] && [[ "$MY_NEXUS_FILE_CHECK" -gt "0" ]]; then
	MY_NEXUS=./*.nex
	MY_NEXUS_FILENAME="$(echo ./*.nex | head -n1 | sed -n 's/.\///p')";		## Takes first NEXUS file in working directory with .nex extension, using head -n1, and assumes it to correspond to the ExaBayes NEXUS input file, because best practices dictate that separate runs should be in independent run folders/subfolders.
	echo "INFO      | $(date) |          NEXUS check passed, but found multiple NEXUS files. Using NEXUS file ${MY_NEXUS_FILENAME}... "
	MY_MRBAYES_FILENAME="$(ls | sed -n 's/\.0$//p' | grep -n "topologies" | sed -n 's/.://p')";
elif [[ "$MY_NEXUS" = "NULL" ]] && [[ "$MY_NEXUS_FILE_CHECK" = "0" ]]; then
	echo "WARNING!  | $(date) |          NEXUS check FAILED. No NEXUS file in current working directory"
	echo "WARNING!  | $(date) |          Cannot conduct MrBayes summaries. Quitting..."
	exit 1 ;
fi


	echo "INFO      | $(date) |          Creating batch file to run in MrBayes... "

###### Create batch file for MrBayes:
echo "set autoclose=yes nowarn=yes
execute ${MY_NEXUS_FILENAME}
sumt Filename=${MY_MRBAYES_FILENAME} relburnin=yes burninfrac= ${MY_REL_BURNIN_PROPORTION}
quit" > ./batch.txt

	
	echo "INFO      | $(date) |          Running tree summaries (sumt function) in MrBayes... "

	mb <./batch.txt > Mrbayes_sumt_log.txt &

	## The '&' calls a batch run of mrbayes on the batch file we created above. What a nice and convenient way to do things. :)

echo "INFO      | $(date) | Step #5: Clean up workspace by deleting temporary files generated during run. "
echo "INFO      | $(date) |          Removing temporary files... "
	
	rm *_1.tmp batch.txt ;


#echo "INFO      | $(date) | Done post-processing ExaBayes results. "
#echo "INFO      | $(date) | Bye. 
#"

echo "----------------------------------------------------------------------------------------------------------"
echo "output file(s): ./ExaBayes_topologies.*.con.tre "
echo "                ./ExaBayes_topologies.*.parts "
echo "                ./ExaBayes_topologies.*.trprobs "
echo "                ./ExaBayes_topologies.*.tstat "
echo "                ./ExaBayes_topologies.*.vstat "
echo "                ./Mrbayes_sumt_log.txt "
echo "                ./ExaBayes_parameterStatistics.out.txt "
echo "                ./ExaBayes_bipartitionBranchLengths.out.txt "
echo "                ./ExaBayes_bipartitions.out.txt "
echo "                ./ExaBayes_bipartitionStatistics.out.txt "
echo "                ./ExaBayes_fileNames.out.txt "
echo "                ./ExaBayes_credibleSet.50cred.out.txt "
echo "* = run name "
echo ""

##########################################################################################
######################################### END ############################################

}



############ SCRIPT OPTIONS
## OPTION DEFAULTS ##
MY_NEXUS=NULL
MY_NUM_REPLICATE_RUNS=2
MY_CREDIBLE_INT=50
MY_REL_BURNIN_PROPORTION=0.25

############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) NEXUS file ('.nex') used as input during ExaBayes run being 
       analyzed
  -r   replicateRuns (def: 2) number of replicate runs specified during your Exabayes run;
         set to value of 2, which is typical for ExaBayes, RAxML, and MrBayes analyses
  -c   credibleInterval (def: 50) credible interval setting for the credibleSet program's 
       -c flag (<credibleInterval> parameter); default is same as credibleSet default
  -b   relativeBurnin (def: 0.25) relative burn-in, or proportion of samples, to discard
       prior to summarizing trees or parameters; default is same as postProcParam default
       but is also applied in MrBayes (see below)
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit

 ${bold}OVERVIEW${reset}
 THIS SCRIPT was designed to run in a current working directory where ExaBayes (Aberer et al. 
 2014) was used to infer one or more Bayesian phylogenetic trees through Bayesian analysis 
 of DNA sequence data, usually largescale datasets from NGS- or -omics-based methods (e.g. 
 multiple loci from ddRADseq, UCEs). The ExaBayesPostProc pipeline automates post-processing 
 of ExaBayes results for you, so that you don't have to rewrite code to do this for multiple 
 runs for one or multiple species/datasets. When run within an ExaBayes run directory, 
 ExaBayesPostProc summarizes the credible set of trees from the run (including branch lengths
 and the effective sample size (ESS) scores for tree bipartitions) and the parameters estimated
 during the run. The program then reformats the ExaBayes files and uses MrBayes to summarize 
 trees, their posterior probabilities, and their errors. 
	This program runs on UNIX-like and Linux systems using commonly distributed utility 
 software, with usage obtained by running the script with the -h flag. It has been tested
 on macOS High Sierra (v10.13+) and Mojave but should work on many earlier versions or
 Linux (tested on CentOS 6/7). ExaBayesPostProc depends on a working ExaBayes (v1.4+) build, 
 with the ExaBayes utility programs credibleSet, extractBips, and postProcParam being available 
 from the UNIX/Linux command line interface (i.e. in your path). The program also uses MrBayes 
 v3.2+ (Ronquist et al. 2012) to take some shortcuts for summarizing trees, and it is assumed 
 that MrBayes is available from the command line as 'mb' or 'mrbayes'. The program checks
 whether all of the dependencies are available and will print messages and quit if a dependency
 is not found.
	The NEXUS file run in ExaBayes, <inputNEXUS>, should have extension '.nex'. If the file 
 is not found, then the program will use the first NEXUS file with extension '.nex' in the
 working directory, or quit.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f ExaBayesPostProc  			 Run the software with the default settings
    piranha -f ExaBayesPostProc --args='-i data.nex'       Default run while specifying input NEXUS
    piranha -f ExaBayesPostProc --args='-r 4'       Analyze results from 4 replicate ExaBayes runs
    piranha -f ExaBayesPostProc --args='-h'       Print this help text

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.2-alpha.1c. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Aberer, A.J., Kobert, K. and Stamatakis, A. 2014. ExaBayes: massively parallel Bayesian 
	tree inference for the whole-genome era. Molecular Biology and Evolution, 31(10), 2553–2556.
 Ronquist, F., Teslenko, M., van der Mark, P., Ayres, D., Darling, A., et al. 2012. MrBayes 
	v. 3.2: efficient Bayesian phylogenetic inference and model choice across a large model 
	space. Systematic Biology, 61, 539-542. 
 Stamatakis, A. 2014. RAxML version 8: a tool for phylogenetic analysis and post-analysis of 
	large phylogenies. Bioinformatics, 30, 1312-1313.

 Created by Justin Bagley on Fri, 29 Jul 2016 11:28:02 -0300.
 Copyright (c) 2016–2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi

############ PARSE THE OPTIONS
while getopts 'r:c:b:' opt ; do
  case $opt in
## ExaBayesPostProc options:
    t) MY_NUM_REPLICATE_RUNS=$OPTARG ;;
    t) MY_CREDIBLE_INT=$OPTARG ;;
    t) MY_REL_BURNIN_PROPORTION=$OPTARG ;;
## Missing and illegal options:
    :) printf "Missing argument for -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
   \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
       echo "$USAGE" >&2
       exit 1 ;;
  esac
done


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
ExaBayesPostProc

# Exit cleanly
safeExit
