#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        # 
# |                                                                                      #
#                                                                                        #
# File: BEASTPostProc.sh                                                                 #
  VERSION="v1.8.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Fri, 29 Jul 2016 11:18:02 -0300.                     #
# Last update: December 26, 2020                                                         #
# Copyright (c) 2016-2021 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <jbagley@jsu.edu>.                                               #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT FOR POST-PROCESSING BEAST GENE TREE & SPECIES TREES OUTPUT FILES ON A     #
# REMOTE, LINUX SUPERCOMPUTING CLUSTER                                                   #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------
UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi

# Source shared functions and variables
# -----------------------------------
FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi

# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
export homebrewDependencies=()
export caskDependencies=()
export gemDependencies=()




BEASTPostProc () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | BEASTPostProc, v1.8.0 July 2020                                "
echo "INFO      | $(date) | Copyright (c) 2016-2021 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | Starting BEASTPostProc pipeline... "

echo "INFO      | $(date) | Step #1: Set up workspace and check machine type. "
############ SET WORKING DIRECTORY AND CHECK MACHINE TYPE
echoShortPWD
checkMachineType

######
## START DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set -xv; fi


echo "INFO      | $(date) | Step #2: Set up BEAST-related environmental variables and summarize run log file. "
###### Use find-based conditionals to set filetypes as different variables, based on default
## extensions for BEAST output files:
	shopt -s nullglob
	## Check for and, if present, assign *BEAST species tree file in run directory to variable.
	if [[ -n $(find . -name "*species.trees" -type f) ]]; then
		MY_STARBEAST_SPECIESTREE_FILE=./*species.trees ;
	fi
	## Check for and, if present, assign BEAST gene tree file in run directory to variable.
	if [[ -n $(find . -name "*.trees" -type f) ]]; then
		MY_BEAST_GENETREE_FILES="$(ls | grep -n ".trees$" | \
		sed 's/[0-9]*://g' | sed '/species.trees/ d')";
	fi
	## Check for and, if present, assign BEAST log file containing all logged reg run parameters in run directory to variable.
	if [[ -n $(find . -name "*.log" -type f) ]]; then
		MY_BEAST_LOGFILE="$(ls | grep -n ".log$" | sed 's/[0-9\_\-]*://g' | sed '/.mle.log/ d')" ;
	fi
	## Check for and, if present, assign MLE log file in run directory to variable.
	if [[ -n $(find . -name "*.mle.log" -type f) ]]; then
		MY_MARGLIKE_LOGFILE=./*.mle.log ;
	fi

	###### Summarize parameters from reg .log file in LogAnalyser (from BEAST v1.8.3):
	###### LOGANALYSER v1.8.3 help menu (-help):
	## Usage: loganalyser [-burnin <i>] [-short] [-hpd] [-ess] [-stdErr] [-marginal <trace_name>] [-help] [-burnin <burnin>] [-short][-hpd] [-std] [<input-file-name> [<output-file-name>]]
	##  -burnin the number of states to be considered as 'burn-in'
	##  -short use this option to produce a short report
	##  -hpd use this option to produce hpds for each trace
	##  -ess use this option to produce ESSs for each trace
	##  -stdErr use this option to produce standard Error
	##  -marginal specify the trace to use to calculate the marginal likelihood
	##  -help option to print this message
	## 
	##  Example: loganalyser test.log
	##  Example: loganalyser -burnin 10000 trees.log out.txt
	#
	##--LogAnalyser outputs the mean, standard error (stdErr), median, lower 95% highest 
	##--posterior density bound (hpdLower), upper 95% HPD bound (hpdUpper), effective sample 
	##--size (ESS), lower 50% HPD (50hpdLower), and upper 50% HPD (50hpdUpperfor) for all 
	##--logged parameters present in a log file fed into the program, after discarding the 
	##--amount of burnin specified by the user.
	#
	##--NOTE: As this step requires a burnin, users should look at their parameter traces in  
	##--Tracer and identify a suitable burnin before proceeding. I often run BEAST/*BEAST for
	##-->=10^7 or 10^8 generations per run; thus, suitable burnin values for me are around
	##--25 to 50 million generations, or more. However, I usually log parameters every 4000 
	##--steps, so when represented as the actual number of logged steps my burnin would 
	##--normally take values between 6250 and 12500.

	if [[ ! -z "$MY_BEAST_LOGFILE" ]]; then
		echo "INFO      | $(date) | BEAST log file present. Analyzing log file in LogAnalyser... "
		"$LOGANALYSER_PATH" -burnin "$NUM_BURNIN_STEPS" "$MY_BEAST_LOGFILE" LogAnalyser.out.txt ;
	else
		echo "WARNING   | $(date) | Something went wrong. Found no BEAST log files. "
	fi


###### Also summarize parameters from ".mle.log" (marginal likelihood estimation) log file, if present, in LogAnalyser (from BEAST v1.8.3):
	if [[ ! -z "$MY_MARGLIKE_LOGFILE" ]]; then
		echo "INFO      | $(date) | Marginal likelihood estimation analysis log file present. Analyzing mle log file in LogAnalyser... "
		"$LOGANALYSER_PATH" -burnin "$NUM_BURNIN_STEPS" "$MY_MARGLIKE_LOGFILE" MLE.LogAnalyser.out.txt ;
	else
		echo "WARNING   | $(date) | Found no marginal likelihood estimation analysis log files. Moving on... "
	fi


echo "INFO      | $(date) | Step #3: If species trees file present, conduct species tree analysis. "
###### First step is to get $NUM_POSTBURNIN_TREES random post-burnin species trees from the posterior distribution of trees:
	if [[ ! -z "$MY_STARBEAST_SPECIESTREE_FILE" ]]; then
		echo "INFO      | $(date) | BEAST species trees present. Analyzing species trees in TreeAnnotator... "

	MY_K_ABBREV_VAL_TENS="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(.*\..\).*/\1/g' | sed 's/.*\.//g' )";
	if [[ "$MY_K_ABBREV_VAL_TENS" = "0" ]]; then
		MY_K_ABBREV_VAL_INT="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(.*\..\).*/\1/g' | sed 's/\..*//g' )";
		MY_K_ABBREV_VAL="$MY_K_ABBREV_VAL_INT";
	else
		MY_K_ABBREV_VAL="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(...\).*/\1/g')"
	fi

	(
		for i in $MY_STARBEAST_SPECIESTREE_FILE; do 
			echo "INFO      | $(date) |      - Name of trees file being analyzed: $i "
			tail -n "$NUM_POSTBURNIN_TREES" "${i}" > ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees ;

		###### Convert your 5000 post-burnin species trees into NEXUS tree file format:
			MY_NTAX="$(grep -h 'Dimensions' $i | awk -F"=" '{print $NF}' | sed 's/\;//g')"	## Pull the number of taxa from the species trees file.
			echo "INFO      | $(date) |      - Number of taxa encountered: $MY_NTAX "

			NUM1="$MY_NTAX" ;
			NUM2="$((2*NUM1))" ;
			NUM3="$((NUM2+11))" ;
			head -n"$NUM3" "$i" > ./nexusHeader.txt ;
			cat ./nexusHeader.txt ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees > ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ;

		###### CLEANUP #1: Next, do cleanup by removing any line starting with "==> " (preferred), OR remove line 1 and line $(calc $MY_HEADER_LENGTH + 1) (not preferred), where calc is bash function defined as $ calc () {    	bc -l <<< "$@" }.
			sed '/^==>\ / d' ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt > ./"${i}"_final_"$MY_K_ABBREV_VAL"k.trees ;
			if [[ -s ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees ]]; then rm ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees ; fi
			if [[ -s ./nexusHeader.txt ]]; then rm ./nexusHeader.txt ; fi
			if [[ -s ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ]]; then rm ./"${i}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ; fi

		###### CLEANUP #2: It's CRITICAL that we make sure the new '*_final_"$MY_K_ABBREV_VAL"k.trees' file ends with a newline (empty line). We use
		##--sed to do this with a simple command that 'adds \n at the end of the file only if it doesn’t already end with a newline',
		##--a trick which I have taken from stackexchange user l0b0's answer given at the following URL:
		##--https://unix.stackexchange.com/questions/31947/how-to-add-a-newline-to-the-end-of-a-file. Thanks l0b0!!
		sed -i -e '$a\' ./"${i}"_final_"$MY_K_ABBREV_VAL"k.trees ;
# '

		###### SUMMARIZE POSTERIOR DISTRIBUTION OF SPECIES TREES USING TREEANNOTATOR
		###### TREEANNOTATOR v1.8.3 HELP:
		## Usage: treeannotator [-heights <keep|median|mean|ca>] [-burnin <i>] [-burninTrees <i>] [-limit <r>] [-target <target_file_name>] [-help] [-forceDiscrete] [-hpd2D <the HPD interval to be used for the bivariate traits>] <input-file-name> [<output-file-name>]
		##  -heights an option of 'keep' (default), 'median', 'mean' or 'ca'
		##  -burnin the number of states to be considered as 'burn-in'
		##  -burninTrees the number of trees to be considered as 'burn-in'
		##  -limit the minimum posterior probability for a node to be annotated
		##  -target specifies a user target tree to be annotated
		##  -help option to print this message
		##  -forceDiscrete forces integer traits to be treated as discrete traits.
		##  -hpd2D specifies a (vector of comma seperated) HPD proportion(s)
		## 
		## Example: treeannotator test.trees out.txt
		## Example: treeannotator -burnin 100 -heights mean test.trees out.txt
		## Example: treeannotator -burnin 100 -target map.tree test.trees out.txt

		"$TREEANNOTATOR_PATH" -burnin 0 -heights mean "${i}"_final_"$MY_K_ABBREV_VAL"k.trees "${i}".treeannotator.out ;

		mkdir "${i}".treeannotator ;
		mv ./"${i}".treeannotator.out ./"${i}".treeannotator ;

		done
	)

	###### Rename species tree files:
	(
		shopt -s nullglob
		files=(./*_final_"$MY_K_ABBREV_VAL"k.trees)
		if [[ "${#files[@]}" -gt 0 ]] ; then
			echo "INFO      | $(date) | Renaming final ${MY_K_ABBREV_VAL}k post-burnin species tree files."
	        for j in ./*species.trees_final_"$MY_K_ABBREV_VAL"k.trees; do
				echo "$j"
				mv "$j" ${j/*/final_"$MY_K_ABBREV_VAL"k.species.trees} ;
	        done
	    else
	        echo "WARNING   | $(date) | Failed to rename final ${MY_K_ABBREV_VAL}k post-burnin species tree files. "
	    fi
	)

	###### Rename treeannotator output folders:
	(
		shopt -s nullglob
		folders=(./*.treeannotator)
		if [[ "${#folders[@]}" -gt 0 ]] ; then
			echo "INFO      | $(date) | Previous step succeeded. Renaming folders with TreeAnnotator species tree results. "
			for k in ./*species.trees.treeannotator; do
				echo "$k"
				mv "$k" ${k/*/treeannotator.species.tree} ;
			done
		else
			echo "WARNING   | $(date) | ERROR: Found no folders with TreeAnnotator species tree results. "
		fi
	)

	###### Rename treeannotator output species tree file:
	cd /treeannotator.species.tree/;
		mv ./*.treeannotator.out ./MCC.species.tree.out
		cp ./MCC.species.tree.out ../treeannotator.species.tree
	cd ..;
	#(
	#	for l in ./treeannotator.species.tree/*.treeannotator.out; do
	#        mv "$l" ${l/*/MCC.species.tree.out} ;
	#    done
	#)
    #    mv MCC.species.tree.out ./treeannotator.species.tree


else
	echo "INFO      | $(date) | Found no BEAST species trees. Skipping species tree analysis... "
fi




###################### END OF Step #3 / SPECIES TREE ANALYSIS ############################




echo "INFO      | $(date) | Step #4: If gene trees file present, conduct gene tree analysis. "
###### First step is to get $NUM_POSTBURNIN_TREES random post-burnin gene trees from the posterior distribution of trees:
	if [[ ! -z "$MY_BEAST_GENETREE_FILES" ]]; then
		echo "INFO      | $(date) | BEAST gene trees present for one or multiple partitions. Analyzing gene trees in TreeAnnotator... "

	MY_K_ABBREV_VAL_TENS="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(.*\..\).*/\1/g' | sed 's/.*\.//g' )";
	if [[ "$MY_K_ABBREV_VAL_TENS" = "0" ]]; then
		MY_K_ABBREV_VAL_INT="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(.*\..\).*/\1/g' | sed 's/\..*//g' )";
		MY_K_ABBREV_VAL="$MY_K_ABBREV_VAL_INT";
	else
		MY_K_ABBREV_VAL="$(calc $NUM_POSTBURNIN_TREES/1000 | sed 's/\(...\).*/\1/g')"
	fi

	(
		for m in ${MY_BEAST_GENETREE_FILES}; do 
			echo "INFO      | $(date) |      - Name of trees file being analyzed: $m "
			tail -n "$NUM_POSTBURNIN_TREES" "${m}" > ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees ;		

		###### Convert your 5000 post-burnin gene trees into NEXUS tree file format:
			MY_NTAX="$(grep -h 'Dimensions' $m | awk -F"=" '{print $NF}' | sed 's/\;//g')"
			echo "INFO      | $(date) |      - Number of taxa encountered: $MY_NTAX "
			
			NUM1="$MY_NTAX" ;
			NUM2="$((2*NUM1))" ;
			NUM3="$((NUM2+11))" ;
			head -n"$NUM3" "$m" > ./nexusHeader.txt ;
			cat ./nexusHeader.txt ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees > ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ;

		###### CLEANUP #1: Next, do cleanup by removing any line starting with "==> " (preferred), OR remove line 1 and line $(calc $MY_HEADER_LENGTH + 1) (not preferred), where calc is bash function defined as $ calc () {    	bc -l <<< "$@" }.
			sed '/^==>\ / d' ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt > ./"${m}"_final_"$MY_K_ABBREV_VAL"k.trees ;
			if [[ -s ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees ]]; then rm ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees ; fi
			if [[ -s ./nexusHeader.txt ]]; then rm ./nexusHeader.txt ; fi
			if [[ -s ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ]]; then rm ./"${m}"_"$MY_K_ABBREV_VAL"k_postburn.trees.txt ; fi

		###### CLEANUP #2: It's CRITICAL that we make sure the new "*_final_"$MY_K_ABBREV_VAL"k.trees" file ends with a newline (empty line). We use
		##--sed to do this with a simple command that "adds \n at the end of the file only if it doesn’t already end with a newline",
		##--a trick which I have taken from stackexchange user l0b0's answer given at the following URL:
		##--https://unix.stackexchange.com/questions/31947/how-to-add-a-newline-to-the-end-of-a-file. Thanks l0b0!!
			sed -i -e '$a\' ./"${m}"_final_"$MY_K_ABBREV_VAL"k.trees
# '

		###### SUMMARIZE POSTERIOR DISTRIBUTION OF GENE TREES USING TREEANNOTATOR
			"$TREEANNOTATOR_PATH" -burnin 0 -heights mean "${m}"_final_"$MY_K_ABBREV_VAL"k.trees "${m}".treeannotator.out ;

		###### Change name of annotated tree file output by TreeAnnotator for this gene/partition:
			partitionname="$(echo $m | sed 's/^[a-zA-Z0-9\_]*\.//g' | sed 's/\.trees//g')"
			mv ./*.treeannotator.out ./MCC."${partitionname}".gene.tree.out

		###### Make new directory for TreeAnnotator results for this gene/partition, with the
		###### desired name, and then move the TreeAnnotator results into the new folder:
			mkdir ./treeannotator."${partitionname}".gene.tree
			mv ./MCC."${partitionname}".gene.tree.out ./treeannotator."${partitionname}".gene.tree
			
			mv ./"${m}"_final_"$MY_K_ABBREV_VAL"k.trees ./final_"$MY_K_ABBREV_VAL"k."${partitionname}".gene.trees ;

		done
	)

else
	echo "INFO      | $(date) | Found no BEAST gene trees. Skipping gene tree analysis... "
fi

############ CLEAN UP WORKING DIR BY DELETING TEMPORARY FILES.
	
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.

echo "INFO      | $(date) | Done." 
echo "----------------------------------------------------------------------------------------------------------"
echo ""

## END DEBUG MODE
if [[ "$MY_DEBUG_MODE_SWITCH" != "0" ]]; then set +xv; fi
######

##########################################################################################
######################################### END ############################################

}


############################### BEGIN OPTIONS AND USAGE ##################################


############ CREATE USAGE & HELP TEXTS
USAGE="
Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -l   loganalyserPath (def: NULL) mandatory absolute path to loganalyser executable in 
       the bin/ folder of recent BEAST v1.8.3+ distribution
  -t   treeannotatorPath (def: NULL) mandatory absolute path to treeannotator executable 
       in the bin/ folder of a recent BEAST v1.8.3+ distribution
  -b   burninSteps (def: 10000) number of states to discard as 'burn-in' 
  -p   postburninTrees (def: 5000) number of post-burnin trees to extract for summarizing
       the posterior distributions of parameters and trees in TreeAnnotator
  -h   help text (also: --help) echo this help text and exit
  -V   version (also: --version) echo version of this script and exit
  -d   debug (def: 0, off; 1, on also: --debug) run function in Bash debug mode

 ${bold}OVERVIEW${reset}
 THIS SCRIPT automates post-processing of BEAST gene tree and species tree results output
 on a remote, Linux-based supercomputing cluster (e.g. at a high performance computing 
 facility), including summarizing the log file of a BEAST run, as well as summarizing the
 posterior distributions of gene trees and species trees using TreeAnnotator. This script
 was made with BEAST v1.8.3+ in mind (Drummond et al. 2012; currently at v1.10; see 
 http://beast.community), but should also work on output files from BEAST v2.4+ (Bouckaert 
 et al. 2014). This script is still being tested. -b and -p flags take integer values of 
 zero or higher, set by the user. [ In prep. ]

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:
 
    piranha -f BEASTPostProc -l <loganalyserPath> -t <treeannotatorPath> -b <burninSteps> -p <postburninTrees>
    piranha -f BEASTPostProc -h       Show this help text and exit

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a4. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Bouckaert, R., Heled, J., Künert, D., Vaughan, T.G., Wu, C.H., Xie, D., Suchard, M.A., Rambaut,
	A., Drummond, A.J. 2014) BEAST2: a software platform for Bayesian evolutionary analysis. 
	PLoS Computational Biology, 10, e1003537.
 Drummond, A.J., Suchard, M.A., Xie, D., Rambaut, A. 2012. Bayesian phylogenetics with BEAUti 
	and the BEAST 1.7. Molecular Biology and Evolution, 29, 1969-1973.

 Created by Justin Bagley on Fri, 29 Jul 2016 11:18:02 -0300.
 Copyright (c) 2016-2021 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "-help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi

############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;
	if [[ -s ./*.tmp ]]; then rm ./*.tmp ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#perl -p -i -e $'s/\ /\n/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-l' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		LOGANALYSER_PATH=NULL ;
	else 
		MY_ARG="$(grep -h '\-l' ./args.txt | perl -pe 's/\-l//g' | perl -pe 's/\ //g')";
		LOGANALYSER_PATH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-t' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		TREEANNOTATOR_PATH=NULL ;
	else 
		MY_ARG="$(grep -h '\-t' ./args.txt | perl -pe 's/\-t//g' | perl -pe 's/\ //g')";
		TREEANNOTATOR_PATH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-b' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		NUM_BURNIN_STEPS=10000 ;
	else 
		MY_ARG="$(grep -h '\-b' ./args.txt | perl -pe 's/\-b//g' | perl -pe 's/\ //g')";
		NUM_BURNIN_STEPS="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-p' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		NUM_POSTBURNIN_TREES=5000 ;
	else 
		MY_ARG="$(grep -h '\-p' ./args.txt | perl -pe 's/\-p//g' | perl -pe 's/\ //g')";
		NUM_POSTBURNIN_TREES="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-d' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-d' ./args.txt | perl -pe 's/\-d//g' | perl -pe 's/\ //g')";
		MY_DEBUG_MODE_SWITCH="$MY_ARG" ;
	fi
	if [[  "$(grep -h '\-\-debug' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_DEBUG_MODE_SWITCH=0 ;
	else 
		MY_DEBUG_MODE_SWITCH=1 ;
	fi

## TODO: Add an "all" option for -p flag, so that if the value is all the program summarizes
## posterior distributions of parameters and trees in TreeAnnotator over _ALL_ posterior 
## (post-burnin) trees...

# ############ PARSE THE OPTIONS
# while getopts 'l:t:b:p:' opt ; do
#   case $opt in
# ## taxonCompFilter options:
#     l) LOGANALYSER_PATH=$OPTARG ;;
#     t) TREEANNOTATOR_PATH=$OPTARG ;;
#     b) NUM_BURNIN_STEPS=$OPTARG ;;
#     p) NUM_POSTBURNIN_TREES=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done


################################ END OPTIONS AND USAGE ###################################


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
BEASTPostProc

# Exit cleanly
safeExit
