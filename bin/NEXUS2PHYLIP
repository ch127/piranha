#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: NEXUS2PHYLIP.sh                                                                  #
  VERSION="v1.5.0"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.                     #
# Last update: June 11, 2019                                                             #
# Copyright (c) 2018-2019 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT CONVERTING SEQUENTIAL NEXUS FILE INTO PHYLIP (AND OPTIONALLY ALSO FASTA)  #
# DNA SEQUENCE ALIGNMENT FORMAT                                                          #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




NEXUS2PHYLIP () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | NEXUS2PHYLIP, v1.5.0 June 2019  (part of PIrANHA v0.3a1) "
echo "INFO      | $(date) | Copyright (c) 2018-2019 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Starting NEXUS2PHYLIP pipeline... "
	echo "INFO      | $(date) | Step #1: Set up workspace."
fi
############ STEP #1: SETUP FUNCTIONS AND ENVIRONMENTAL VARIABLES
## Setting up workspace is now accomplished by new standard code at start of script that
## defines and sources $UTILS_LOCATION, $FUNCS_LOCATION, and $VARS_LOCATION.

if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Get NEXUS file and data characteristics, convert NEXUS to FASTA format. "
fi
############ STEP #2: GET NEXUS FILE & DATA CHARACTERISTICS, CONVERT NEXUS TO FASTA FORMAT
##--Extract charset info from sets block at end of NEXUS file:
	MY_NEXUS_CHARSETS="$(egrep "charset|CHARSET" $MY_NEXUS | \
	awk -F"=" '{print $NF}' | sed 's/\;/\,/g' | \
	awk '{a[NR]=$0} END {for (i=1;i<NR;i++) print a[i];sub(/.$/,"",a[NR]);print a[NR]}' | \
	sed 's/\,/\,'$CR'/g' | sed 's/^\ //g')" ;

##--Count number of loci present in the NEXUS file, based on number of charsets defined.
##--Also get corrected count starting from 0 for numbering loci below...
	MY_NLOCI="$(echo "$MY_NEXUS_CHARSETS" | wc -l)" ;
	MY_CORR_NLOCI="$(calc $MY_NLOCI - 1)" ;

##--This is the base name of the original nexus file, so you have it. This WILL work regardless
##--of whether the NEXUS filename extension is written in lowercase or in all caps, ".NEX".
	MY_NEXUS_BASENAME="$(echo $MY_NEXUS | sed 's/\.\///g; s/\.[A-Za-z]\{3\}$//g')" ;

##--Convert data file from NEXUS to fasta format using bioscripts.convert v0.4 Python package:
	if [[ -s "$MY_NEXUS_BASENAME".fasta ]]; then
		rm ./"$MY_NEXUS_BASENAME".fasta ;
	fi
	convbioseq fasta $MY_NEXUS > "$MY_NEXUS_BASENAME".fasta ;
	MY_FASTA="$(echo "$MY_NEXUS_BASENAME".fasta | sed 's/\.\///g; s/\.nex//g')" ;

##--Convert data file from fasta to PHYLIP format using Nayoki Takebayashi fasta2phylip.pl
##--Perl script (must be available from CLI):
	if [[ "$MY_NAME_NCHARS_SWITCH" = "0" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" = "0" ]]; then

		if [[ -s "$MY_NEXUS_BASENAME".phy ]]; then
			rm ./"$MY_NEXUS_BASENAME".phy ;
		fi
		fasta2phylip.pl "$MY_FASTA" > "$MY_NEXUS_BASENAME".phy ;

	elif [[ "$MY_NAME_NCHARS_SWITCH" != "0" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" = "0" ]]; then

		if [[ -s "$MY_NEXUS_BASENAME".phy ]]; then
			rm ./"$MY_NEXUS_BASENAME".phy ;
		fi
		fasta2phylip.pl -c "$MY_NAME_NCHARS_SWITCH" "$MY_FASTA" > "$MY_NEXUS_BASENAME".phy ;

	elif [[ "$MY_NAME_NCHARS_SWITCH" != "0" ]] && [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then

		if [[ -s "$MY_NEXUS_BASENAME".phy ]]; then
			rm ./"$MY_NEXUS_BASENAME".phy ;
		fi
		fasta2phylip.pl -c "$MY_NAME_NCHARS_SWITCH" -v "$MY_FASTA" > "$MY_NEXUS_BASENAME".phy ;

	fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #3: Fix PHYLIP tip taxon names. "
fi
############ STEP #3: FIX SPACE BETWEEN TIP TAXON NAME AND SEQUENCE, AND CHECK OUTPUT PHYLIP ALIGNMENT CHARACTERISTICS AGAINST NEXUS INFO.
##--Tip taxon name fixes are implemented, but code for checking PHYLIP file against NEXUS
##--characteristics is _in prep_.

	if [[ "$MY_NAME_NCHARS_SWITCH" = "0" ]]; then

		perl -p -i -e 's/^([A-Za-z0-9\-\_\ ]{10})(.*)/$1\ $2/g' "$MY_NEXUS_BASENAME".phy ;

	elif [[ "$MY_NAME_NCHARS_SWITCH" != "0" ]] && [[ "$MY_NAME_NCHARS_SWITCH" -le "9" ]]; then

		if [[ "$MY_NAME_NCHARS_SWITCH" = "9" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{9})[A-Za-z\_0-9\-\ ]{1}(.*)/$1\ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "8" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{8})[A-Za-z\_0-9\-\ ]{2}(.*)/$1\ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "7" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{7})[A-Za-z\_0-9\-\ ]{3}(.*)/$1\ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "6" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{6})[A-Za-z\_0-9\-\ ]{4}(.*)/$1\ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "5" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{5})[A-Za-z\_0-9\-\ ]{5}(.*)/$1\ \ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "4" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{4})[A-Za-z\_0-9\-\ ]{6}(.*)/$1\ \ \ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "3" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{3})[A-Za-z\_0-9\-\ ]{7}(.*)/$1\ \ \ \ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "2" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{2})[A-Za-z\_0-9\-\ ]{8}(.*)/$1\ \ \ \ \ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi
		if [[ "$MY_NAME_NCHARS_SWITCH" = "1" ]]; then
			perl -p -i -e 's/^([A-Za-z\_0-9\-\ ]{1})[A-Za-z\_0-9\-\ ]{9}(.*)/$1\ \ \ \ \ \ \ \ \ $2/g' "$MY_NEXUS_BASENAME".phy ;
		fi

	elif [[ "$MY_NAME_NCHARS_SWITCH" != "0" ]] && [[ "$MY_NAME_NCHARS_SWITCH" -gt "9" ]]; then

		echo "WARNING!  | $(date) |          ERROR: Illegal tip taxon name size (only accepts integer values from 1-9). Quitting... "
		exit 1

	fi


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #4: Clean up intermediate FASTA files in working directory. "
fi
############ STEP #4: CLEAN UP (REMOVE, OR KEEP & ORGANIZE) INTERMEDIATE FASTA FILES IN WORKING DIRECTORY.
##--Clean up intermediate fasta files:
	if [[ "$MY_KEEP_FASTA_SWITCH" = "0" ]]; then

		rm ./"$MY_NEXUS_BASENAME".fasta

	elif [[ "$MY_KEEP_FASTA_SWITCH" != "0" ]] && [[ "$MY_OVERWRITE_SWITCH" = "0" ]]; then

	    if [[ -s fasta/ ]]; then
		    # rm -r fasta/;
		    if [[ ! -s NEXUS2PHYLIP_fasta/ ]]; then mkdir NEXUS2PHYLIP_fasta/; fi
			mv ./*.fasta ./NEXUS2PHYLIP_fasta/;
	    else
		    if [[ ! -s fasta/ ]]; then mkdir fasta/; fi
			mv ./*.fasta ./fasta/;
		fi

	elif [[ "$MY_KEEP_FASTA_SWITCH" != "0" ]] && [[ "$MY_OVERWRITE_SWITCH" = "1" ]]; then

	    if [[ -s fasta/ ]]; then
		    rm -r fasta/;
		   if [[ ! -s fasta/ ]]; then mkdir fasta/; fi
	    else
		    if [[ ! -s fasta/ ]]; then mkdir fasta/; fi
		fi
		mv -f ./*.fasta ./fasta/;

	fi


#if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
#	echo "INFO      | $(date) | Successfully created PHYLIP ('.phy') input file from the existing NEXUS file... "
#	echo "INFO      | $(date) | Bye.
#"
#fi

echo "----------------------------------------------------------------------------------------------------------"
echo ""

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) mandatory name of input NEXUS file in sequential NEXUS format
  -c   nameChars (def: 10-character names) number of characters to which tip taxon names
       should be shortened, allowing integer values ranging 1-9
  -v   verbose (def: 0, off; 1, on) specify verbose filename conversion and step output to
       screen (stdout)
  -k   keepFasta (def: 0, off; 1, on, keep fasta intermediate) whether or not to keep
       intermediate fasta files generated during the run
  -o   fastaOverwrite (def: 0, off; 1, on) whether or not to force overwrite of fasta
       files in current working directory (e.g. from previous steps of pipeline)
  -h   help text (also: --help) echo this help text and exit
  -H   verbose help text (also: --Help) echo verbose help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 Reads in a single NEXUS datafile and converts it to PHYLIP ('.phy') format (Felsenstein
 2002). Sequence names may include alphanumeric, hyphen, and underscore characters but no
 spaces, or else there will be issues. By default, program runs quietly with no ouput to
 screen or stderr or stdout files; however, -v option causes verbose run information to be
 output to screen (stdout).
	The Naoki Takebayashi 'fasta2phylip.pl' Perl script distributed with PIrANHA must be in 
 working directory or available from command line (in your path). The only other dependency 
 is Perl (v5+), which is usually already installed on mac and Linux distributions. Tested 
 with Perl v5.1+ on macOS High Sierra (v10.13+).

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f NEXUS2PHYLIP --args='-i <inputNEXUS> -v 1 -k 1'  Run on user NEXUS while echoing output to 
     										   				  	screen and keeping intermediate FASTA files
    piranha -f NEXUS2PHYLIP -a '-i <inputNEXUS> -v 1 -k 1'  	Same as above, but with -a flag

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v1.0.0. GitHub repository, Available at:
	<https://github.com/justincbagley/PIrANHA>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.
 Copyright (c) 2018-2019 Justin C. Bagley. All rights reserved.
"

VERBOSE_USAGE="Usage: $(basename $0) [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) mandatory name of input NEXUS file in sequential NEXUS format
  -c   nameChars (def: 10-character names) number of characters to which tip taxon names
       should be shortened, allowing integer values ranging 1-9
  -v   verbose (def: 0, off; 1, on) specify verbose filename conversion and step output to
       screen (stdout)
  -k   keepFasta (def: 0, off; 1, on, keep fasta intermediate) whether or not to keep
       intermediate fasta files generated during the run
  -o   fastaOverwrite (def: 0, off; 1, on) whether or not to force overwrite of fasta
       files in current working directory (e.g. from previous steps of pipeline)
  -h   help text (also: --help) echo this help text and exit
  -H   verbose help text (also: --Help) echo verbose help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 Reads in a single NEXUS datafile and converts it to PHYLIP ('.phy') format (Felsenstein
 2002). Sequence names may include alphanumeric, hyphen, and underscore characters but no
 spaces, or else there will be issues. By default, program runs quietly with no ouput to
 screen or standard output files; however, -v option causes verbose run information to be
 output to screen (stdout).
	The Naoki Takebayashi 'fasta2phylip.pl' Perl script distributed with PIrANHA must be in 
 working directory or available from command line (in your path). The only other dependency 
 is Perl (v5+), which is usually already installed on mac and Linux distributions. Tested 
 with Perl v5.1+ on macOS High Sierra (v10.13+).

 ${bold}DETAILS${reset}
 The -i flag specifies the name of the input NEXUS file, which should be a standard NEXUS
 DNA sequence data file in sequential format (sequences on one line per individual/taxon).
 This flag is mandatory.

 The -c flag specifies an integer number of character to shorten tip taxon names to, for
 example, such that a value of 9 will reduce all tip taxon names to 9 alphanumeric
 characters followed by a space by taking the first 9 characters of the names (for a 10-
 character total at the start of each sequence-containing line of the alignment file. This
 takes advantage of -c flag capabilities in a dependency Perl script. By default, 10-character
 names will be kept, and single spaces will be placed between tip taxon names and corresponding
 sequences.

 The -v flag allows users to choose verbose output that prints name conversions, as well as
 step information (what the program is doing), to stdout. Off by default.

 The -k flag specifies whether to keep intermediate fasta files, one per <inputNexus>,
 generated during a run of the script. Fasta files are deleted by default, but if set to
 keep (1), fastas will be moved to a sub-folder named 'fasta' at the end of the run.

 The -o flag allows the user to specify whether or not to force output file overwrite of
 fasta files in current working directory and is set to on as the default; set to 0 to skip
 overwrite and always preserve existing fasta files, if present (not recommended).

 Dependencies: Perl and Naoki Takebayashi 'fasta2phylip.pl' Perl script in working
 directory or available from command line (in your path). Tested with Perl v5.1+ on macOS
 High Sierra (v10.13+).

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f NEXUS2PHYLIP --args='-i <inputNEXUS> -v 1 -k 1'  Run on user NEXUS while echoing output to 
     										   				  	screen and keeping intermediate FASTA files
    piranha -f NEXUS2PHYLIP -a '-i <inputNEXUS> -v 1 -k 1'  	Same as above, but with -a flag

 ${bold}CITATION${reset}
 Bagley, J.C. 2019. PIrANHA v0.3a1. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.
 Copyright (c) 2018-2019 Justin C. Bagley. All rights reserved.
"

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-H" ]] || [[ "$1" == "--Help" ]]; then
	echo "$VERBOSE_USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename $0) $VERSION";
	exit
fi


############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_NEXUS=NULL ;
	else 
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		MY_NEXUS="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-c' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_NAME_NCHARS_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-c' ./args.txt | perl -pe 's/\-c//g' | perl -pe 's/\ //g')";
		MY_NAME_NCHARS_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_KEEP_FASTA_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-k' ./args.txt | perl -pe 's/\-k//g' | perl -pe 's/\ //g')";
		MY_KEEP_FASTA_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_OVERWRITE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-o' ./args.txt | perl -pe 's/\-o//g' | perl -pe 's/\ //g')";
		MY_OVERWRITE_SWITCH="$MY_ARG" ;
	fi
#


# ############ PARSE THE OPTIONS
# while getopts 'i:c:v:k:o:' opt ; do
#   case $opt in
# ## NEXUS2PHYLIP options:
#     i) MY_NEXUS=$OPTARG ;;
#     c) MY_NAME_NCHARS_SWITCH=$OPTARG ;;
#     v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
#     k) MY_KEEP_FASTA_SWITCH=$OPTARG ;;
#     o) MY_OVERWRITE_SWITCH=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# # Store the remaining part as arguments.
# # args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
NEXUS2PHYLIP

# Exit cleanly
safeExit
