#!/bin/sh

##########################################################################################
#  __  o  __   __   __  |__   __                                                         #
# |__) | |  ' (__( |  ) |  ) (__(                                                        #
# |                                                                                      #
#                                                                                        #
# File: NEXUS2PHYLIP.sh                                                                  #
  VERSION="v1.6.6"                                                                       #
# Author: Justin C. Bagley                                                               #
# Date: Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.                     #
# Last update: April 17, 2020                                                            #
# Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.                         #
# Please report bugs to <bagleyj@umsl.edu>.                                              #
#                                                                                        #
# Description:                                                                           #
# SHELL SCRIPT CONVERTING SEQUENTIAL NEXUS FILE INTO PHYLIP (AND OPTIONALLY ALSO FASTA)  #
# DNA SEQUENCE ALIGNMENT FORMAT                                                          #
#                                                                                        #
##########################################################################################

# Provide a variable with the location of this script.
SCRIPT_PATH="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Source Scripting Utilities
# -----------------------------------
# These shared utilities provide many functions which are needed to provide
# the functionality in this boilerplate. This script will fail if they can
# not be found.
# -----------------------------------

UTILS_LOCATION="${SCRIPT_PATH}/../lib/utils.sh" # Update this path to find the utilities.

if [[ -f "${UTILS_LOCATION}" ]]; then
  source "${UTILS_LOCATION}"
else
  echo "Please find the file util.sh and add a reference to it in this script. Exiting..."
  exit 1
fi


# Source shared functions and variables
# -----------------------------------

FUNCS_LOCATION="${SCRIPT_PATH}/../lib/sharedFunctions.sh" # Update this path to find the shared functions.
VARS_LOCATION="${SCRIPT_PATH}/../lib/sharedVariables.sh" # Update this path to find the shared variables.

if [[ -f "${FUNCS_LOCATION}" ]] && [[ -f "${VARS_LOCATION}" ]]; then
  source "${FUNCS_LOCATION}" ;
  source "${VARS_LOCATION}" ;
else
  echo "Please find the files sharedFunctions.sh and sharedVariables.sh and add references to them in this script. Exiting... "
  exit 1
fi


# trapCleanup Function
# -----------------------------------
# Any actions that should be taken if the script is prematurely
# exited.  Always call this function at the top of your script.
# -----------------------------------
trapCleanup () {
  echo ""
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  die "Exit trapped. In function: '${FUNCNAME[*]}'"
}

# safeExit
# -----------------------------------
# Non destructive exit for when script exits naturally.
# Usage: Add this function at the end of every script.
# -----------------------------------
safeExit () {
  # Delete temp files, if any
  if is_dir "${tmpDir}"; then
    rm -r "${tmpDir}"
  fi
  trap - INT TERM EXIT
  exit
}

# Set Flags
# -----------------------------------
# Flags which can be overridden by user input.
# Default values are below
# -----------------------------------
quiet=false
printLog=false
verbose=false
force=false
strict=false
debug=false
args=()

# Set Temp Directory
# -----------------------------------
# Create temp directory with three random numbers and the process ID
# in the name.  This directory is removed automatically at exit.
# -----------------------------------
tmpDir="/tmp/${SCRIPT_NAME}.$RANDOM.$RANDOM.$RANDOM.$$"
(umask 077 && mkdir "${tmpDir}") || {
  die "Could not create temporary directory! Exiting."
}

# Logging
# -----------------------------------
# Log is only used when the '-l' flag is set.
#
# To never save a logfile change variable to '/dev/null'
# Save to Desktop use: $HOME/Desktop/${SCRIPT_BASENAME}.log
# Save to standard user log location use: $HOME/Library/Logs/${SCRIPT_BASENAME}.log
# -----------------------------------
logFile="$HOME/Library/Logs/${SCRIPT_BASENAME}.log"

# Check for Dependencies
# -----------------------------------
# Arrays containing package dependencies needed to execute this script.
# The script will fail if dependencies are not installed.  For Mac users,
# most dependencies can be installed automatically using the package
# manager 'Homebrew'.  Mac applications will be installed using
# Homebrew Casks. Ruby and gems via RVM.
# -----------------------------------
homebrewDependencies=()
caskDependencies=()
gemDependencies=()




NEXUS2PHYLIP () {

######################################## START ###########################################
##########################################################################################

echo "INFO      | $(date) |----------------------------------------------------------------"
echo "INFO      | $(date) | NEXUS2PHYLIP, v1.6.6 April 2020                                "
echo "INFO      | $(date) | Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved. "
echo "INFO      | $(date) |----------------------------------------------------------------"

######################################## START ###########################################
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Starting NEXUS2PHYLIP pipeline... "
	echo "INFO      | $(date) | Step #1: Set up workspace."
fi
############ STEP #1: SET UP VARIABLES AND USEFUL FUNCTIONS
###### Set working directory and filetypes as different variables:
if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Setting user-specified path to: "
	echo "INFO      | $(date) | $PWD "	
	echo "INFO      | $(date) | Input file: $MY_NEXUS "
	echo "INFO      | $(date) | Examining current directory, setting variables... "
fi
checkMachineType


if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #2: Get NEXUS file and data characteristics. "
fi
############ STEP #2: GET NEXUS FILE & DATA CHARACTERISTICS

	cp "$MY_NEXUS" ./nexus.tmp ;

## This is the base name of the original nexus file, so you have it. This WILL work regardless
## of whether the NEXUS filename extension is written in lowercase or in all caps, ".NEX".
	MY_NEXUS_BASENAME="$(echo "$MY_NEXUS" | sed 's/\.\///g; s/\.[A-Za-z]\{3\}$//g')" ;
		#	echo "INFO      | $(date) | Basename check:"
		#	echo "INFO      | $(date) | ${MY_NEXUS_BASENAME}"

## Check for character sets in the input NEXUS file.
	MY_NEXUS_CHARSETS_CHECK="$(awk '/charset/ || /CHARSET/ { count++ } END { print count }' ./nexus.tmp )";
	if [[ -z "$MY_NEXUS_CHARSETS_CHECK" ]]; then MY_NEXUS_CHARSETS_CHECK="0"; fi
		#	echo "INFO      | $(date) | Charsets check:"
		#	echo "INFO      | $(date) | ${MY_NEXUS_CHARSETS_CHECK}"

##################
##################
if [[ "$MY_CHARSETS_SWITCH" = "0" ]] && [[ "$MY_NEXUS_CHARSETS_CHECK" = "0" ]]; then

	## Extract NEXUS header and no. taxa information:
	MY_HEADER_MAT_LINE="$(grep -n 'MATRIX\|Matrix\|matrix' ./nexus.tmp | sed 's/\:.*//g')";
	MY_NTAX="$(grep -h 'ntax\|Ntax\|NTAX' ./nexus.tmp | sed 's/.*\=\([0-9]*\)\ .*/\1/g')";
	#	echo "No. taxa: $MY_NTAX"

	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Step #3: Convert NEXUS to PHYLIP format. "
	fi
	############ STEP #3: CONVERT NEXUS TO PHYLIP FORMAT
		
	###	
		if [[ "${machine}" = "Mac" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed -i.bak '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed -i.bak 's/^$\n//g' ./nexus.tmp ;
			rm ./*.bak;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed 's/^$\n//g' ./nexus.tmp ;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
	
			## Now that the matrix is isolated, get no. characters:
			MY_NCHAR="$(head -n1 ./matrixOnly.tmp | wc -c | sed 's/\ //g')";
			MY_CORR_NCHAR="$(calc $MY_NCHAR-1)";

			## Make PHYLIP header:
			echo "$MY_NTAX  $MY_CORR_NCHAR" > ./phylip_header.tmp ;
			
			## Paste taxon names spaces with the matrix (put back together):
			paste ./taxon_names_spaces.tmp ./matrixOnly.tmp > ./phylip_full_matrix.tmp
			
			## Make PHYLIP file:
			cat ./phylip_header.tmp ./phylip_full_matrix.tmp > "$MY_NEXUS_BASENAME".phy ;
	###
	
fi
##################
##################


##################
##################
if [[ "$MY_CHARSETS_SWITCH" = "0" ]] && [[ "$MY_NEXUS_CHARSETS_CHECK" != "0" ]]; then

	## Extract charset info from sets block at end of NEXUS file:
	MY_NEXUS_CHARSETS="$(grep -n "charset\|CHARSET" ./nexus.tmp)";
	#	echo "$MY_NEXUS_CHARSETS"
	if [[ ! -z "$MY_NEXUS_CHARSETS" ]]; then 
		## Count number of loci present in the NEXUS file, based on number of charsets defined.
		## Also get corrected count starting from 0 for numbering loci below...
		MY_NLOCI="$(echo "$MY_NEXUS_CHARSETS" | wc -l)" ;
	#	echo "No. loci: $MY_NLOCI"
	#	MY_CORR_NLOCI="$(calc $MY_NLOCI - 1)" ;
	#	echo "$MY_CORR_NLOCI"
	
		## Extract charsets from file:
		MY_NUM_LINES="$(wc -l "$MY_NEXUS" | sed 's/\.\///g; s/\ '"$MY_NEXUS"'.*//g')";
		# ^^^^ NOTE: It's OK to use "$MY_NEXUS" here but ./nexus.tmp everywhere else here down.
		MY_SETS_BLOCK_STARTLINE="$(grep -n "begin sets\|BEGIN SETS" ./nexus.tmp | sed 's/\:.*//g')";
		sed -n ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'p' ./nexus.tmp > "$MY_NEXUS_BASENAME".charsets.txt ;
	
		## Remove charsets from file, while accommodating different machine types...
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'d' ./nexus.tmp ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'d' ./nexus.tmp ;
		fi
	fi
	
	## Extract NEXUS header and no. taxa information:
	MY_HEADER_MAT_LINE="$(grep -n 'MATRIX\|Matrix\|matrix' ./nexus.tmp | sed 's/\:.*//g')";
	MY_NTAX="$(grep -h 'ntax\|Ntax\|NTAX' ./nexus.tmp | sed 's/.*\=\([0-9]*\)\ .*/\1/g')";
	#	echo "No. taxa: $MY_NTAX"
	
	
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Step #3: Convert NEXUS to PHYLIP format. "
	fi
	############ STEP #3: CONVERT NEXUS TO PHYLIP FORMAT
		
	###
		if [[ "${machine}" = "Mac" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed -i.bak '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed -i.bak 's/^$\n//g' ./nexus.tmp ;
			rm ./*.bak;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed 's/^$\n//g' ./nexus.tmp ;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
	
			## Now that the matrix is isolated, get no. characters:
			MY_NCHAR="$(head -n1 ./matrixOnly.tmp | wc -c | sed 's/\ //g')";
			MY_CORR_NCHAR="$(calc $MY_NCHAR-1)";
			
			## Make PHYLIP header:
			echo "$MY_NTAX  $MY_CORR_NCHAR" > ./phylip_header.tmp ;
			
			## Paste taxon names spaces with the matrix (put back together):
			paste ./taxon_names_spaces.tmp ./matrixOnly.tmp > ./phylip_full_matrix.tmp
			
			## Make PHYLIP file:
			cat ./phylip_header.tmp ./phylip_full_matrix.tmp > "$MY_NEXUS_BASENAME".phy ;
	###

fi
##################
##################


##################
##################
if [[ "$MY_CHARSETS_SWITCH" = "1" ]] && [[ "$MY_NEXUS_CHARSETS_CHECK" != "0" ]]; then

	## Extract charset info from sets block at end of NEXUS file:
	MY_NEXUS_CHARSETS="$(grep -n "charset\|CHARSET" ./nexus.tmp)";
	#	echo "$MY_NEXUS_CHARSETS"
	if [[ ! -z "$MY_NEXUS_CHARSETS" ]]; then 
		## Count number of loci present in the NEXUS file, based on number of charsets defined.
		## Also get corrected count starting from 0 for numbering loci below...
		MY_NLOCI="$(echo "$MY_NEXUS_CHARSETS" | wc -l)" ;
	#	echo "No. loci: $MY_NLOCI"
	#	MY_CORR_NLOCI="$(calc $MY_NLOCI - 1)" ;
	#	echo "$MY_CORR_NLOCI"
	
		## Extract charsets from file:
		MY_NUM_LINES="$(wc -l "$MY_NEXUS" | sed 's/\.\///g; s/\ '"$MY_NEXUS"'.*//g')";
		# ^^^^ NOTE: It's OK to use "$MY_NEXUS" here but ./nexus.tmp everywhere else here down.
		MY_SETS_BLOCK_STARTLINE="$(grep -n "begin sets\|BEGIN SETS" ./nexus.tmp | sed 's/\:.*//g')";
		sed -n ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'p' ./nexus.tmp > "$MY_NEXUS_BASENAME".charsets.txt ;
	
		## Remove charsets from file, while accommodating different machine types...
		if [[ "${machine}" = "Mac" ]]; then
			sed -i.bak ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'d' ./nexus.tmp ;
			rm ./*.bak;
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -i ''"$MY_SETS_BLOCK_STARTLINE"','"$MY_NUM_LINES"'d' ./nexus.tmp ;
		fi
	fi
	
	## Extract NEXUS header and no. taxa information:
	MY_HEADER_MAT_LINE="$(grep -n 'MATRIX\|Matrix\|matrix' ./nexus.tmp | sed 's/\:.*//g')";
	MY_NTAX="$(grep -h 'ntax\|Ntax\|NTAX' ./nexus.tmp | sed 's/.*\=\([0-9]*\)\ .*/\1/g')";
	#	echo "No. taxa: $MY_NTAX"
	
	
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Step #3: Convert NEXUS to PHYLIP format. "
	fi
	############ STEP #3: CONVERT NEXUS TO PHYLIP FORMAT
		
	###
		if [[ "${machine}" = "Mac" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed -i.bak '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed -i.bak 's/^$\n//g' ./nexus.tmp ;
			rm ./*.bak;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
		if [[ "${machine}" = "Linux" ]]; then
			sed -n '1,'"$MY_HEADER_MAT_LINE"'p' ./nexus.tmp > ./nexus_header.tmp ;
			sed '1,'"$MY_HEADER_MAT_LINE"'d' ./nexus.tmp ;
			sed 's/^$\n//g' ./nexus.tmp ;
			sed -n '1,'"$MY_NTAX"'p' ./nexus.tmp > ./matrix.tmp ;
			sed 's/^\([A-Za-z\_0-9\.\ ]*\ \).*/\1/g' ./matrix.tmp > ./taxon_names_spaces.tmp ; 
			sed 's/^[A-Za-z\_0-9\.\ ]*\ //g' ./matrix.tmp > ./matrixOnly.tmp ; 
		fi
	
			## Now that the matrix is isolated, get no. characters:
			MY_NCHAR="$(head -n1 ./matrixOnly.tmp | wc -c | sed 's/\ //g')";
			MY_CORR_NCHAR="$(calc $MY_NCHAR-1)";
			
			## Make PHYLIP header:
			echo "$MY_NTAX  $MY_CORR_NCHAR" > ./phylip_header.tmp ;
			
			## Paste taxon names spaces with the matrix (put back together):
			paste ./taxon_names_spaces.tmp ./matrixOnly.tmp > ./phylip_full_matrix.tmp
			
			## Make PHYLIP file:
			cat ./phylip_header.tmp ./phylip_full_matrix.tmp > "$MY_NEXUS_BASENAME".phy ;
	###

fi
##################
##################



if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
	echo "INFO      | $(date) | Step #4: Clean up workspace by removing temporary files generated during run. "
fi
###### Remove temporary or unnecessary files created above:
	if [[ "$MY_VERBOSE_OUT_SWITCH" != "0" ]]; then
		echo "INFO      | $(date) | Removing temporary files... "
	fi
	if [[ "$(ls -1 ./*.tmp 2>/dev/null | wc -l | sed 's/\ //g')" != "0"  ]]; then 
		rm ./*.tmp ; 
	fi
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi 	## Remove arguments file generated when parsing the options.


echo "INFO      | $(date) | Done." 
echo "----------------------------------------------------------------------------------------------------------"
if [[ -s "$MY_NEXUS_BASENAME".charsets.txt ]] && [[ -s "$MY_NEXUS_BASENAME" ]]; then
	echo "output files: ./${MY_NEXUS_BASENAME}.phy"
	echo "              ./${MY_NEXUS_BASENAME}.charsets.txt"
else
	echo "output file: ./${MY_NEXUS_BASENAME}.phy"
fi
echo ""

##########################################################################################
######################################### END ############################################

}



############ CREATE USAGE & HELP TEXTS
USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) mandatory name of input NEXUS file in sequential NEXUS format
  -c   charSets (def: 0, absent; 1, present) whether or not <inputNEXUS> contains character 
       sets in a separate 'sets' block
  -v   verbose (def: 0, off; 1, on) output more information to screen (stdout)
  -o   overwritePHYLIP (def: 0, off; 1, on) force overwrite PHYLIP files in current directory
  -h   help text (also: --help) echo this help text and exit
  -H   verbose help text (also: --Help) echo verbose help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 Reads in a single NEXUS datafile and converts it to PHYLIP ('.phy') format (Felsenstein
 2002). Sequence names may include alphanumeric, hyphen, and underscore characters but no
 spaces, or else there will be issues. By default, program runs quietly with no ouput to
 screen or stderr or stdout files; however, -v option causes verbose run information to be
 output to screen (stdout).
	The only dependency is Perl (v5+), which is usually already installed on mac and Linux 
 distributions. Tested with Perl v5.1+ on macOS High Sierra (v10.13+) but will work on 
 many other versions or Linux.

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f NEXUS2PHYLIP -i <inputNEXUS> -v 1          Run on <inputNEXUS> file while echoing  
                                                          output to screen
    piranha -f NEXUS2PHYLIP -i <inputNEXUS> -v 1 -o 1     Run on <inputNEXUS>, echo output to
                                                          screen, and overwrite existing PHYLIP
                                                          file (if present)

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.
 Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.
"

VERBOSE_USAGE="Usage: $(basename "$0") [OPTION]...

 ${bold}Options:${reset}
  -i   inputNEXUS (def: NULL) mandatory name of input NEXUS file in sequential NEXUS format
  -c   charSets (def: 0, absent; 1, present) whether or not the input NEXUS file contains
       character sets in a separate 'sets' block
  -v   verbose (def: 0, off; 1, on) output more information to screen (stdout)
  -o   overwritePHYLIP (def: 0, off; 1, on) whether or not to force overwrite of PHYLIP
       files in current working directory
  -h   help text (also: --help) echo this help text and exit
  -H   verbose help text (also: --Help) echo verbose help text and exit
  -V   version (also: --version) echo version and exit

 ${bold}OVERVIEW${reset}
 Reads in a single NEXUS datafile and converts it to PHYLIP ('.phy') format (Felsenstein
 2002). Sequence names may include alphanumeric, hyphen, and underscore characters but no
 spaces, or else there will be issues. By default, program runs quietly with no ouput to
 screen or standard output files; however, -v option causes verbose run information to be
 output to screen (stdout).
	The only dependency is Perl (v5+), which is usually already installed on mac and Linux 
 distributions. Tested with Perl v5.1+ on macOS High Sierra (v10.13+).

 ${bold}DETAILS${reset}
 The -i flag specifies the name of the input NEXUS file, which should be a standard NEXUS
 DNA sequence data file in sequential format (sequences on one line per individual/taxon).
 This flag is mandatory.

 The -c flag allows the user to specify whether the input NEXUS file, <inputNEXUS>, does (1) 
 or does not (0) contain a character sets in a 'sets' block at the end of the file. This flag
 is not mandatory, and is set to 0 by default.
 
 The -v flag allows users to choose verbose output that prints name conversions, as well as
 step information (what the program is doing), to stdout. Off by default.

 The -o flag allows the user to specify whether or not to force output file overwrite of
 PHYLIP files in current working directory with the same name; set to 0 to skip overwrite
 and always preserve existing PHYLIP files, if present (not recommended; not tested).

 Dependencies: Perl, standard UNIX command line tools (e.g. sed). Tested with Perl v5.1+ on 
 macOS High Sierra (v10.13+).

 ${bold}Usage examples:${reset}
 Call the program using PIrANHA, as follows:

    piranha -f NEXUS2PHYLIP -i <inputNEXUS> -v 1          Run on <inputNEXUS> file while echoing  
                                                          output to screen
    piranha -f NEXUS2PHYLIP -i <inputNEXUS> -v 1 -o 1     Run on <inputNEXUS>, echo output to
                                                          screen, and overwrite existing PHYLIP
                                                          file (if present)

 ${bold}CITATION${reset}
 Bagley, J.C. 2020. PIrANHA v0.4a2. GitHub repository, Available at:
	<https://github.com/justincbagley/piranha>.

 ${bold}REFERENCES${reset}
 Felsenstein, J. 2002. PHYLIP (Phylogeny Inference Package) Version 3.6 a3.
	Available at: <http://evolution.genetics.washington.edu/phylip.html>.

 Created by Justin Bagley on Tue, 27 Nov 2018 13:11:13 -0600.
 Copyright (c) 2018-2020 Justin C. Bagley. All rights reserved.
"

if [[ -z "$*" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-h" ]] || [[ "$1" == "--help" ]]; then
	echo "$USAGE"
	exit
fi

if [[ "$1" == "-H" ]] || [[ "$1" == "--Help" ]]; then
	echo "$VERBOSE_USAGE"
	exit
fi

if [[ "$1" == "-V" ]] || [[ "$1" == "--version" ]]; then
	echo "$(basename "$0") $VERSION";
	exit
fi


############ CHECK ARGUMENTS
	# echo "$@"; echo "$#"; echo "$1" 
	# for i in "$@"; do
	# 	echo "$i";
	# done
	# MY_ARGS="$(echo "$@" | perl -pe $'s/\ /\n/')"
	# echo "$MY_ARGS"


############ CLEAN WORKING DIR, CAPTURE ARGUMENTS, SEND TO FILE FOR PARSING
	if [[ -s ./args.tmp ]]; then rm ./args.tmp ; fi ;
	if [[ -s ./args.txt ]]; then rm ./args.txt ; fi ;
	if [[ -s ./nexus.tmp ]]; then rm ./nexus.tmp ; fi ;

	ALL_MY_ARGUMENTS="$(echo "$@")"
	echo "$ALL_MY_ARGUMENTS" > ./args.txt
	perl -p -i -e $'s/\-/\n\-/g' ./args.txt
	#wc -l ./args.txt | perl -pe 's/\.\/args\.txt.*//g' | perl -pe 's/\ //g'


############ MANUALLY PARSE THE OPTIONS FROM ARGS

### SET OPTIONS TO DEFAULT VALUES, EXCEPT WHERE VALUES WERE READ IN FROM USER ARGS
	if [[  "$(grep -h '\-i' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_NEXUS=NULL ;
	else 
		MY_ARG="$(grep -h '\-i' ./args.txt | perl -pe 's/\-i//g' | perl -pe 's/\ //g')";
		MY_NEXUS="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-c' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_CHARSETS_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-c' ./args.txt | perl -pe 's/\-c//g' | perl -pe 's/\ //g')";
		MY_CHARSETS_SWITCH="$MY_ARG" ;
	fi
#
	if [[  "$(grep -h '\-v' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_VERBOSE_OUT_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-v' ./args.txt | perl -pe 's/\-v//g' | perl -pe 's/\ //g')";
		MY_VERBOSE_OUT_SWITCH="$MY_ARG" ;
	fi
#
#	if [[  "$(grep -h '\-k' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
#		MY_KEEP_FASTA_SWITCH=0 ;
#	else 
#		MY_ARG="$(grep -h '\-k' ./args.txt | perl -pe 's/\-k//g' | perl -pe 's/\ //g')";
#		MY_KEEP_FASTA_SWITCH="$MY_ARG" ;
#	fi
#
	if [[  "$(grep -h '\-o' ./args.txt | wc -l | perl -pe 's/\ //g')" = "0" ]]; then
		MY_OVERWRITE_SWITCH=0 ;
	else 
		MY_ARG="$(grep -h '\-o' ./args.txt | perl -pe 's/\-o//g' | perl -pe 's/\ //g')";
		MY_OVERWRITE_SWITCH="$MY_ARG" ;
	fi
#


# ############ PARSE THE OPTIONS
# while getopts 'i:c:v:k:o:' opt ; do
#   case $opt in
# ## NEXUS2PHYLIP options:
#     i) MY_NEXUS=$OPTARG ;;
#     c) MY_NAME_NCHARS_SWITCH=$OPTARG ;;
#     v) MY_VERBOSE_OUT_SWITCH=$OPTARG ;;
#     k) MY_KEEP_FASTA_SWITCH=$OPTARG ;;
#     o) MY_OVERWRITE_SWITCH=$OPTARG ;;
# ## Missing and illegal options:
#     :) printf "Missing argument for -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#    \?) printf "Illegal option: -%s\n" "$OPTARG" >&2
#        echo "$USAGE" >&2
#        exit 1 ;;
#   esac
# done
# 
# # Store the remaining part as arguments.
# # args+=("$@")


# ############# ############# #############
# ##       TIME TO RUN THE SCRIPT        ##
# ##                                     ##
# ## You shouldn't need to edit anything ##
# ## beneath this line                   ##
# ##                                     ##
# ############# ############# #############

# Trap bad exits with your cleanup function
trap trapCleanup EXIT INT TERM

# Set IFS to preferred implementation
IFS=$'\n\t'

# Exit on error. Append '||true' when you run the script if you expect an error.
set -o errexit

# Run in debug mode, if set
if ${debug}; then set -x ; fi

# Exit on empty variable
if ${strict}; then set -o nounset ; fi

# Bash will remember & return the highest exitcode in a chain of pipes.
# This way you can catch the error in case mysqldump fails in `mysqldump |gzip`, for example.
set -o pipefail

# Invoke the checkDependenices function to test for Bash packages.  Uncomment if needed.
# checkDependencies

# Run the script
NEXUS2PHYLIP

# Exit cleanly
safeExit
